grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	greetings+=translation_unit*;
	

translation_unit
	:External_declaration=external_declaration (Translation_unitR=translation_unitR)? 
;

translation_unitR
	:External_declaration=external_declaration (rec += translation_unitR)*
;

external_declaration:
	(=>function_definition) 
	|declaration
;
	

function_definition
	:Declaration_specifiers=declaration_specifiers Declarator=declarator Declaration_list=declaration_list Compound_statement=compound_statement 
	|Declaration_specifiers=declaration_specifiers Declarator=declarator Compound_statement=compound_statement 
;

declarator
	:Pointer=pointer dd=direct_declarator 
	|direct_declarator 
;



type_qualifier_list
	:Type_qualifier=type_qualifier (Type_qualifier_listR=type_qualifier_listR)? 
;

type_qualifier
	:'CONST' 
	|'RESTRICT' 
	|'VOLATILE' 
	|'ATOMIC' 
;


type_qualifier_listR
	:Type_qualifier=type_qualifier (rec += type_qualifier_listR)* 
;

direct_declarator
	:IDENTIFIER (dr=direct_declaratorR)? 
	|LEFT_PARENTESE Declarator=declarator RIGHT_PARENTESE (Direct_declaratorR=direct_declaratorR)? 
;

direct_declaratorR
	:LEFT_COCHETE RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE '*' RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE '_Static_assert' Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE '_Static_assert' Assignment_expression=assignment_expression RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE Type_qualifier_list=type_qualifier_list '*' RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE Type_qualifier_list=type_qualifier_list '_Static_assert' Assignment_expression=assignment_expression RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE Type_qualifier_list=type_qualifier_list RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_COCHETE Assignment_expression=assignment_expression RIGHT_COCHETE (rec += direct_declaratorR)* 
	|LEFT_PARENTESE Parameter_type_list=parameter_type_list RIGHT_PARENTESE (rec += direct_declaratorR)* 
	|LEFT_PARENTESE RIGHT_PARENTESE (rec += direct_declaratorR)* 
	|LEFT_PARENTESE Identifier_list=identifier_list RIGHT_PARENTESE (rec += direct_declaratorR)* 
;

parameter_type_list
	:parameter_list COMMA '...' 
	|parameter_list 
;

identifier_list
	:IDENTIFIER (il=identifier_listR)? 
;

identifier_listR
	:COMMA IDENTIFIER (rec += identifier_listR)*
;

parameter_list
	:Parameter_declaration=parameter_declaration (Parameter_listR=parameter_listR)? 
;

parameter_listR
	:COMMA Parameter_declaration=parameter_declaration (rec += parameter_listR)* 
;

parameter_declaration
	:Declaration_specifiers2=declaration_specifiers Declarator1=declarator 
	|Declaration_specifiers1=declaration_specifiers Abstract_declarator=abstract_declarator 
	|declaration_specifiers 
;

abstract_declarator
	//:Pointer=pointer Direct_abstract_declarator=direct_abstract_declarator 
	:pointer 
	//|direct_abstract_declarator 
;

declaration_list
	:Declaration=declaration (Declaration_listR=declaration_listR)? 
;

declaration_listR
	:Declaration=declaration (rec += declaration_listR)* 
;

compound_statement
	:LEFT_CHAVES RIGHT_CHAVES 
	|LEFT_CHAVES block_item_list RIGHT_CHAVES 
;


block_item_list
	:Block_item=block_item (Block_item_listR=block_item_listR)? 
;

block_item_listR
	:Block_item=block_item (rec += block_item_listR)* 
;

block_item
	:declaration 
	|statement 
;


statement
	:labeled_statement 
	|compound_statement 
	|expression_statement 
	|selection_statement 
	|iteration_statement 
	|jump_statement 
;

jump_statement
	:'GOTO' IDENTIFIER DOT_COMMA 
	|'CONTINUE' DOT_COMMA 
	|'BREAK' DOT_COMMA 
	|'return' DOT_COMMA 
	|'return' expression DOT_COMMA 
;

labeled_statement
	:IDENTIFIER DOTS a=statement 
	|'CASE' Constant_expression=constant_expression DOTS Statement=statement 
	|'DEFAULT' DOTS b=statement 
;

iteration_statement
	:'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 
	|'do' Statement=statement 'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE DOT_COMMA 
	|'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement RIGHT_PARENTESE Statement=statement 
	|'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement Expression=expression RIGHT_PARENTESE Statement=statement 
	|'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement RIGHT_PARENTESE Statement=statement 
	|'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement Expression=expression RIGHT_PARENTESE Statement=statement 
;

declaration
	:Declaration_specifiers=declaration_specifiers Init_declarator_list=init_declarator_list DOT_COMMA 
	|static_assert_declaration 
;

init_declarator_list
	:Init_declarator=init_declarator (Init_declarator_listR=init_declarator_listR)? 
;

init_declarator
	:Declarator=declarator '=' Initializer=initializer 
	|declarator 
;

init_declarator_listR
	:COMMA Init_declarator=init_declarator (rec += init_declarator_listR)* 
;



declaration_specifiers
	:Storage_class_specifier=storage_class_specifier (r1 += declaration_specifiers)* 
	|storage_class_specifier 
	|type_specifier ds=declaration_specifiers
	|type_specifier 
	|Type_qualifier=type_qualifier (r2 += declaration_specifiers)* 
	|type_qualifier
;

selection_statement
	:'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 'else' Statement=statement 
	|'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 
	|'SWITCH' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 
;

expression_statement
	:DOT_COMMA 
	|expression DOT_COMMA 
;

expression
	:Assignment_expression=assignment_expression (ExpressionR=expressionR)? 
;

expressionR
	:COMMA Assignment_expression=assignment_expression (rec += expressionR)* 
;

//L-01
conditional_expression
	:logical_or_expression 
	|Logical_or_expression=logical_or_expression '?' Expression=expression DOTS (rec += conditional_expression)* 
;

//L-02
logical_or_expression
	:Logical_and_expression=logical_and_expression (Logical_or_expressionR=logical_or_expressionR)? 
;

logical_or_expressionR
	:'||' Logical_and_expression=logical_and_expression (rec += logical_or_expressionR)* 
;

//L-03
logical_and_expression
	:Inclusive_or_expression=inclusive_or_expression (Logical_and_expressionR=logical_and_expressionR)? 
;

logical_and_expressionR
	:'&&' Inclusive_or_expression=inclusive_or_expression (rec += logical_and_expressionR)* 
;

//L-04
inclusive_or_expression
	:Exclusive_or_expression=exclusive_or_expression (Inclusive_or_expressionR=inclusive_or_expressionR)? 
;

inclusive_or_expressionR
	:'|' Exclusive_or_expression=exclusive_or_expression (rec += inclusive_or_expressionR)*
;

//L-05
exclusive_or_expression
	:And_expression=and_expression (Exclusive_or_expressionR=exclusive_or_expressionR)? 
;

exclusive_or_expressionR
	:'^' And_expression=and_expression (rec += exclusive_or_expressionR)* 
;


and_expressionR
	:'&' Equality_expression=equality_expression (rec += and_expressionR)* 
;

//L-07
and_expression
	:Equality_expression=equality_expression (And_expressionR=and_expressionR)? 
;

//L-08
equality_expression
	:Relational_expression=relational_expression (Equality_expressionR=equality_expressionR)? 
;

equality_expressionR
	:'==' Relational_expression=relational_expression (rec += equality_expressionR)* 
	|'!=' Relational_expression=relational_expression (rec += equality_expressionR)* 
;

//L-09
relational_expression
	:Shift_expression=shift_expression (re=relational_expressionR)? 
;

relational_expressionR
	:'<' Shift_expression=shift_expression (rec += relational_expressionR)* 
	|'>' Shift_expression=shift_expression (rec += relational_expressionR)* 
	|'<=' Shift_expression=shift_expression (rec += relational_expressionR)* 
	|'>=' Shift_expression=shift_expression (rec += relational_expressionR)*
;

//L-10
shift_expression
	:additive_expression (Shift_expressionR=shift_expressionR)? 
;

shift_expressionR
	:'<<' Additive_expression=additive_expression (rec += shift_expressionR)* 
	|'>>' Additive_expression=additive_expression (rec += shift_expressionR)*
;
//L-11
additive_expression
	:Multiplicative_expression=multiplicative_expression (Additive_expressionR=additive_expressionR)? 
;

additive_expressionR
	:PLUS Multiplicative_expression=multiplicative_expression (rec += additive_expressionR)* 
	|MINUS Multiplicative_expression=multiplicative_expression (rec += additive_expressionR)* 
;

multiplicative_expressionR
	:'*' Cast_expression=cast_expression (rec += multiplicative_expressionR)* 
	|'/' Cast_expression=cast_expression (rec += multiplicative_expressionR)* 
	|'%' Cast_expression=cast_expression (rec += multiplicative_expressionR)* 
;
//L-12
multiplicative_expression
	:Cast_expression=cast_expression (Multiplicative_expressionR=multiplicative_expressionR)? 
;
assignment_expression 
	:conditional_expression
	|Unary_expression=unary_expression Assignment_operator=assignment_operator (rec += assignment_expression)* 
;


cast_expression
	:unary_expression 
	|LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE (rec += cast_expression)* 
;

unary_expression
	:postfix_expression 
	|INC_OP (rec += unary_expression)* 
	|DEC_OP (rec += unary_expression)*
	|Unary_operator=unary_operator ce=cast_expression
;

postfix_expression
	:Primary_expression=primary_expression (Postfix_expressionR=postfix_expressionR)? 
	|LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list RIGHT_CHAVES (Postfix_expressionR=postfix_expressionR)? 
	|LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list COMMA RIGHT_CHAVES (Postfix_expressionR=postfix_expressionR)? 
;

initializer
	:LEFT_CHAVES initializer_list RIGHT_CHAVES 
	|LEFT_CHAVES initializer_list COMMA RIGHT_CHAVES 
	|assignment_expression 
;

initializer_list
	:Designation=designation Initializer=initializer (il=initializer_listR)? 
	|Initializer=initializer (ilr=initializer_listR)? 
;

initializer_listR
	:COMMA Designation=designation Initializer=initializer (rec += initializer_listR)* 
	|COMMA Initializer=initializer (rec += initializer_listR)* 
;

designation
	:designator_list '=' 
;

designator_list
	:Designator=designator (DesignatorR=designator_listR)? 
;

designator_listR
	:Designator=designator (rec += designator_listR)*
;

designator
	:LEFT_COCHETE constant_expression RIGHT_COCHETE 
	|'.' IDENTIFIER 
;

constant_expression
	:conditional_expression 
;


type_name
	:Specifier_qualifier_list=specifier_qualifier_list ad=abstract_declarator 
	|specifier_qualifier_list 
;

specifier_qualifier_list
	:Type_specifier=type_specifier (rec += specifier_qualifier_list)* 
	|type_qualifier 
;

struct_declarator_list
	:Struct_declarator=struct_declarator (Struct_declarator_listR=struct_declarator_listR)? 
;

struct_declaration_list
	:Struct_declaration=struct_declaration (Struct_declaration_listR=struct_declaration_listR)? 
;

struct_declaration_listR
	:Struct_declaration=struct_declaration (rec += struct_declaration_listR)* 
;

struct_declaration
	:specifier_qualifier_list DOT_COMMA 
	|Specifier_qualifier_listx=specifier_qualifier_list Struct_declarator_list=struct_declarator_list DOT_COMMA 
	|static_assert_declaration 
;

struct_declarator_listR
	:COMMA Struct_declarator=struct_declarator (rec += struct_declarator_listR)* 
;

struct_declarator
	:DOTS constant_expression 
	|Declaratorx=declarator DOTS Constant_expression1=constant_expression 
	|declarator 
;

static_assert_declaration
	:'STATIC_ASSERT' LEFT_PARENTESE constant_expression COMMA 'STRING_LITERAL' RIGHT_PARENTESE DOT_COMMA 
;

struct_or_union_specifier
	:Struct_or_union=struct_or_union LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES 
	|Struct_or_union=struct_or_union id=IDENTIFIER LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES 
	|struct_or_union IDENTIFIER 
;




atomic_type_specifier
	:'ATOMIC' LEFT_PARENTESE type_name RIGHT_PARENTESE 
;


postfix_expressionR
	:LEFT_COCHETE Expression=expression RIGHT_COCHETE (rec += postfix_expressionR)* 
	|LEFT_PARENTESE RIGHT_PARENTESE (rec += postfix_expressionR)*
	|LEFT_PARENTESE Argument_expression_list=argument_expression_list RIGHT_PARENTESE (rec += postfix_expressionR)* 
	|'.' IDENTIFIER (rec += postfix_expressionR)* 
	|'->' IDENTIFIER (rec += postfix_expressionR)* 
	|INC_OP (rec += postfix_expressionR)* 
	|DEC_OP (rec += postfix_expressionR)* 
;


argument_expression_list
	:Assignment_expression=assignment_expression (Argument_expression_listR=argument_expression_listR)? 
;

argument_expression_listR
	:COMMA Assignment_expression=assignment_expression (rec += argument_expression_listR)* 
;
	
primary_expression
	:IDENTIFIER
	|constant 
	|LEFT_PARENTESE expression RIGHT_PARENTESE
	|{StringC} string=STRING_C
;

pointer
	:'*' Type_qualifier_list=type_qualifier_list (rec += pointer)* 
	|'*' type_qualifier_list 
	|'*' (rec += pointer)* 
	|'*' 
;


constant
	:INTEGER_NUMBER 
	|DOUBLE_NUMBER 
;


DOUBLE_NUMBER:
	INTEGER_NUMBER '.' INTEGER_NUMBER
;



//#------------------------TABLE SYMBOLS-----------------------------
IDENTIFIER:
	name=ID
;

struct_or_union
	:'STRUCT' 
	|'UNION' 
;


unary_operator
	:'&' 
	|'*' 
	|PLUS 
	|MINUS 
	|'~' 
	|'!' 
;

type_specifier
	:'void' 
	|'char' 
	|'short' 
	|'int'
	|'long' 
	|'float' 
	|'double'
	|'SIGNED' 
	|'UNSIGNED' 
	|'BOOL' 
	|'COMPLEX' 
	|'IMAGINARY' 
	|struct_or_union_specifier 
	|atomic_type_specifier
	|'TYPEDEF_NAME' 
;

storage_class_specifier
	:'TYPEDEF' 
	|'EXTERN' 
	|'STATIC' 
	|'THREAD_LOCAL' 
	|'AUTO' 
	|'REGISTER' 
;

assignment_operator
	:'=' 
	|'*=' 
	|'/=' 
	|'%=' 
	|'+=' 
	|'-=' 
	|'<<=' 
	|'>>=' 
	|'&=' 
	|'^=' 
	|'|=' 
;

terminal DOTS: ':';
terminal MINUS:	'-';
terminal PLUS:	'+';
terminal COMMA:	',';
terminal DOT_COMMA:	';';
terminal LEFT_CHAVES:	'{';
terminal RIGHT_CHAVES:	'}';
terminal LEFT_COCHETE: '[';
terminal RIGHT_COCHETE:	']';
terminal LEFT_PARENTESE: '(';
terminal RIGHT_PARENTESE: ')';
terminal INC_OP: '++';
terminal DEC_OP: '--';
terminal INTEGER_NUMBER: ('0'..'9')*;
terminal fragment SINGLE_QUOTES: "'";
terminal STRING_C returns ecore::EString: SINGLE_QUOTES ((!"'")|"''")* SINGLE_QUOTES;