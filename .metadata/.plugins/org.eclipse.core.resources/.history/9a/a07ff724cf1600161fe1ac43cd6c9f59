/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.validation

import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
	
    private static final String TYPE_MISMATCH = "Type mismatch";
    private static final String STRUCTURED = "non-primitive type";
    private static final String STRING = "string";
    private static final String INTEGER = "integer";
    private static final String REAL = "real";
    private static final String TO = " to ";
    private static final String TYPE_MISMATCH_CANNOT_CONVERT = "Type mismatch: Cannot convert from ";
    private static final String BOOLEAN = "boolean";

    @Check
    public void checkParameters(FunctionDesignator functionDesignator) {
//        FunctionDeclaration d = (FunctionDeclaration) functionDesignator.eCrossReferences().get(0);
//
//        final EList<FormalParameterSection> declaredParameters = d.getFormalParameterList().getFormalParameterSections();
//        final EList<ActualParameter> designatorParameters = functionDesignator.getActualParameterList().getActualParameters();
//
//        checkParameters(declaredParameters, designatorParameters, PascalPackage.Literals.FUNCTION_DESIGNATOR__ACTUAL_PARAMETER_LIST);
    }

//    private void checkParameters(final EList<FormalParameterSection> declaredParameters, final EList<ActualParameter> actualParameters,
//            EReference reference) {
//        final List<String> typeNames = new ArrayList<String>();
//
//        int parametersInSection;
//
//        for (FormalParameterSection section : declaredParameters) {
//            if (section.getValueSection() != null) {
//
//                parametersInSection = section.getValueSection().getIdentifierList().getIdentifiers().size();
//
//                for (int i = 0; i < parametersInSection; ++i) {
//                    typeNames.add(primitiveTypeName(section.getValueSection().getType().getType()));
//                }
//
//            } else {
//
//                parametersInSection = section.getValueSection().getIdentifierList().getIdentifiers().size();
//
//                for (int i = 0; i < parametersInSection; ++i) {
//                    typeNames.add(primitiveTypeName(section.getValueSection().getType().getType()));
//                }
//
//            }
//        }
//
//        if (typeNames.size() != actualParameters.size()) {
//            error("Invalid number of parameters. Expected: " + typeNames.size() + " got " + actualParameters.size(), reference);
//            return;
//        }
//
//        final List<String> designatorTypeNames = new ArrayList<String>();
//        for (int i = 0; i < actualParameters.size(); ++i) {
//            Expression e = actualParameters.get(i).getExpression().getSimpleExpressions().get(0).getTerms().get(0).getFactors().get(0);
//
//            if (e.getFunctionDesignator() != null) {
//                FunctionDeclaration f = (FunctionDeclaration) e.getFunctionDesignator().eCrossReferences().get(0);
//                designatorTypeNames.add(primitiveTypeName(f.getType().getType()));
//
//            } else if (e.getVariable() != null) {
//                VariableDeclaration v = e.getVariable();
//                designatorTypeNames.add(primitiveTypeName(v.getType()));
//
//            } else if (((e instanceof IntegerLiteral))) {
//                designatorTypeNames.add(INTEGER);
//
//            } else if ((e instanceof RealLiteral)) {
//                designatorTypeNames.add(REAL);
//
//            } else if ((e instanceof StringLiteral)) {
//                designatorTypeNames.add(STRING);
//
//            } else if ((e instanceof BooleanLiteral)) {
//                designatorTypeNames.add(BOOLEAN);
//            }
//        }
//
//        if (!checkParameterTypesConformity(typeNames, designatorTypeNames)) {
//            StringBuilder sb = new StringBuilder(TYPE_MISMATCH).append(". Expected: ");
//
//            for (String s : typeNames) {
//                sb.append(s).append(" ");
//            }
//
//            sb.append("\nGot: ");
//
//            for (String s : designatorTypeNames) {
//                sb.append(s).append(" ");
//            }
//
//            error(sb.toString(), reference);
//        }
//    }
//
//    private boolean checkParameterTypesConformity(List<String> declared, List<String> actual) {
//
//        if (declared.size() != actual.size()) {
//            return false;
//        }
//
//        for (int i = 0; i < declared.size(); ++i) {
//            if (declared.get(i).equals(REAL)) {
//                if (!(actual.get(i).equals(REAL) || actual.get(i).equals(INTEGER))) {
//                    return false;
//                }
//            } else if (!declared.get(i).equals(actual.get(i))) {
//                return false;
//            }
//        }
//
//        return true;
//    }
//
//    @Check
//    public void checkParameters(ProcedureStatement procedureStatement) {
//        ProcedureDeclaration d = (ProcedureDeclaration) procedureStatement.eCrossReferences().get(0);
//
//        final EList<FormalParameterSection> declaredParameters = d.getFormalParameterList().getFormalParameterSections();
//        final EList<ActualParameter> statementParameters = procedureStatement.getParameterList().getActualParameters();
//
//        checkParameters(declaredParameters, statementParameters, PascalPackage.Literals.PROCEDURE_STATEMENT__PARAMETER_LIST);
//    }
//
//    @Check
//    public void checkForStatement(ForStatement forStatement) {
//        VariableDeclaration v = (VariableDeclaration) forStatement.getCounter().eCrossReferences().get(0);
//        Expression initialExpression = forStatement.getCounterInitialValue().getSimpleExpressions().get(0).getTerms().get(0).getFactors()
//                .get(0);
//        Expression finalExpression = forStatement.getCounterFinalValue().getSimpleExpressions().get(0).getTerms().get(0).getFactors()
//                .get(0);
//
//        /* Verify if counter type is integer */
//        if (!isInteger(v.getType())) {
//            error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(v.getType()) + TO + INTEGER,
//                    PascalPackage.Literals.FOR_STATEMENT__COUNTER);
//        }
//
//        /* Verify if initial expression evaluates to integer */
//        if (initialExpression.getFunctionDesignator() != null) {
//            FunctionDeclaration f = (FunctionDeclaration) initialExpression.getFunctionDesignator().eCrossReferences().get(0);
//            if (!isInteger(f.getType().getType())) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(f.getType().getType()) + TO + INTEGER,
//                        PascalPackage.Literals.FOR_STATEMENT__COUNTER_INITIAL_VALUE);
//            }
//
//        } else if (initialExpression.getVariable() != null) {
//            if (!isInteger(initialExpression.getVariable().getType())) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(initialExpression.getVariable().getType()) + TO + INTEGER,
//                        PascalPackage.Literals.FOR_STATEMENT__COUNTER_INITIAL_VALUE);
//            }
//
//        } else if (!(initialExpression instanceof IntegerLiteral)) {
//            error(TYPE_MISMATCH_CANNOT_CONVERT + initialExpression.getClass().getSimpleName() + TO + INTEGER,
//                    PascalPackage.Literals.FOR_STATEMENT__COUNTER_INITIAL_VALUE);
//        }
//
//        /* Verify is final expression evaluates to integer */
//        if (finalExpression.getFunctionDesignator() != null) {
//            FunctionDeclaration f = (FunctionDeclaration) finalExpression.getFunctionDesignator().eCrossReferences().get(0);
//            if (!isInteger(f.getType().getType())) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(f.getType().getType()) + TO + INTEGER,
//                        PascalPackage.Literals.FOR_STATEMENT__COUNTER_FINAL_VALUE);
//            }
//
//        } else if (finalExpression.getVariable() != null) {
//            if (!isInteger(finalExpression.getVariable().getType())) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(finalExpression.getVariable().getType()) + TO + INTEGER,
//                        PascalPackage.Literals.FOR_STATEMENT__COUNTER_FINAL_VALUE);
//            }
//
//        } else if (!(finalExpression instanceof IntegerLiteral)) {
//            error(TYPE_MISMATCH_CANNOT_CONVERT + finalExpression.getClass().getSimpleName() + TO + INTEGER,
//                    PascalPackage.Literals.FOR_STATEMENT__COUNTER_FINAL_VALUE);
//        }
//    }
//
//    @Check
//    public void checkConstNameUppercase(ConstantDefinition constant) {
//        for (char c : constant.getName().toCharArray()) {
//            if (!Character.isUpperCase(c)) {
//                warning("Constant names should be UPPERCASE", PascalPackage.Literals.CONSTANT_DEFINITION__NAME);
//            }
//        }
//    }
//
//    @Check
//    public void checkAssignmentTypes(AssignmentStatement assignment) {
//        VariableDeclaration v = assignment.getVariable();
//        Expression e = assignment.getValue().getSimpleExpressions().get(0).getTerms().get(0).getFactors().get(0);
//
//        if (e.getFunctionDesignator() != null) {
//            FunctionDeclaration f = (FunctionDeclaration) e.getFunctionDesignator().eCrossReferences().get(0);
//
//            if (isReal(v.getType())) {
//                if (!(isInteger(f.getType().getType()) || isReal(f.getType().getType()))) {
//                    error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(f.getType().getType()) + TO + primitiveTypeName(v.getType()),
//                            PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//                }
//            } else if (!primitiveTypeName(f.getType().getType()).equals(primitiveTypeName(v.getType()))) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(f.getType().getType()) + TO + primitiveTypeName(v.getType()),
//                        PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//            } else if (!isPrimitiveType(f.getType().getType())) {
//                error(TYPE_MISMATCH, PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//            }
//
//        } else if (e.getVariable() != null) {
//            VariableDeclaration var = e.getVariable();
//
//            if (isReal(v.getType())) {
//                if (!isReal(var.getType()) && !isInteger(var.getType())) {
//                    error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(var.getType()) + TO + REAL,
//                            PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//
//                }
//            } else if (!primitiveTypeName(v.getType()).equals(primitiveTypeName(var.getType()))) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + primitiveTypeName(var.getType()) + TO + primitiveTypeName(v.getType()),
//                        PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//            }
//
//        } else if (isReal(v.getType())) {
//            if (!((e instanceof IntegerLiteral) || (e instanceof RealLiteral))) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + e.getClass().getSimpleName() + TO + REAL,
//                        PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//
//            }
//        } else if (isInteger(v.getType())) {
//            if (!(e instanceof IntegerLiteral)) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + e.getClass().getSimpleName() + TO + INTEGER,
//                        PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//
//            }
//        } else if (isString(v.getType())) {
//            if (!(e instanceof StringLiteral)) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + e.getClass().getSimpleName() + TO + STRING,
//                        PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//
//            }
//        } else if (isBoolean(v.getType())) {
//            if (!(e instanceof BooleanLiteral)) {
//                error(TYPE_MISMATCH_CANNOT_CONVERT + e.getClass().getSimpleName() + TO + BOOLEAN,
//                        PascalPackage.Literals.ASSIGNMENT_STATEMENT__VALUE);
//            }
//        }
//    }
//
//    private boolean isBoolean(Type type) {
//        return BOOLEAN.equals(primitiveTypeName(type));
//    }
//
//    private boolean isString(Type type) {
//        return STRING.equals(primitiveTypeName(type));
//    }
//
//    private boolean isReal(Type type) {
//        return REAL.equals(primitiveTypeName(type));
//    }
//
//    private boolean isInteger(Type type) {
//        return INTEGER.equals(primitiveTypeName(type));
//    }
//
//    private boolean isPrimitiveType(Type type) {
//        return ((type != null) && (type.getSimpleType() != null) && (type.getSimpleType().getPrimitiveType() != null));
//    }
//
//    private String primitiveTypeName(Type type) {
//        if (isPrimitiveType(type)) {
//            return type.getSimpleType().getPrimitiveType().getName().toLowerCase();
//        } else {
//            return STRUCTURED;
//        }
//    }
//}

	
}
