/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsTranslation_unitParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=translation_unit*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=translation_unit*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//translation_unit
		public RuleCall getGreetingsTranslation_unitParserRuleCall_0() { return cGreetingsTranslation_unitParserRuleCall_0; }
	}
	public class Translation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.translation_unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternal_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExternal_declarationExternal_declarationParserRuleCall_0_0 = (RuleCall)cExternal_declarationAssignment_0.eContents().get(0);
		private final Assignment cTranslation_unitRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTranslation_unitRTranslation_unitRParserRuleCall_1_0 = (RuleCall)cTranslation_unitRAssignment_1.eContents().get(0);
		
		//translation_unit:
		//	External_declaration=external_declaration Translation_unitR=translation_unitR?;
		@Override public ParserRule getRule() { return rule; }
		
		//External_declaration=external_declaration Translation_unitR=translation_unitR?
		public Group getGroup() { return cGroup; }
		
		//External_declaration=external_declaration
		public Assignment getExternal_declarationAssignment_0() { return cExternal_declarationAssignment_0; }
		
		//external_declaration
		public RuleCall getExternal_declarationExternal_declarationParserRuleCall_0_0() { return cExternal_declarationExternal_declarationParserRuleCall_0_0; }
		
		//Translation_unitR=translation_unitR?
		public Assignment getTranslation_unitRAssignment_1() { return cTranslation_unitRAssignment_1; }
		
		//translation_unitR
		public RuleCall getTranslation_unitRTranslation_unitRParserRuleCall_1_0() { return cTranslation_unitRTranslation_unitRParserRuleCall_1_0; }
	}
	public class Translation_unitRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.translation_unitR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternal_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExternal_declarationExternal_declarationParserRuleCall_0_0 = (RuleCall)cExternal_declarationAssignment_0.eContents().get(0);
		private final Assignment cRecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecTranslation_unitRParserRuleCall_1_0 = (RuleCall)cRecAssignment_1.eContents().get(0);
		
		//translation_unitR:
		//	External_declaration=external_declaration rec+=translation_unitR*;
		@Override public ParserRule getRule() { return rule; }
		
		//External_declaration=external_declaration rec+=translation_unitR*
		public Group getGroup() { return cGroup; }
		
		//External_declaration=external_declaration
		public Assignment getExternal_declarationAssignment_0() { return cExternal_declarationAssignment_0; }
		
		//external_declaration
		public RuleCall getExternal_declarationExternal_declarationParserRuleCall_0_0() { return cExternal_declarationExternal_declarationParserRuleCall_0_0; }
		
		//rec+=translation_unitR*
		public Assignment getRecAssignment_1() { return cRecAssignment_1; }
		
		//translation_unitR
		public RuleCall getRecTranslation_unitRParserRuleCall_1_0() { return cRecTranslation_unitRParserRuleCall_1_0; }
	}
	public class External_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.external_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunction_definitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//external_declaration:
		//	function_definition
		//	| declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//function_definition | declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function_definition
		public RuleCall getFunction_definitionParserRuleCall_0() { return cFunction_definitionParserRuleCall_0; }
		
		//declaration
		public RuleCall getDeclarationParserRuleCall_1() { return cDeclarationParserRuleCall_1; }
	}
	public class Function_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.function_definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_1_0 = (RuleCall)cDeclaratorAssignment_0_1.eContents().get(0);
		private final Assignment cDeclaration_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDeclaration_listDeclaration_listParserRuleCall_0_2_0 = (RuleCall)cDeclaration_listAssignment_0_2.eContents().get(0);
		private final Assignment cCompound_statementAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_0_3_0 = (RuleCall)cCompound_statementAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiersAssignment_1_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1.eContents().get(0);
		private final Assignment cCompound_statementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_1_2_0 = (RuleCall)cCompound_statementAssignment_1_2.eContents().get(0);
		
		//function_definition:
		//	Declaration_specifiers=declaration_specifiers Declarator=declarator Declaration_list=declaration_list
		//	Compound_statement=compound_statement
		//	| Declaration_specifiers=declaration_specifiers Declarator=declarator Compound_statement=compound_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration_specifiers=declaration_specifiers Declarator=declarator Declaration_list=declaration_list
		//Compound_statement=compound_statement | Declaration_specifiers=declaration_specifiers Declarator=declarator
		//Compound_statement=compound_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration_specifiers=declaration_specifiers Declarator=declarator Declaration_list=declaration_list
		//Compound_statement=compound_statement
		public Group getGroup_0() { return cGroup_0; }
		
		//Declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//Declarator=declarator
		public Assignment getDeclaratorAssignment_0_1() { return cDeclaratorAssignment_0_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_1_0() { return cDeclaratorDeclaratorParserRuleCall_0_1_0; }
		
		//Declaration_list=declaration_list
		public Assignment getDeclaration_listAssignment_0_2() { return cDeclaration_listAssignment_0_2; }
		
		//declaration_list
		public RuleCall getDeclaration_listDeclaration_listParserRuleCall_0_2_0() { return cDeclaration_listDeclaration_listParserRuleCall_0_2_0; }
		
		//Compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_0_3() { return cCompound_statementAssignment_0_3; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_0_3_0() { return cCompound_statementCompound_statementParserRuleCall_0_3_0; }
		
		//Declaration_specifiers=declaration_specifiers Declarator=declarator Compound_statement=compound_statement
		public Group getGroup_1() { return cGroup_1; }
		
		//Declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_1_0() { return cDeclaration_specifiersAssignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0; }
		
		//Declarator=declarator
		public Assignment getDeclaratorAssignment_1_1() { return cDeclaratorAssignment_1_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_0; }
		
		//Compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_1_2() { return cCompound_statementAssignment_1_2; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_1_2_0() { return cCompound_statementCompound_statementParserRuleCall_1_2_0; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPointerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPointerPointerParserRuleCall_0_0_0 = (RuleCall)cPointerAssignment_0_0.eContents().get(0);
		private final Assignment cDdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDdDirect_declaratorParserRuleCall_0_1_0 = (RuleCall)cDdAssignment_0_1.eContents().get(0);
		private final RuleCall cDirect_declaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//declarator:
		//	Pointer=pointer dd=direct_declarator
		//	| direct_declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//Pointer=pointer dd=direct_declarator | direct_declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Pointer=pointer dd=direct_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//Pointer=pointer
		public Assignment getPointerAssignment_0_0() { return cPointerAssignment_0_0; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_0_0_0() { return cPointerPointerParserRuleCall_0_0_0; }
		
		//dd=direct_declarator
		public Assignment getDdAssignment_0_1() { return cDdAssignment_0_1; }
		
		//direct_declarator
		public RuleCall getDdDirect_declaratorParserRuleCall_0_1_0() { return cDdDirect_declaratorParserRuleCall_0_1_0; }
		
		//direct_declarator
		public RuleCall getDirect_declaratorParserRuleCall_1() { return cDirect_declaratorParserRuleCall_1; }
	}
	public class Type_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cType_qualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_0_0 = (RuleCall)cType_qualifierAssignment_0.eContents().get(0);
		private final Assignment cType_qualifier_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cType_qualifier_listRType_qualifier_listRParserRuleCall_1_0 = (RuleCall)cType_qualifier_listRAssignment_1.eContents().get(0);
		
		//type_qualifier_list:
		//	Type_qualifier=type_qualifier Type_qualifier_listR=type_qualifier_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Type_qualifier=type_qualifier Type_qualifier_listR=type_qualifier_listR?
		public Group getGroup() { return cGroup; }
		
		//Type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_0() { return cType_qualifierAssignment_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_0_0() { return cType_qualifierType_qualifierParserRuleCall_0_0; }
		
		//Type_qualifier_listR=type_qualifier_listR?
		public Assignment getType_qualifier_listRAssignment_1() { return cType_qualifier_listRAssignment_1; }
		
		//type_qualifier_listR
		public RuleCall getType_qualifier_listRType_qualifier_listRParserRuleCall_1_0() { return cType_qualifier_listRType_qualifier_listRParserRuleCall_1_0; }
	}
	public class Type_qualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCONSTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRESTRICTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVOLATILEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cATOMICKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//type_qualifier:
		//	'CONST'
		//	| 'RESTRICT'
		//	| 'VOLATILE'
		//	| 'ATOMIC';
		@Override public ParserRule getRule() { return rule; }
		
		//'CONST' | 'RESTRICT' | 'VOLATILE' | 'ATOMIC'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CONST'
		public Keyword getCONSTKeyword_0() { return cCONSTKeyword_0; }
		
		//'RESTRICT'
		public Keyword getRESTRICTKeyword_1() { return cRESTRICTKeyword_1; }
		
		//'VOLATILE'
		public Keyword getVOLATILEKeyword_2() { return cVOLATILEKeyword_2; }
		
		//'ATOMIC'
		public Keyword getATOMICKeyword_3() { return cATOMICKeyword_3; }
	}
	public class Type_qualifier_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cType_qualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_0_0 = (RuleCall)cType_qualifierAssignment_0.eContents().get(0);
		private final Assignment cRecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecType_qualifier_listRParserRuleCall_1_0 = (RuleCall)cRecAssignment_1.eContents().get(0);
		
		//type_qualifier_listR:
		//	Type_qualifier=type_qualifier rec+=type_qualifier_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//Type_qualifier=type_qualifier rec+=type_qualifier_listR*
		public Group getGroup() { return cGroup; }
		
		//Type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_0() { return cType_qualifierAssignment_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_0_0() { return cType_qualifierType_qualifierParserRuleCall_0_0; }
		
		//rec+=type_qualifier_listR*
		public Assignment getRecAssignment_1() { return cRecAssignment_1; }
		
		//type_qualifier_listR
		public RuleCall getRecType_qualifier_listRParserRuleCall_1_0() { return cRecType_qualifier_listRParserRuleCall_1_0; }
	}
	public class Direct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDrDirect_declaratorRParserRuleCall_0_1_0 = (RuleCall)cDrAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cDirect_declaratorRAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDirect_declaratorRDirect_declaratorRParserRuleCall_1_3_0 = (RuleCall)cDirect_declaratorRAssignment_1_3.eContents().get(0);
		
		//direct_declarator:
		//	IDENTIFIER dr=direct_declaratorR?
		//	| LEFT_PARENTESE Declarator=declarator RIGHT_PARENTESE Direct_declaratorR=direct_declaratorR?;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER dr=direct_declaratorR? | LEFT_PARENTESE Declarator=declarator RIGHT_PARENTESE
		//Direct_declaratorR=direct_declaratorR?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER dr=direct_declaratorR?
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_0() { return cIDENTIFIERParserRuleCall_0_0; }
		
		//dr=direct_declaratorR?
		public Assignment getDrAssignment_0_1() { return cDrAssignment_0_1; }
		
		//direct_declaratorR
		public RuleCall getDrDirect_declaratorRParserRuleCall_0_1_0() { return cDrDirect_declaratorRParserRuleCall_0_1_0; }
		
		//LEFT_PARENTESE Declarator=declarator RIGHT_PARENTESE Direct_declaratorR=direct_declaratorR?
		public Group getGroup_1() { return cGroup_1; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1_0() { return cLEFT_PARENTESETerminalRuleCall_1_0; }
		
		//Declarator=declarator
		public Assignment getDeclaratorAssignment_1_1() { return cDeclaratorAssignment_1_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_1_2() { return cRIGHT_PARENTESETerminalRuleCall_1_2; }
		
		//Direct_declaratorR=direct_declaratorR?
		public Assignment getDirect_declaratorRAssignment_1_3() { return cDirect_declaratorRAssignment_1_3; }
		
		//direct_declaratorR
		public RuleCall getDirect_declaratorRDirect_declaratorRParserRuleCall_1_3_0() { return cDirect_declaratorRDirect_declaratorRParserRuleCall_1_3_0; }
	}
	public class Direct_declaratorRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_declaratorR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cRecAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_0_2_0 = (RuleCall)cRecAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cRecAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_1_3_0 = (RuleCall)cRecAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword c_Static_assertKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cType_qualifier_listAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0 = (RuleCall)cType_qualifier_listAssignment_2_2.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0 = (RuleCall)cAssignment_expressionAssignment_2_3.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Assignment cRecAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_2_5_0 = (RuleCall)cRecAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword c_Static_assertKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0 = (RuleCall)cAssignment_expressionAssignment_3_2.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Assignment cRecAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_3_4_0 = (RuleCall)cRecAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0 = (RuleCall)cType_qualifier_listAssignment_4_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Assignment cRecAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_4_4_0 = (RuleCall)cRecAssignment_4_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0 = (RuleCall)cType_qualifier_listAssignment_5_1.eContents().get(0);
		private final Keyword c_Static_assertKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cAssignment_expressionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0 = (RuleCall)cAssignment_expressionAssignment_5_3.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_5_4 = (RuleCall)cGroup_5.eContents().get(4);
		private final Assignment cRecAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_5_5_0 = (RuleCall)cRecAssignment_5_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0 = (RuleCall)cType_qualifier_listAssignment_6_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_6_2_0 = (RuleCall)cAssignment_expressionAssignment_6_2.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Assignment cRecAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_6_4_0 = (RuleCall)cRecAssignment_6_4.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_7_1_0 = (RuleCall)cType_qualifier_listAssignment_7_1.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_7_2 = (RuleCall)cGroup_7.eContents().get(2);
		private final Assignment cRecAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_7_3_0 = (RuleCall)cRecAssignment_7_3.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_8_1_0 = (RuleCall)cAssignment_expressionAssignment_8_1.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_8_2 = (RuleCall)cGroup_8.eContents().get(2);
		private final Assignment cRecAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_8_3_0 = (RuleCall)cRecAssignment_8_3.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Assignment cParameter_type_listAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParameter_type_listParameter_type_listParserRuleCall_9_1_0 = (RuleCall)cParameter_type_listAssignment_9_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_9_2 = (RuleCall)cGroup_9.eContents().get(2);
		private final Assignment cRecAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_9_3_0 = (RuleCall)cRecAssignment_9_3.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Assignment cRecAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_10_2_0 = (RuleCall)cRecAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_11_0 = (RuleCall)cGroup_11.eContents().get(0);
		private final Assignment cIdentifier_listAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cIdentifier_listIdentifier_listParserRuleCall_11_1_0 = (RuleCall)cIdentifier_listAssignment_11_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_11_2 = (RuleCall)cGroup_11.eContents().get(2);
		private final Assignment cRecAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cRecDirect_declaratorRParserRuleCall_11_3_0 = (RuleCall)cRecAssignment_11_3.eContents().get(0);
		
		//direct_declaratorR:
		//	LEFT_COCHETE RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_COCHETE '*' RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_COCHETE '_Static_assert' Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression
		//	RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_COCHETE '_Static_assert' Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list '*' RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list '_Static_assert' Assignment_expression=assignment_expression
		//	RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression RIGHT_COCHETE
		//	rec+=direct_declaratorR*
		//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_COCHETE Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR*
		//	| LEFT_PARENTESE Parameter_type_list=parameter_type_list RIGHT_PARENTESE rec+=direct_declaratorR*
		//	| LEFT_PARENTESE RIGHT_PARENTESE rec+=direct_declaratorR*
		//	| LEFT_PARENTESE Identifier_list=identifier_list RIGHT_PARENTESE rec+=direct_declaratorR*;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_COCHETE RIGHT_COCHETE rec+=direct_declaratorR* | LEFT_COCHETE '*' RIGHT_COCHETE rec+=direct_declaratorR* |
		//LEFT_COCHETE '_Static_assert' Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression
		//RIGHT_COCHETE rec+=direct_declaratorR* | LEFT_COCHETE '_Static_assert' Assignment_expression=assignment_expression
		//RIGHT_COCHETE rec+=direct_declaratorR* | LEFT_COCHETE Type_qualifier_list=type_qualifier_list '*' RIGHT_COCHETE
		//rec+=direct_declaratorR* | LEFT_COCHETE Type_qualifier_list=type_qualifier_list '_Static_assert'
		//Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR* | LEFT_COCHETE
		//Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression RIGHT_COCHETE
		//rec+=direct_declaratorR* | LEFT_COCHETE Type_qualifier_list=type_qualifier_list RIGHT_COCHETE rec+=direct_declaratorR*
		//| LEFT_COCHETE Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR* | LEFT_PARENTESE
		//Parameter_type_list=parameter_type_list RIGHT_PARENTESE rec+=direct_declaratorR* | LEFT_PARENTESE RIGHT_PARENTESE
		//rec+=direct_declaratorR* | LEFT_PARENTESE Identifier_list=identifier_list RIGHT_PARENTESE rec+=direct_declaratorR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_COCHETE RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_0() { return cGroup_0; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_0_0() { return cLEFT_COCHETETerminalRuleCall_0_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_0_1() { return cRIGHT_COCHETETerminalRuleCall_0_1; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_0_2() { return cRecAssignment_0_2; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_0_2_0() { return cRecDirect_declaratorRParserRuleCall_0_2_0; }
		
		//LEFT_COCHETE '*' RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_1() { return cGroup_1; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_1_0() { return cLEFT_COCHETETerminalRuleCall_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_1_2() { return cRIGHT_COCHETETerminalRuleCall_1_2; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_1_3() { return cRecAssignment_1_3; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_1_3_0() { return cRecDirect_declaratorRParserRuleCall_1_3_0; }
		
		//LEFT_COCHETE '_Static_assert' Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression
		//RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_2() { return cGroup_2; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_2_0() { return cLEFT_COCHETETerminalRuleCall_2_0; }
		
		//'_Static_assert'
		public Keyword get_Static_assertKeyword_2_1() { return c_Static_assertKeyword_2_1; }
		
		//Type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_2_2() { return cType_qualifier_listAssignment_2_2; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_2_2_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2_3() { return cAssignment_expressionAssignment_2_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_2_4() { return cRIGHT_COCHETETerminalRuleCall_2_4; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_2_5() { return cRecAssignment_2_5; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_2_5_0() { return cRecDirect_declaratorRParserRuleCall_2_5_0; }
		
		//LEFT_COCHETE '_Static_assert' Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_3() { return cGroup_3; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_3_0() { return cLEFT_COCHETETerminalRuleCall_3_0; }
		
		//'_Static_assert'
		public Keyword get_Static_assertKeyword_3_1() { return c_Static_assertKeyword_3_1; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_3_2() { return cAssignment_expressionAssignment_3_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_3_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_3_3() { return cRIGHT_COCHETETerminalRuleCall_3_3; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_3_4() { return cRecAssignment_3_4; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_3_4_0() { return cRecDirect_declaratorRParserRuleCall_3_4_0; }
		
		//LEFT_COCHETE Type_qualifier_list=type_qualifier_list '*' RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_4() { return cGroup_4; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_4_0() { return cLEFT_COCHETETerminalRuleCall_4_0; }
		
		//Type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_4_1() { return cType_qualifier_listAssignment_4_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_4_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_4_2() { return cAsteriskKeyword_4_2; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_4_3() { return cRIGHT_COCHETETerminalRuleCall_4_3; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_4_4() { return cRecAssignment_4_4; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_4_4_0() { return cRecDirect_declaratorRParserRuleCall_4_4_0; }
		
		//LEFT_COCHETE Type_qualifier_list=type_qualifier_list '_Static_assert' Assignment_expression=assignment_expression
		//RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_5() { return cGroup_5; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_5_0() { return cLEFT_COCHETETerminalRuleCall_5_0; }
		
		//Type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_5_1() { return cType_qualifier_listAssignment_5_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_5_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0; }
		
		//'_Static_assert'
		public Keyword get_Static_assertKeyword_5_2() { return c_Static_assertKeyword_5_2; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_5_3() { return cAssignment_expressionAssignment_5_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_5_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_5_4() { return cRIGHT_COCHETETerminalRuleCall_5_4; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_5_5() { return cRecAssignment_5_5; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_5_5_0() { return cRecDirect_declaratorRParserRuleCall_5_5_0; }
		
		//LEFT_COCHETE Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression RIGHT_COCHETE
		//rec+=direct_declaratorR*
		public Group getGroup_6() { return cGroup_6; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_6_0() { return cLEFT_COCHETETerminalRuleCall_6_0; }
		
		//Type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_6_1() { return cType_qualifier_listAssignment_6_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_6_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_6_2() { return cAssignment_expressionAssignment_6_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_6_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_6_2_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_6_3() { return cRIGHT_COCHETETerminalRuleCall_6_3; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_6_4() { return cRecAssignment_6_4; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_6_4_0() { return cRecDirect_declaratorRParserRuleCall_6_4_0; }
		
		//LEFT_COCHETE Type_qualifier_list=type_qualifier_list RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_7() { return cGroup_7; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_7_0() { return cLEFT_COCHETETerminalRuleCall_7_0; }
		
		//Type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_7_1() { return cType_qualifier_listAssignment_7_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_7_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_7_1_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_7_2() { return cRIGHT_COCHETETerminalRuleCall_7_2; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_7_3() { return cRecAssignment_7_3; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_7_3_0() { return cRecDirect_declaratorRParserRuleCall_7_3_0; }
		
		//LEFT_COCHETE Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR*
		public Group getGroup_8() { return cGroup_8; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_8_0() { return cLEFT_COCHETETerminalRuleCall_8_0; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_8_1() { return cAssignment_expressionAssignment_8_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_8_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_8_1_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_8_2() { return cRIGHT_COCHETETerminalRuleCall_8_2; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_8_3() { return cRecAssignment_8_3; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_8_3_0() { return cRecDirect_declaratorRParserRuleCall_8_3_0; }
		
		//LEFT_PARENTESE Parameter_type_list=parameter_type_list RIGHT_PARENTESE rec+=direct_declaratorR*
		public Group getGroup_9() { return cGroup_9; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_9_0() { return cLEFT_PARENTESETerminalRuleCall_9_0; }
		
		//Parameter_type_list=parameter_type_list
		public Assignment getParameter_type_listAssignment_9_1() { return cParameter_type_listAssignment_9_1; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParameter_type_listParserRuleCall_9_1_0() { return cParameter_type_listParameter_type_listParserRuleCall_9_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_9_2() { return cRIGHT_PARENTESETerminalRuleCall_9_2; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_9_3() { return cRecAssignment_9_3; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_9_3_0() { return cRecDirect_declaratorRParserRuleCall_9_3_0; }
		
		//LEFT_PARENTESE RIGHT_PARENTESE rec+=direct_declaratorR*
		public Group getGroup_10() { return cGroup_10; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_10_0() { return cLEFT_PARENTESETerminalRuleCall_10_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_10_1() { return cRIGHT_PARENTESETerminalRuleCall_10_1; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_10_2() { return cRecAssignment_10_2; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_10_2_0() { return cRecDirect_declaratorRParserRuleCall_10_2_0; }
		
		//LEFT_PARENTESE Identifier_list=identifier_list RIGHT_PARENTESE rec+=direct_declaratorR*
		public Group getGroup_11() { return cGroup_11; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_11_0() { return cLEFT_PARENTESETerminalRuleCall_11_0; }
		
		//Identifier_list=identifier_list
		public Assignment getIdentifier_listAssignment_11_1() { return cIdentifier_listAssignment_11_1; }
		
		//identifier_list
		public RuleCall getIdentifier_listIdentifier_listParserRuleCall_11_1_0() { return cIdentifier_listIdentifier_listParserRuleCall_11_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_11_2() { return cRIGHT_PARENTESETerminalRuleCall_11_2; }
		
		//rec+=direct_declaratorR*
		public Assignment getRecAssignment_11_3() { return cRecAssignment_11_3; }
		
		//direct_declaratorR
		public RuleCall getRecDirect_declaratorRParserRuleCall_11_3_0() { return cRecDirect_declaratorRParserRuleCall_11_3_0; }
	}
	public class Parameter_type_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_type_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cParameter_listParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cParameter_listParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//parameter_type_list:
		//	parameter_list COMMA '...'
		//	| parameter_list;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter_list COMMA '...' | parameter_list
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameter_list COMMA '...'
		public Group getGroup_0() { return cGroup_0; }
		
		//parameter_list
		public RuleCall getParameter_listParserRuleCall_0_0() { return cParameter_listParserRuleCall_0_0; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_1() { return cCOMMATerminalRuleCall_0_1; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_0_2() { return cFullStopFullStopFullStopKeyword_0_2; }
		
		//parameter_list
		public RuleCall getParameter_listParserRuleCall_1() { return cParameter_listParserRuleCall_1; }
	}
	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cIlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIlIdentifier_listRParserRuleCall_1_0 = (RuleCall)cIlAssignment_1.eContents().get(0);
		
		//identifier_list:
		//	IDENTIFIER il=identifier_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER il=identifier_listR?
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//il=identifier_listR?
		public Assignment getIlAssignment_1() { return cIlAssignment_1; }
		
		//identifier_listR
		public RuleCall getIlIdentifier_listRParserRuleCall_1_0() { return cIlIdentifier_listRParserRuleCall_1_0; }
	}
	public class Identifier_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifier_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecIdentifier_listRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//identifier_listR:
		//	COMMA IDENTIFIER rec+=identifier_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA IDENTIFIER rec+=identifier_listR*
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1() { return cIDENTIFIERParserRuleCall_1; }
		
		//rec+=identifier_listR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//identifier_listR
		public RuleCall getRecIdentifier_listRParserRuleCall_2_0() { return cRecIdentifier_listRParserRuleCall_2_0; }
	}
	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameter_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameter_declarationParameter_declarationParserRuleCall_0_0 = (RuleCall)cParameter_declarationAssignment_0.eContents().get(0);
		private final Assignment cParameter_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameter_listRParameter_listRParserRuleCall_1_0 = (RuleCall)cParameter_listRAssignment_1.eContents().get(0);
		
		//parameter_list:
		//	Parameter_declaration=parameter_declaration Parameter_listR=parameter_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameter_declaration=parameter_declaration Parameter_listR=parameter_listR?
		public Group getGroup() { return cGroup; }
		
		//Parameter_declaration=parameter_declaration
		public Assignment getParameter_declarationAssignment_0() { return cParameter_declarationAssignment_0; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationParameter_declarationParserRuleCall_0_0() { return cParameter_declarationParameter_declarationParserRuleCall_0_0; }
		
		//Parameter_listR=parameter_listR?
		public Assignment getParameter_listRAssignment_1() { return cParameter_listRAssignment_1; }
		
		//parameter_listR
		public RuleCall getParameter_listRParameter_listRParserRuleCall_1_0() { return cParameter_listRParameter_listRParserRuleCall_1_0; }
	}
	public class Parameter_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cParameter_declarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameter_declarationParameter_declarationParserRuleCall_1_0 = (RuleCall)cParameter_declarationAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecParameter_listRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//parameter_listR:
		//	COMMA Parameter_declaration=parameter_declaration rec+=parameter_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA Parameter_declaration=parameter_declaration rec+=parameter_listR*
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//Parameter_declaration=parameter_declaration
		public Assignment getParameter_declarationAssignment_1() { return cParameter_declarationAssignment_1; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationParameter_declarationParserRuleCall_1_0() { return cParameter_declarationParameter_declarationParserRuleCall_1_0; }
		
		//rec+=parameter_listR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//parameter_listR
		public RuleCall getRecParameter_listRParserRuleCall_2_0() { return cRecParameter_listRParserRuleCall_2_0; }
	}
	public class Parameter_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiers2Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiers2Declaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiers2Assignment_0_0.eContents().get(0);
		private final Assignment cDeclarator1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclarator1DeclaratorParserRuleCall_0_1_0 = (RuleCall)cDeclarator1Assignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiers1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiers1Declaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiers1Assignment_1_0.eContents().get(0);
		private final Assignment cAbstract_declaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0 = (RuleCall)cAbstract_declaratorAssignment_1_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//parameter_declaration:
		//	Declaration_specifiers2=declaration_specifiers Declarator1=declarator
		//	| Declaration_specifiers1=declaration_specifiers Abstract_declarator=abstract_declarator
		//	| declaration_specifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration_specifiers2=declaration_specifiers Declarator1=declarator | Declaration_specifiers1=declaration_specifiers
		//Abstract_declarator=abstract_declarator | declaration_specifiers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration_specifiers2=declaration_specifiers Declarator1=declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//Declaration_specifiers2=declaration_specifiers
		public Assignment getDeclaration_specifiers2Assignment_0_0() { return cDeclaration_specifiers2Assignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiers2Declaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiers2Declaration_specifiersParserRuleCall_0_0_0; }
		
		//Declarator1=declarator
		public Assignment getDeclarator1Assignment_0_1() { return cDeclarator1Assignment_0_1; }
		
		//declarator
		public RuleCall getDeclarator1DeclaratorParserRuleCall_0_1_0() { return cDeclarator1DeclaratorParserRuleCall_0_1_0; }
		
		//Declaration_specifiers1=declaration_specifiers Abstract_declarator=abstract_declarator
		public Group getGroup_1() { return cGroup_1; }
		
		//Declaration_specifiers1=declaration_specifiers
		public Assignment getDeclaration_specifiers1Assignment_1_0() { return cDeclaration_specifiers1Assignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiers1Declaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiers1Declaration_specifiersParserRuleCall_1_0_0; }
		
		//Abstract_declarator=abstract_declarator
		public Assignment getAbstract_declaratorAssignment_1_1() { return cAbstract_declaratorAssignment_1_1; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0() { return cAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersParserRuleCall_2() { return cDeclaration_specifiersParserRuleCall_2; }
	}
	public class Abstract_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.abstract_declarator");
		private final RuleCall cPointerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//abstract_declarator //:Pointer=pointer Direct_abstract_declarator=direct_abstract_declarator 
		//:
		//	pointer
		//	//|direct_abstract_declarator 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pointer
		public RuleCall getPointerParserRuleCall() { return cPointerParserRuleCall; }
	}
	public class Declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cDeclaration_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaration_listRDeclaration_listRParserRuleCall_1_0 = (RuleCall)cDeclaration_listRAssignment_1.eContents().get(0);
		
		//declaration_list:
		//	Declaration=declaration Declaration_listR=declaration_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration=declaration Declaration_listR=declaration_listR?
		public Group getGroup() { return cGroup; }
		
		//Declaration=declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//Declaration_listR=declaration_listR?
		public Assignment getDeclaration_listRAssignment_1() { return cDeclaration_listRAssignment_1; }
		
		//declaration_listR
		public RuleCall getDeclaration_listRDeclaration_listRParserRuleCall_1_0() { return cDeclaration_listRDeclaration_listRParserRuleCall_1_0; }
	}
	public class Declaration_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cRecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecDeclaration_listRParserRuleCall_1_0 = (RuleCall)cRecAssignment_1.eContents().get(0);
		
		//declaration_listR:
		//	Declaration=declaration rec+=declaration_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration=declaration rec+=declaration_listR*
		public Group getGroup() { return cGroup; }
		
		//Declaration=declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//rec+=declaration_listR*
		public Assignment getRecAssignment_1() { return cRecAssignment_1; }
		
		//declaration_listR
		public RuleCall getRecDeclaration_listRParserRuleCall_1_0() { return cRecDeclaration_listRParserRuleCall_1_0; }
	}
	public class Compound_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.compound_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cBlock_item_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//compound_statement:
		//	LEFT_CHAVES RIGHT_CHAVES
		//	| LEFT_CHAVES block_item_list RIGHT_CHAVES;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_CHAVES RIGHT_CHAVES | LEFT_CHAVES block_item_list RIGHT_CHAVES
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_CHAVES RIGHT_CHAVES
		public Group getGroup_0() { return cGroup_0; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_0_0() { return cLEFT_CHAVESTerminalRuleCall_0_0; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_0_1() { return cRIGHT_CHAVESTerminalRuleCall_0_1; }
		
		//LEFT_CHAVES block_item_list RIGHT_CHAVES
		public Group getGroup_1() { return cGroup_1; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_1_0() { return cLEFT_CHAVESTerminalRuleCall_1_0; }
		
		//block_item_list
		public RuleCall getBlock_item_listParserRuleCall_1_1() { return cBlock_item_listParserRuleCall_1_1; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_1_2() { return cRIGHT_CHAVESTerminalRuleCall_1_2; }
	}
	public class Block_item_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block_item_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlock_itemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBlock_itemBlock_itemParserRuleCall_0_0 = (RuleCall)cBlock_itemAssignment_0.eContents().get(0);
		private final Assignment cBlock_item_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlock_item_listRBlock_item_listRParserRuleCall_1_0 = (RuleCall)cBlock_item_listRAssignment_1.eContents().get(0);
		
		//block_item_list:
		//	Block_item=block_item Block_item_listR=block_item_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Block_item=block_item Block_item_listR=block_item_listR?
		public Group getGroup() { return cGroup; }
		
		//Block_item=block_item
		public Assignment getBlock_itemAssignment_0() { return cBlock_itemAssignment_0; }
		
		//block_item
		public RuleCall getBlock_itemBlock_itemParserRuleCall_0_0() { return cBlock_itemBlock_itemParserRuleCall_0_0; }
		
		//Block_item_listR=block_item_listR?
		public Assignment getBlock_item_listRAssignment_1() { return cBlock_item_listRAssignment_1; }
		
		//block_item_listR
		public RuleCall getBlock_item_listRBlock_item_listRParserRuleCall_1_0() { return cBlock_item_listRBlock_item_listRParserRuleCall_1_0; }
	}
	public class Block_item_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block_item_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlock_itemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBlock_itemBlock_itemParserRuleCall_0_0 = (RuleCall)cBlock_itemAssignment_0.eContents().get(0);
		private final Assignment cRecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecBlock_item_listRParserRuleCall_1_0 = (RuleCall)cRecAssignment_1.eContents().get(0);
		
		//block_item_listR:
		//	Block_item=block_item rec+=block_item_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//Block_item=block_item rec+=block_item_listR*
		public Group getGroup() { return cGroup; }
		
		//Block_item=block_item
		public Assignment getBlock_itemAssignment_0() { return cBlock_itemAssignment_0; }
		
		//block_item
		public RuleCall getBlock_itemBlock_itemParserRuleCall_0_0() { return cBlock_itemBlock_itemParserRuleCall_0_0; }
		
		//rec+=block_item_listR*
		public Assignment getRecAssignment_1() { return cRecAssignment_1; }
		
		//block_item_listR
		public RuleCall getRecBlock_item_listRParserRuleCall_1_0() { return cRecBlock_item_listRParserRuleCall_1_0; }
	}
	public class Block_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block_item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//block_item:
		//	declaration
		//	| statement;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration | statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabeled_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompound_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpression_statementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelection_statementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIteration_statementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJump_statementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//statement:
		//	labeled_statement
		//	| compound_statement
		//	| expression_statement
		//	| selection_statement
		//	| iteration_statement
		//	| jump_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement |
		//jump_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//labeled_statement
		public RuleCall getLabeled_statementParserRuleCall_0() { return cLabeled_statementParserRuleCall_0; }
		
		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_1() { return cCompound_statementParserRuleCall_1; }
		
		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_2() { return cExpression_statementParserRuleCall_2; }
		
		//selection_statement
		public RuleCall getSelection_statementParserRuleCall_3() { return cSelection_statementParserRuleCall_3; }
		
		//iteration_statement
		public RuleCall getIteration_statementParserRuleCall_4() { return cIteration_statementParserRuleCall_4; }
		
		//jump_statement
		public RuleCall getJump_statementParserRuleCall_5() { return cJump_statementParserRuleCall_5; }
	}
	public class Jump_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.jump_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGOTOKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cDOT_COMMATerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCONTINUEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDOT_COMMATerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cBREAKKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDOT_COMMATerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cReturnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cDOT_COMMATerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cReturnKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cDOT_COMMATerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//jump_statement:
		//	'GOTO' IDENTIFIER DOT_COMMA
		//	| 'CONTINUE' DOT_COMMA
		//	| 'BREAK' DOT_COMMA
		//	| 'return' DOT_COMMA
		//	| 'return' expression DOT_COMMA;
		@Override public ParserRule getRule() { return rule; }
		
		//'GOTO' IDENTIFIER DOT_COMMA | 'CONTINUE' DOT_COMMA | 'BREAK' DOT_COMMA | 'return' DOT_COMMA | 'return' expression
		//DOT_COMMA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'GOTO' IDENTIFIER DOT_COMMA
		public Group getGroup_0() { return cGroup_0; }
		
		//'GOTO'
		public Keyword getGOTOKeyword_0_0() { return cGOTOKeyword_0_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_1() { return cIDENTIFIERParserRuleCall_0_1; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_0_2() { return cDOT_COMMATerminalRuleCall_0_2; }
		
		//'CONTINUE' DOT_COMMA
		public Group getGroup_1() { return cGroup_1; }
		
		//'CONTINUE'
		public Keyword getCONTINUEKeyword_1_0() { return cCONTINUEKeyword_1_0; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_1_1() { return cDOT_COMMATerminalRuleCall_1_1; }
		
		//'BREAK' DOT_COMMA
		public Group getGroup_2() { return cGroup_2; }
		
		//'BREAK'
		public Keyword getBREAKKeyword_2_0() { return cBREAKKeyword_2_0; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_2_1() { return cDOT_COMMATerminalRuleCall_2_1; }
		
		//'return' DOT_COMMA
		public Group getGroup_3() { return cGroup_3; }
		
		//'return'
		public Keyword getReturnKeyword_3_0() { return cReturnKeyword_3_0; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_3_1() { return cDOT_COMMATerminalRuleCall_3_1; }
		
		//'return' expression DOT_COMMA
		public Group getGroup_4() { return cGroup_4; }
		
		//'return'
		public Keyword getReturnKeyword_4_0() { return cReturnKeyword_4_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_4_2() { return cDOT_COMMATerminalRuleCall_4_2; }
	}
	public class Labeled_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.labeled_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cAAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAStatementParserRuleCall_0_2_0 = (RuleCall)cAAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCASEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstant_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_1_1_0 = (RuleCall)cConstant_expressionAssignment_1_1.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cStatementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_1_3_0 = (RuleCall)cStatementAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDEFAULTKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cBAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBStatementParserRuleCall_2_2_0 = (RuleCall)cBAssignment_2_2.eContents().get(0);
		
		//labeled_statement:
		//	IDENTIFIER DOTS a=statement
		//	| 'CASE' Constant_expression=constant_expression DOTS Statement=statement
		//	| 'DEFAULT' DOTS b=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER DOTS a=statement | 'CASE' Constant_expression=constant_expression DOTS Statement=statement | 'DEFAULT' DOTS
		//b=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER DOTS a=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_0() { return cIDENTIFIERParserRuleCall_0_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_0_1() { return cDOTSTerminalRuleCall_0_1; }
		
		//a=statement
		public Assignment getAAssignment_0_2() { return cAAssignment_0_2; }
		
		//statement
		public RuleCall getAStatementParserRuleCall_0_2_0() { return cAStatementParserRuleCall_0_2_0; }
		
		//'CASE' Constant_expression=constant_expression DOTS Statement=statement
		public Group getGroup_1() { return cGroup_1; }
		
		//'CASE'
		public Keyword getCASEKeyword_1_0() { return cCASEKeyword_1_0; }
		
		//Constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_1_1() { return cConstant_expressionAssignment_1_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_1_1_0() { return cConstant_expressionConstant_expressionParserRuleCall_1_1_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_1_2() { return cDOTSTerminalRuleCall_1_2; }
		
		//Statement=statement
		public Assignment getStatementAssignment_1_3() { return cStatementAssignment_1_3; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_3_0() { return cStatementStatementParserRuleCall_1_3_0; }
		
		//'DEFAULT' DOTS b=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//'DEFAULT'
		public Keyword getDEFAULTKeyword_2_0() { return cDEFAULTKeyword_2_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_2_1() { return cDOTSTerminalRuleCall_2_1; }
		
		//b=statement
		public Assignment getBAssignment_2_2() { return cBAssignment_2_2; }
		
		//statement
		public RuleCall getBStatementParserRuleCall_2_2_0() { return cBStatementParserRuleCall_2_2_0; }
	}
	public class Iteration_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.iteration_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWhileKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cStatementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_0_4_0 = (RuleCall)cStatementAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_1_4_0 = (RuleCall)cExpressionAssignment_1_4.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final RuleCall cDOT_COMMATerminalRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cExpression_statementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_2_2_0 = (RuleCall)cExpression_statementAssignment_2_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_2_3_0 = (RuleCall)cExpression_statementAssignment_2_3.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Assignment cStatementAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_2_5_0 = (RuleCall)cStatementAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cForKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cExpression_statementAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_3_2_0 = (RuleCall)cExpression_statementAssignment_3_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_3_3_0 = (RuleCall)cExpression_statementAssignment_3_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_3_4_0 = (RuleCall)cExpressionAssignment_3_4.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final Assignment cStatementAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_3_6_0 = (RuleCall)cStatementAssignment_3_6.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cForKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cDeclarationAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_4_2_0 = (RuleCall)cDeclarationAssignment_4_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_4_3_0 = (RuleCall)cExpression_statementAssignment_4_3.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_4_4 = (RuleCall)cGroup_4.eContents().get(4);
		private final Assignment cStatementAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_4_5_0 = (RuleCall)cStatementAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cForKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cDeclarationAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_5_2_0 = (RuleCall)cDeclarationAssignment_5_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_5_3_0 = (RuleCall)cExpression_statementAssignment_5_3.eContents().get(0);
		private final Assignment cExpressionAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_5_4_0 = (RuleCall)cExpressionAssignment_5_4.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_5_5 = (RuleCall)cGroup_5.eContents().get(5);
		private final Assignment cStatementAssignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_5_6_0 = (RuleCall)cStatementAssignment_5_6.eContents().get(0);
		
		//iteration_statement:
		//	'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement
		//	| 'do' Statement=statement 'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE DOT_COMMA
		//	| 'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement
		//	RIGHT_PARENTESE Statement=statement
		//	| 'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement
		//	Expression=expression RIGHT_PARENTESE Statement=statement
		//	| 'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement RIGHT_PARENTESE
		//	Statement=statement
		//	| 'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement Expression=expression
		//	RIGHT_PARENTESE Statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement | 'do' Statement=statement 'while'
		//LEFT_PARENTESE Expression=expression RIGHT_PARENTESE DOT_COMMA | 'for' LEFT_PARENTESE
		//Expression_statement=expression_statement Expression_statement=expression_statement RIGHT_PARENTESE Statement=statement
		//| 'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement
		//Expression=expression RIGHT_PARENTESE Statement=statement | 'for' LEFT_PARENTESE Declaration=declaration
		//Expression_statement=expression_statement RIGHT_PARENTESE Statement=statement | 'for' LEFT_PARENTESE
		//Declaration=declaration Expression_statement=expression_statement Expression=expression RIGHT_PARENTESE
		//Statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//'while'
		public Keyword getWhileKeyword_0_0() { return cWhileKeyword_0_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_0_1() { return cLEFT_PARENTESETerminalRuleCall_0_1; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_0_3() { return cRIGHT_PARENTESETerminalRuleCall_0_3; }
		
		//Statement=statement
		public Assignment getStatementAssignment_0_4() { return cStatementAssignment_0_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_4_0() { return cStatementStatementParserRuleCall_0_4_0; }
		
		//'do' Statement=statement 'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE DOT_COMMA
		public Group getGroup_1() { return cGroup_1; }
		
		//'do'
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }
		
		//Statement=statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_1_2() { return cWhileKeyword_1_2; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1_3() { return cLEFT_PARENTESETerminalRuleCall_1_3; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_1_4() { return cExpressionAssignment_1_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_4_0() { return cExpressionExpressionParserRuleCall_1_4_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_1_5() { return cRIGHT_PARENTESETerminalRuleCall_1_5; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_1_6() { return cDOT_COMMATerminalRuleCall_1_6; }
		
		//'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement RIGHT_PARENTESE
		//Statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//'for'
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_2_1() { return cLEFT_PARENTESETerminalRuleCall_2_1; }
		
		//Expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_2_2() { return cExpression_statementAssignment_2_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_2_2_0() { return cExpression_statementExpression_statementParserRuleCall_2_2_0; }
		
		//Expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_2_3() { return cExpression_statementAssignment_2_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_2_3_0() { return cExpression_statementExpression_statementParserRuleCall_2_3_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_2_4() { return cRIGHT_PARENTESETerminalRuleCall_2_4; }
		
		//Statement=statement
		public Assignment getStatementAssignment_2_5() { return cStatementAssignment_2_5; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_5_0() { return cStatementStatementParserRuleCall_2_5_0; }
		
		//'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement
		//Expression=expression RIGHT_PARENTESE Statement=statement
		public Group getGroup_3() { return cGroup_3; }
		
		//'for'
		public Keyword getForKeyword_3_0() { return cForKeyword_3_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_3_1() { return cLEFT_PARENTESETerminalRuleCall_3_1; }
		
		//Expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_3_2() { return cExpression_statementAssignment_3_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_3_2_0() { return cExpression_statementExpression_statementParserRuleCall_3_2_0; }
		
		//Expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_3_3() { return cExpression_statementAssignment_3_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_3_3_0() { return cExpression_statementExpression_statementParserRuleCall_3_3_0; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_3_4() { return cExpressionAssignment_3_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_4_0() { return cExpressionExpressionParserRuleCall_3_4_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_3_5() { return cRIGHT_PARENTESETerminalRuleCall_3_5; }
		
		//Statement=statement
		public Assignment getStatementAssignment_3_6() { return cStatementAssignment_3_6; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_3_6_0() { return cStatementStatementParserRuleCall_3_6_0; }
		
		//'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement RIGHT_PARENTESE
		//Statement=statement
		public Group getGroup_4() { return cGroup_4; }
		
		//'for'
		public Keyword getForKeyword_4_0() { return cForKeyword_4_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_4_1() { return cLEFT_PARENTESETerminalRuleCall_4_1; }
		
		//Declaration=declaration
		public Assignment getDeclarationAssignment_4_2() { return cDeclarationAssignment_4_2; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_4_2_0() { return cDeclarationDeclarationParserRuleCall_4_2_0; }
		
		//Expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_4_3() { return cExpression_statementAssignment_4_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_4_3_0() { return cExpression_statementExpression_statementParserRuleCall_4_3_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_4_4() { return cRIGHT_PARENTESETerminalRuleCall_4_4; }
		
		//Statement=statement
		public Assignment getStatementAssignment_4_5() { return cStatementAssignment_4_5; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_4_5_0() { return cStatementStatementParserRuleCall_4_5_0; }
		
		//'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement Expression=expression
		//RIGHT_PARENTESE Statement=statement
		public Group getGroup_5() { return cGroup_5; }
		
		//'for'
		public Keyword getForKeyword_5_0() { return cForKeyword_5_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_5_1() { return cLEFT_PARENTESETerminalRuleCall_5_1; }
		
		//Declaration=declaration
		public Assignment getDeclarationAssignment_5_2() { return cDeclarationAssignment_5_2; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_5_2_0() { return cDeclarationDeclarationParserRuleCall_5_2_0; }
		
		//Expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_5_3() { return cExpression_statementAssignment_5_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_5_3_0() { return cExpression_statementExpression_statementParserRuleCall_5_3_0; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_5_4() { return cExpressionAssignment_5_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_5_4_0() { return cExpressionExpressionParserRuleCall_5_4_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_5_5() { return cRIGHT_PARENTESETerminalRuleCall_5_5; }
		
		//Statement=statement
		public Assignment getStatementAssignment_5_6() { return cStatementAssignment_5_6; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_5_6_0() { return cStatementStatementParserRuleCall_5_6_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Assignment cInit_declarator_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInit_declarator_listInit_declarator_listParserRuleCall_0_1_0 = (RuleCall)cInit_declarator_listAssignment_0_1.eContents().get(0);
		private final RuleCall cDOT_COMMATerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cStatic_assert_declarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//declaration:
		//	Declaration_specifiers=declaration_specifiers Init_declarator_list=init_declarator_list DOT_COMMA
		//	| static_assert_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration_specifiers=declaration_specifiers Init_declarator_list=init_declarator_list DOT_COMMA |
		//static_assert_declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration_specifiers=declaration_specifiers Init_declarator_list=init_declarator_list DOT_COMMA
		public Group getGroup_0() { return cGroup_0; }
		
		//Declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//Init_declarator_list=init_declarator_list
		public Assignment getInit_declarator_listAssignment_0_1() { return cInit_declarator_listAssignment_0_1; }
		
		//init_declarator_list
		public RuleCall getInit_declarator_listInit_declarator_listParserRuleCall_0_1_0() { return cInit_declarator_listInit_declarator_listParserRuleCall_0_1_0; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_0_2() { return cDOT_COMMATerminalRuleCall_0_2; }
		
		//static_assert_declaration
		public RuleCall getStatic_assert_declarationParserRuleCall_1() { return cStatic_assert_declarationParserRuleCall_1; }
	}
	public class Init_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInit_declaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInit_declaratorInit_declaratorParserRuleCall_0_0 = (RuleCall)cInit_declaratorAssignment_0.eContents().get(0);
		private final Assignment cInit_declarator_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInit_declarator_listRInit_declarator_listRParserRuleCall_1_0 = (RuleCall)cInit_declarator_listRAssignment_1.eContents().get(0);
		
		//init_declarator_list:
		//	Init_declarator=init_declarator Init_declarator_listR=init_declarator_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Init_declarator=init_declarator Init_declarator_listR=init_declarator_listR?
		public Group getGroup() { return cGroup; }
		
		//Init_declarator=init_declarator
		public Assignment getInit_declaratorAssignment_0() { return cInit_declaratorAssignment_0; }
		
		//init_declarator
		public RuleCall getInit_declaratorInit_declaratorParserRuleCall_0_0() { return cInit_declaratorInit_declaratorParserRuleCall_0_0; }
		
		//Init_declarator_listR=init_declarator_listR?
		public Assignment getInit_declarator_listRAssignment_1() { return cInit_declarator_listRAssignment_1; }
		
		//init_declarator_listR
		public RuleCall getInit_declarator_listRInit_declarator_listRParserRuleCall_1_0() { return cInit_declarator_listRInit_declarator_listRParserRuleCall_1_0; }
	}
	public class Init_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_0_0 = (RuleCall)cDeclaratorAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInitializerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInitializerInitializerParserRuleCall_0_2_0 = (RuleCall)cInitializerAssignment_0_2.eContents().get(0);
		private final RuleCall cDeclaratorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//init_declarator:
		//	Declarator=declarator '=' Initializer=initializer
		//	| declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//Declarator=declarator '=' Initializer=initializer | declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declarator=declarator '=' Initializer=initializer
		public Group getGroup_0() { return cGroup_0; }
		
		//Declarator=declarator
		public Assignment getDeclaratorAssignment_0_0() { return cDeclaratorAssignment_0_0; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_0_0() { return cDeclaratorDeclaratorParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//Initializer=initializer
		public Assignment getInitializerAssignment_0_2() { return cInitializerAssignment_0_2; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_0_2_0() { return cInitializerInitializerParserRuleCall_0_2_0; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_1() { return cDeclaratorParserRuleCall_1; }
	}
	public class Init_declarator_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cInit_declaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInit_declaratorInit_declaratorParserRuleCall_1_0 = (RuleCall)cInit_declaratorAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecInit_declarator_listRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//init_declarator_listR:
		//	COMMA Init_declarator=init_declarator rec+=init_declarator_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA Init_declarator=init_declarator rec+=init_declarator_listR*
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//Init_declarator=init_declarator
		public Assignment getInit_declaratorAssignment_1() { return cInit_declaratorAssignment_1; }
		
		//init_declarator
		public RuleCall getInit_declaratorInit_declaratorParserRuleCall_1_0() { return cInit_declaratorInit_declaratorParserRuleCall_1_0; }
		
		//rec+=init_declarator_listR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//init_declarator_listR
		public RuleCall getRecInit_declarator_listRParserRuleCall_2_0() { return cRecInit_declarator_listRParserRuleCall_2_0; }
	}
	public class Declaration_specifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_specifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStorage_class_specifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0 = (RuleCall)cStorage_class_specifierAssignment_0_0.eContents().get(0);
		private final Assignment cR1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cR1Declaration_specifiersParserRuleCall_0_1_0 = (RuleCall)cR1Assignment_0_1.eContents().get(0);
		private final RuleCall cStorage_class_specifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cType_specifierParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cDsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDsDeclaration_specifiersParserRuleCall_2_1_0 = (RuleCall)cDsAssignment_2_1.eContents().get(0);
		private final RuleCall cType_specifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cType_qualifierAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_4_0_0 = (RuleCall)cType_qualifierAssignment_4_0.eContents().get(0);
		private final Assignment cR2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cR2Declaration_specifiersParserRuleCall_4_1_0 = (RuleCall)cR2Assignment_4_1.eContents().get(0);
		private final RuleCall cType_qualifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//declaration_specifiers:
		//	Storage_class_specifier=storage_class_specifier r1+=declaration_specifiers*
		//	| storage_class_specifier
		//	| type_specifier ds=declaration_specifiers
		//	| type_specifier
		//	| Type_qualifier=type_qualifier r2+=declaration_specifiers*
		//	| type_qualifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Storage_class_specifier=storage_class_specifier r1+=declaration_specifiers* | storage_class_specifier | type_specifier
		//ds=declaration_specifiers | type_specifier | Type_qualifier=type_qualifier r2+=declaration_specifiers* | type_qualifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Storage_class_specifier=storage_class_specifier r1+=declaration_specifiers*
		public Group getGroup_0() { return cGroup_0; }
		
		//Storage_class_specifier=storage_class_specifier
		public Assignment getStorage_class_specifierAssignment_0_0() { return cStorage_class_specifierAssignment_0_0; }
		
		//storage_class_specifier
		public RuleCall getStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0() { return cStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0; }
		
		//r1+=declaration_specifiers*
		public Assignment getR1Assignment_0_1() { return cR1Assignment_0_1; }
		
		//declaration_specifiers
		public RuleCall getR1Declaration_specifiersParserRuleCall_0_1_0() { return cR1Declaration_specifiersParserRuleCall_0_1_0; }
		
		//storage_class_specifier
		public RuleCall getStorage_class_specifierParserRuleCall_1() { return cStorage_class_specifierParserRuleCall_1; }
		
		//type_specifier ds=declaration_specifiers
		public Group getGroup_2() { return cGroup_2; }
		
		//type_specifier
		public RuleCall getType_specifierParserRuleCall_2_0() { return cType_specifierParserRuleCall_2_0; }
		
		//ds=declaration_specifiers
		public Assignment getDsAssignment_2_1() { return cDsAssignment_2_1; }
		
		//declaration_specifiers
		public RuleCall getDsDeclaration_specifiersParserRuleCall_2_1_0() { return cDsDeclaration_specifiersParserRuleCall_2_1_0; }
		
		//type_specifier
		public RuleCall getType_specifierParserRuleCall_3() { return cType_specifierParserRuleCall_3; }
		
		//Type_qualifier=type_qualifier r2+=declaration_specifiers*
		public Group getGroup_4() { return cGroup_4; }
		
		//Type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_4_0() { return cType_qualifierAssignment_4_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_4_0_0() { return cType_qualifierType_qualifierParserRuleCall_4_0_0; }
		
		//r2+=declaration_specifiers*
		public Assignment getR2Assignment_4_1() { return cR2Assignment_4_1; }
		
		//declaration_specifiers
		public RuleCall getR2Declaration_specifiersParserRuleCall_4_1_0() { return cR2Declaration_specifiersParserRuleCall_4_1_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierParserRuleCall_5() { return cType_qualifierParserRuleCall_5; }
	}
	public class Selection_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.selection_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cStatementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_0_4_0 = (RuleCall)cStatementAssignment_0_4.eContents().get(0);
		private final Keyword cElseKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cStatementAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_0_6_0 = (RuleCall)cStatementAssignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cStatementAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_1_4_0 = (RuleCall)cStatementAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSWITCHKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Assignment cStatementAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_2_4_0 = (RuleCall)cStatementAssignment_2_4.eContents().get(0);
		
		//selection_statement:
		//	'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 'else' Statement=statement
		//	| 'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement
		//	| 'SWITCH' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 'else' Statement=statement | 'if'
		//LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement | 'SWITCH' LEFT_PARENTESE
		//Expression=expression RIGHT_PARENTESE Statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 'else' Statement=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_0_1() { return cLEFT_PARENTESETerminalRuleCall_0_1; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_0_3() { return cRIGHT_PARENTESETerminalRuleCall_0_3; }
		
		//Statement=statement
		public Assignment getStatementAssignment_0_4() { return cStatementAssignment_0_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_4_0() { return cStatementStatementParserRuleCall_0_4_0; }
		
		//'else'
		public Keyword getElseKeyword_0_5() { return cElseKeyword_0_5; }
		
		//Statement=statement
		public Assignment getStatementAssignment_0_6() { return cStatementAssignment_0_6; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_6_0() { return cStatementStatementParserRuleCall_0_6_0; }
		
		//'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1_1() { return cLEFT_PARENTESETerminalRuleCall_1_1; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_1_3() { return cRIGHT_PARENTESETerminalRuleCall_1_3; }
		
		//Statement=statement
		public Assignment getStatementAssignment_1_4() { return cStatementAssignment_1_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_4_0() { return cStatementStatementParserRuleCall_1_4_0; }
		
		//'SWITCH' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//'SWITCH'
		public Keyword getSWITCHKeyword_2_0() { return cSWITCHKeyword_2_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_2_1() { return cLEFT_PARENTESETerminalRuleCall_2_1; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0() { return cExpressionExpressionParserRuleCall_2_2_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_2_3() { return cRIGHT_PARENTESETerminalRuleCall_2_3; }
		
		//Statement=statement
		public Assignment getStatementAssignment_2_4() { return cStatementAssignment_2_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_4_0() { return cStatementStatementParserRuleCall_2_4_0; }
	}
	public class Expression_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOT_COMMATerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cDOT_COMMATerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expression_statement:
		//	DOT_COMMA
		//	| expression DOT_COMMA;
		@Override public ParserRule getRule() { return rule; }
		
		//DOT_COMMA | expression DOT_COMMA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_0() { return cDOT_COMMATerminalRuleCall_0; }
		
		//expression DOT_COMMA
		public Group getGroup_1() { return cGroup_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_0() { return cExpressionParserRuleCall_1_0; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_1_1() { return cDOT_COMMATerminalRuleCall_1_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_0 = (RuleCall)cAssignment_expressionAssignment_0.eContents().get(0);
		private final Assignment cExpressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionRExpressionRParserRuleCall_1_0 = (RuleCall)cExpressionRAssignment_1.eContents().get(0);
		
		//expression:
		//	Assignment_expression=assignment_expression ExpressionR=expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment_expression=assignment_expression ExpressionR=expressionR?
		public Group getGroup() { return cGroup; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0() { return cAssignment_expressionAssignment_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_0; }
		
		//ExpressionR=expressionR?
		public Assignment getExpressionRAssignment_1() { return cExpressionRAssignment_1; }
		
		//expressionR
		public RuleCall getExpressionRExpressionRParserRuleCall_1_0() { return cExpressionRExpressionRParserRuleCall_1_0; }
	}
	public class ExpressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expressionR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_0 = (RuleCall)cAssignment_expressionAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecExpressionRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//expressionR:
		//	COMMA Assignment_expression=assignment_expression rec+=expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA Assignment_expression=assignment_expression rec+=expressionR*
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1() { return cAssignment_expressionAssignment_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_0; }
		
		//rec+=expressionR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//expressionR
		public RuleCall getRecExpressionRParserRuleCall_2_0() { return cRecExpressionRParserRuleCall_2_0; }
	}
	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.conditional_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogical_or_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLogical_or_expressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogical_or_expressionLogical_or_expressionParserRuleCall_1_0_0 = (RuleCall)cLogical_or_expressionAssignment_1_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cRecAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRecConditional_expressionParserRuleCall_1_4_0 = (RuleCall)cRecAssignment_1_4.eContents().get(0);
		
		////L-01
		//conditional_expression:
		//	logical_or_expression
		//	| Logical_or_expression=logical_or_expression '?' Expression=expression DOTS rec+=conditional_expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//logical_or_expression | Logical_or_expression=logical_or_expression '?' Expression=expression DOTS
		//rec+=conditional_expression*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//logical_or_expression
		public RuleCall getLogical_or_expressionParserRuleCall_0() { return cLogical_or_expressionParserRuleCall_0; }
		
		//Logical_or_expression=logical_or_expression '?' Expression=expression DOTS rec+=conditional_expression*
		public Group getGroup_1() { return cGroup_1; }
		
		//Logical_or_expression=logical_or_expression
		public Assignment getLogical_or_expressionAssignment_1_0() { return cLogical_or_expressionAssignment_1_0; }
		
		//logical_or_expression
		public RuleCall getLogical_or_expressionLogical_or_expressionParserRuleCall_1_0_0() { return cLogical_or_expressionLogical_or_expressionParserRuleCall_1_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_1_3() { return cDOTSTerminalRuleCall_1_3; }
		
		//rec+=conditional_expression*
		public Assignment getRecAssignment_1_4() { return cRecAssignment_1_4; }
		
		//conditional_expression
		public RuleCall getRecConditional_expressionParserRuleCall_1_4_0() { return cRecConditional_expressionParserRuleCall_1_4_0; }
	}
	public class Logical_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogical_and_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogical_and_expressionLogical_and_expressionParserRuleCall_0_0 = (RuleCall)cLogical_and_expressionAssignment_0.eContents().get(0);
		private final Assignment cLogical_or_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogical_or_expressionRLogical_or_expressionRParserRuleCall_1_0 = (RuleCall)cLogical_or_expressionRAssignment_1.eContents().get(0);
		
		////L-02
		//logical_or_expression:
		//	Logical_and_expression=logical_and_expression Logical_or_expressionR=logical_or_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Logical_and_expression=logical_and_expression Logical_or_expressionR=logical_or_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Logical_and_expression=logical_and_expression
		public Assignment getLogical_and_expressionAssignment_0() { return cLogical_and_expressionAssignment_0; }
		
		//logical_and_expression
		public RuleCall getLogical_and_expressionLogical_and_expressionParserRuleCall_0_0() { return cLogical_and_expressionLogical_and_expressionParserRuleCall_0_0; }
		
		//Logical_or_expressionR=logical_or_expressionR?
		public Assignment getLogical_or_expressionRAssignment_1() { return cLogical_or_expressionRAssignment_1; }
		
		//logical_or_expressionR
		public RuleCall getLogical_or_expressionRLogical_or_expressionRParserRuleCall_1_0() { return cLogical_or_expressionRLogical_or_expressionRParserRuleCall_1_0; }
	}
	public class Logical_or_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_or_expressionR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLogical_and_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogical_and_expressionLogical_and_expressionParserRuleCall_1_0 = (RuleCall)cLogical_and_expressionAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecLogical_or_expressionRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//logical_or_expressionR:
		//	'||' Logical_and_expression=logical_and_expression rec+=logical_or_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'||' Logical_and_expression=logical_and_expression rec+=logical_or_expressionR*
		public Group getGroup() { return cGroup; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }
		
		//Logical_and_expression=logical_and_expression
		public Assignment getLogical_and_expressionAssignment_1() { return cLogical_and_expressionAssignment_1; }
		
		//logical_and_expression
		public RuleCall getLogical_and_expressionLogical_and_expressionParserRuleCall_1_0() { return cLogical_and_expressionLogical_and_expressionParserRuleCall_1_0; }
		
		//rec+=logical_or_expressionR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//logical_or_expressionR
		public RuleCall getRecLogical_or_expressionRParserRuleCall_2_0() { return cRecLogical_or_expressionRParserRuleCall_2_0; }
	}
	public class Logical_and_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInclusive_or_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInclusive_or_expressionInclusive_or_expressionParserRuleCall_0_0 = (RuleCall)cInclusive_or_expressionAssignment_0.eContents().get(0);
		private final Assignment cLogical_and_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogical_and_expressionRLogical_and_expressionRParserRuleCall_1_0 = (RuleCall)cLogical_and_expressionRAssignment_1.eContents().get(0);
		
		////L-03
		//logical_and_expression:
		//	Inclusive_or_expression=inclusive_or_expression Logical_and_expressionR=logical_and_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Inclusive_or_expression=inclusive_or_expression Logical_and_expressionR=logical_and_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Inclusive_or_expression=inclusive_or_expression
		public Assignment getInclusive_or_expressionAssignment_0() { return cInclusive_or_expressionAssignment_0; }
		
		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionInclusive_or_expressionParserRuleCall_0_0() { return cInclusive_or_expressionInclusive_or_expressionParserRuleCall_0_0; }
		
		//Logical_and_expressionR=logical_and_expressionR?
		public Assignment getLogical_and_expressionRAssignment_1() { return cLogical_and_expressionRAssignment_1; }
		
		//logical_and_expressionR
		public RuleCall getLogical_and_expressionRLogical_and_expressionRParserRuleCall_1_0() { return cLogical_and_expressionRLogical_and_expressionRParserRuleCall_1_0; }
	}
	public class Logical_and_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_and_expressionR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInclusive_or_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInclusive_or_expressionInclusive_or_expressionParserRuleCall_1_0 = (RuleCall)cInclusive_or_expressionAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecLogical_and_expressionRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//logical_and_expressionR:
		//	'&&' Inclusive_or_expression=inclusive_or_expression rec+=logical_and_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'&&' Inclusive_or_expression=inclusive_or_expression rec+=logical_and_expressionR*
		public Group getGroup() { return cGroup; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//Inclusive_or_expression=inclusive_or_expression
		public Assignment getInclusive_or_expressionAssignment_1() { return cInclusive_or_expressionAssignment_1; }
		
		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionInclusive_or_expressionParserRuleCall_1_0() { return cInclusive_or_expressionInclusive_or_expressionParserRuleCall_1_0; }
		
		//rec+=logical_and_expressionR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//logical_and_expressionR
		public RuleCall getRecLogical_and_expressionRParserRuleCall_2_0() { return cRecLogical_and_expressionRParserRuleCall_2_0; }
	}
	public class Inclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.inclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExclusive_or_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExclusive_or_expressionExclusive_or_expressionParserRuleCall_0_0 = (RuleCall)cExclusive_or_expressionAssignment_0.eContents().get(0);
		private final Assignment cInclusive_or_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInclusive_or_expressionRInclusive_or_expressionRParserRuleCall_1_0 = (RuleCall)cInclusive_or_expressionRAssignment_1.eContents().get(0);
		
		////L-04
		//inclusive_or_expression:
		//	Exclusive_or_expression=exclusive_or_expression Inclusive_or_expressionR=inclusive_or_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Exclusive_or_expression=exclusive_or_expression Inclusive_or_expressionR=inclusive_or_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Exclusive_or_expression=exclusive_or_expression
		public Assignment getExclusive_or_expressionAssignment_0() { return cExclusive_or_expressionAssignment_0; }
		
		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionExclusive_or_expressionParserRuleCall_0_0() { return cExclusive_or_expressionExclusive_or_expressionParserRuleCall_0_0; }
		
		//Inclusive_or_expressionR=inclusive_or_expressionR?
		public Assignment getInclusive_or_expressionRAssignment_1() { return cInclusive_or_expressionRAssignment_1; }
		
		//inclusive_or_expressionR
		public RuleCall getInclusive_or_expressionRInclusive_or_expressionRParserRuleCall_1_0() { return cInclusive_or_expressionRInclusive_or_expressionRParserRuleCall_1_0; }
	}
	public class Inclusive_or_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.inclusive_or_expressionR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExclusive_or_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExclusive_or_expressionExclusive_or_expressionParserRuleCall_1_0 = (RuleCall)cExclusive_or_expressionAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecInclusive_or_expressionRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//inclusive_or_expressionR:
		//	'|' Exclusive_or_expression=exclusive_or_expression rec+=inclusive_or_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' Exclusive_or_expression=exclusive_or_expression rec+=inclusive_or_expressionR*
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//Exclusive_or_expression=exclusive_or_expression
		public Assignment getExclusive_or_expressionAssignment_1() { return cExclusive_or_expressionAssignment_1; }
		
		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionExclusive_or_expressionParserRuleCall_1_0() { return cExclusive_or_expressionExclusive_or_expressionParserRuleCall_1_0; }
		
		//rec+=inclusive_or_expressionR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//inclusive_or_expressionR
		public RuleCall getRecInclusive_or_expressionRParserRuleCall_2_0() { return cRecInclusive_or_expressionRParserRuleCall_2_0; }
	}
	public class Exclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnd_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnd_expressionAnd_expressionParserRuleCall_0_0 = (RuleCall)cAnd_expressionAssignment_0.eContents().get(0);
		private final Assignment cExclusive_or_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExclusive_or_expressionRExclusive_or_expressionRParserRuleCall_1_0 = (RuleCall)cExclusive_or_expressionRAssignment_1.eContents().get(0);
		
		////L-05
		//exclusive_or_expression:
		//	And_expression=and_expression Exclusive_or_expressionR=exclusive_or_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//And_expression=and_expression Exclusive_or_expressionR=exclusive_or_expressionR?
		public Group getGroup() { return cGroup; }
		
		//And_expression=and_expression
		public Assignment getAnd_expressionAssignment_0() { return cAnd_expressionAssignment_0; }
		
		//and_expression
		public RuleCall getAnd_expressionAnd_expressionParserRuleCall_0_0() { return cAnd_expressionAnd_expressionParserRuleCall_0_0; }
		
		//Exclusive_or_expressionR=exclusive_or_expressionR?
		public Assignment getExclusive_or_expressionRAssignment_1() { return cExclusive_or_expressionRAssignment_1; }
		
		//exclusive_or_expressionR
		public RuleCall getExclusive_or_expressionRExclusive_or_expressionRParserRuleCall_1_0() { return cExclusive_or_expressionRExclusive_or_expressionRParserRuleCall_1_0; }
	}
	public class Exclusive_or_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exclusive_or_expressionR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnd_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnd_expressionAnd_expressionParserRuleCall_1_0 = (RuleCall)cAnd_expressionAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecExclusive_or_expressionRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//exclusive_or_expressionR:
		//	'^' And_expression=and_expression rec+=exclusive_or_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'^' And_expression=and_expression rec+=exclusive_or_expressionR*
		public Group getGroup() { return cGroup; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//And_expression=and_expression
		public Assignment getAnd_expressionAssignment_1() { return cAnd_expressionAssignment_1; }
		
		//and_expression
		public RuleCall getAnd_expressionAnd_expressionParserRuleCall_1_0() { return cAnd_expressionAnd_expressionParserRuleCall_1_0; }
		
		//rec+=exclusive_or_expressionR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//exclusive_or_expressionR
		public RuleCall getRecExclusive_or_expressionRParserRuleCall_2_0() { return cRecExclusive_or_expressionRParserRuleCall_2_0; }
	}
	public class And_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.and_expressionR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEquality_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquality_expressionEquality_expressionParserRuleCall_1_0 = (RuleCall)cEquality_expressionAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecAnd_expressionRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//and_expressionR:
		//	'&' Equality_expression=equality_expression rec+=and_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'&' Equality_expression=equality_expression rec+=and_expressionR*
		public Group getGroup() { return cGroup; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//Equality_expression=equality_expression
		public Assignment getEquality_expressionAssignment_1() { return cEquality_expressionAssignment_1; }
		
		//equality_expression
		public RuleCall getEquality_expressionEquality_expressionParserRuleCall_1_0() { return cEquality_expressionEquality_expressionParserRuleCall_1_0; }
		
		//rec+=and_expressionR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//and_expressionR
		public RuleCall getRecAnd_expressionRParserRuleCall_2_0() { return cRecAnd_expressionRParserRuleCall_2_0; }
	}
	public class And_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEquality_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEquality_expressionEquality_expressionParserRuleCall_0_0 = (RuleCall)cEquality_expressionAssignment_0.eContents().get(0);
		private final Assignment cAnd_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnd_expressionRAnd_expressionRParserRuleCall_1_0 = (RuleCall)cAnd_expressionRAssignment_1.eContents().get(0);
		
		////L-07
		//and_expression:
		//	Equality_expression=equality_expression And_expressionR=and_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality_expression=equality_expression And_expressionR=and_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Equality_expression=equality_expression
		public Assignment getEquality_expressionAssignment_0() { return cEquality_expressionAssignment_0; }
		
		//equality_expression
		public RuleCall getEquality_expressionEquality_expressionParserRuleCall_0_0() { return cEquality_expressionEquality_expressionParserRuleCall_0_0; }
		
		//And_expressionR=and_expressionR?
		public Assignment getAnd_expressionRAssignment_1() { return cAnd_expressionRAssignment_1; }
		
		//and_expressionR
		public RuleCall getAnd_expressionRAnd_expressionRParserRuleCall_1_0() { return cAnd_expressionRAnd_expressionRParserRuleCall_1_0; }
	}
	public class Equality_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.equality_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelational_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_0_0 = (RuleCall)cRelational_expressionAssignment_0.eContents().get(0);
		private final Assignment cEquality_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquality_expressionREquality_expressionRParserRuleCall_1_0 = (RuleCall)cEquality_expressionRAssignment_1.eContents().get(0);
		
		////L-08
		//equality_expression:
		//	Relational_expression=relational_expression Equality_expressionR=equality_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Relational_expression=relational_expression Equality_expressionR=equality_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_0() { return cRelational_expressionAssignment_0; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_0_0() { return cRelational_expressionRelational_expressionParserRuleCall_0_0; }
		
		//Equality_expressionR=equality_expressionR?
		public Assignment getEquality_expressionRAssignment_1() { return cEquality_expressionRAssignment_1; }
		
		//equality_expressionR
		public RuleCall getEquality_expressionREquality_expressionRParserRuleCall_1_0() { return cEquality_expressionREquality_expressionRParserRuleCall_1_0; }
	}
	public class Equality_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.equality_expressionR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_0_1_0 = (RuleCall)cRelational_expressionAssignment_0_1.eContents().get(0);
		private final Assignment cRecAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecEquality_expressionRParserRuleCall_0_2_0 = (RuleCall)cRecAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_1_1_0 = (RuleCall)cRelational_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecEquality_expressionRParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		
		//equality_expressionR:
		//	'==' Relational_expression=relational_expression rec+=equality_expressionR*
		//	| '!=' Relational_expression=relational_expression rec+=equality_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'==' Relational_expression=relational_expression rec+=equality_expressionR* | '!='
		//Relational_expression=relational_expression rec+=equality_expressionR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'==' Relational_expression=relational_expression rec+=equality_expressionR*
		public Group getGroup_0() { return cGroup_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0_0() { return cEqualsSignEqualsSignKeyword_0_0; }
		
		//Relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_0_1() { return cRelational_expressionAssignment_0_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_0_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_0_1_0; }
		
		//rec+=equality_expressionR*
		public Assignment getRecAssignment_0_2() { return cRecAssignment_0_2; }
		
		//equality_expressionR
		public RuleCall getRecEquality_expressionRParserRuleCall_0_2_0() { return cRecEquality_expressionRParserRuleCall_0_2_0; }
		
		//'!=' Relational_expression=relational_expression rec+=equality_expressionR*
		public Group getGroup_1() { return cGroup_1; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0() { return cExclamationMarkEqualsSignKeyword_1_0; }
		
		//Relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_1_1() { return cRelational_expressionAssignment_1_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_1_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_1_1_0; }
		
		//rec+=equality_expressionR*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//equality_expressionR
		public RuleCall getRecEquality_expressionRParserRuleCall_1_2_0() { return cRecEquality_expressionRParserRuleCall_1_2_0; }
	}
	public class Relational_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.relational_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShift_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_0_0 = (RuleCall)cShift_expressionAssignment_0.eContents().get(0);
		private final Assignment cReAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReRelational_expressionRParserRuleCall_1_0 = (RuleCall)cReAssignment_1.eContents().get(0);
		
		////L-09
		//relational_expression:
		//	Shift_expression=shift_expression re=relational_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Shift_expression=shift_expression re=relational_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_0() { return cShift_expressionAssignment_0; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_0_0() { return cShift_expressionShift_expressionParserRuleCall_0_0; }
		
		//re=relational_expressionR?
		public Assignment getReAssignment_1() { return cReAssignment_1; }
		
		//relational_expressionR
		public RuleCall getReRelational_expressionRParserRuleCall_1_0() { return cReRelational_expressionRParserRuleCall_1_0; }
	}
	public class Relational_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.relational_expressionR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cShift_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_0_1_0 = (RuleCall)cShift_expressionAssignment_0_1.eContents().get(0);
		private final Assignment cRecAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecRelational_expressionRParserRuleCall_0_2_0 = (RuleCall)cRecAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cShift_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_1_1_0 = (RuleCall)cShift_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecRelational_expressionRParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cShift_expressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_2_1_0 = (RuleCall)cShift_expressionAssignment_2_1.eContents().get(0);
		private final Assignment cRecAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRecRelational_expressionRParserRuleCall_2_2_0 = (RuleCall)cRecAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cShift_expressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_3_1_0 = (RuleCall)cShift_expressionAssignment_3_1.eContents().get(0);
		private final Assignment cRecAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cRecRelational_expressionRParserRuleCall_3_2_0 = (RuleCall)cRecAssignment_3_2.eContents().get(0);
		
		//relational_expressionR:
		//	'<' Shift_expression=shift_expression rec+=relational_expressionR*
		//	| '>' Shift_expression=shift_expression rec+=relational_expressionR*
		//	| '<=' Shift_expression=shift_expression rec+=relational_expressionR*
		//	| '>=' Shift_expression=shift_expression rec+=relational_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'<' Shift_expression=shift_expression rec+=relational_expressionR* | '>' Shift_expression=shift_expression
		//rec+=relational_expressionR* | '<=' Shift_expression=shift_expression rec+=relational_expressionR* | '>='
		//Shift_expression=shift_expression rec+=relational_expressionR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<' Shift_expression=shift_expression rec+=relational_expressionR*
		public Group getGroup_0() { return cGroup_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }
		
		//Shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_0_1() { return cShift_expressionAssignment_0_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_0_1_0() { return cShift_expressionShift_expressionParserRuleCall_0_1_0; }
		
		//rec+=relational_expressionR*
		public Assignment getRecAssignment_0_2() { return cRecAssignment_0_2; }
		
		//relational_expressionR
		public RuleCall getRecRelational_expressionRParserRuleCall_0_2_0() { return cRecRelational_expressionRParserRuleCall_0_2_0; }
		
		//'>' Shift_expression=shift_expression rec+=relational_expressionR*
		public Group getGroup_1() { return cGroup_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }
		
		//Shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_1_1() { return cShift_expressionAssignment_1_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_1_1_0() { return cShift_expressionShift_expressionParserRuleCall_1_1_0; }
		
		//rec+=relational_expressionR*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//relational_expressionR
		public RuleCall getRecRelational_expressionRParserRuleCall_1_2_0() { return cRecRelational_expressionRParserRuleCall_1_2_0; }
		
		//'<=' Shift_expression=shift_expression rec+=relational_expressionR*
		public Group getGroup_2() { return cGroup_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2_0() { return cLessThanSignEqualsSignKeyword_2_0; }
		
		//Shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_2_1() { return cShift_expressionAssignment_2_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_2_1_0() { return cShift_expressionShift_expressionParserRuleCall_2_1_0; }
		
		//rec+=relational_expressionR*
		public Assignment getRecAssignment_2_2() { return cRecAssignment_2_2; }
		
		//relational_expressionR
		public RuleCall getRecRelational_expressionRParserRuleCall_2_2_0() { return cRecRelational_expressionRParserRuleCall_2_2_0; }
		
		//'>=' Shift_expression=shift_expression rec+=relational_expressionR*
		public Group getGroup_3() { return cGroup_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterThanSignEqualsSignKeyword_3_0; }
		
		//Shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_3_1() { return cShift_expressionAssignment_3_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_3_1_0() { return cShift_expressionShift_expressionParserRuleCall_3_1_0; }
		
		//rec+=relational_expressionR*
		public Assignment getRecAssignment_3_2() { return cRecAssignment_3_2; }
		
		//relational_expressionR
		public RuleCall getRecRelational_expressionRParserRuleCall_3_2_0() { return cRecRelational_expressionRParserRuleCall_3_2_0; }
	}
	public class Shift_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shift_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditive_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cShift_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShift_expressionRShift_expressionRParserRuleCall_1_0 = (RuleCall)cShift_expressionRAssignment_1.eContents().get(0);
		
		////L-10
		//shift_expression:
		//	additive_expression Shift_expressionR=shift_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//additive_expression Shift_expressionR=shift_expressionR?
		public Group getGroup() { return cGroup; }
		
		//additive_expression
		public RuleCall getAdditive_expressionParserRuleCall_0() { return cAdditive_expressionParserRuleCall_0; }
		
		//Shift_expressionR=shift_expressionR?
		public Assignment getShift_expressionRAssignment_1() { return cShift_expressionRAssignment_1; }
		
		//shift_expressionR
		public RuleCall getShift_expressionRShift_expressionRParserRuleCall_1_0() { return cShift_expressionRShift_expressionRParserRuleCall_1_0; }
	}
	public class Shift_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shift_expressionR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAdditive_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAdditive_expressionAdditive_expressionParserRuleCall_0_1_0 = (RuleCall)cAdditive_expressionAssignment_0_1.eContents().get(0);
		private final Assignment cRecAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecShift_expressionRParserRuleCall_0_2_0 = (RuleCall)cRecAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAdditive_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAdditive_expressionAdditive_expressionParserRuleCall_1_1_0 = (RuleCall)cAdditive_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecShift_expressionRParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		
		//shift_expressionR:
		//	'<<' Additive_expression=additive_expression rec+=shift_expressionR*
		//	| '>>' Additive_expression=additive_expression rec+=shift_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'<<' Additive_expression=additive_expression rec+=shift_expressionR* | '>>' Additive_expression=additive_expression
		//rec+=shift_expressionR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<<' Additive_expression=additive_expression rec+=shift_expressionR*
		public Group getGroup_0() { return cGroup_0; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0_0() { return cLessThanSignLessThanSignKeyword_0_0; }
		
		//Additive_expression=additive_expression
		public Assignment getAdditive_expressionAssignment_0_1() { return cAdditive_expressionAssignment_0_1; }
		
		//additive_expression
		public RuleCall getAdditive_expressionAdditive_expressionParserRuleCall_0_1_0() { return cAdditive_expressionAdditive_expressionParserRuleCall_0_1_0; }
		
		//rec+=shift_expressionR*
		public Assignment getRecAssignment_0_2() { return cRecAssignment_0_2; }
		
		//shift_expressionR
		public RuleCall getRecShift_expressionRParserRuleCall_0_2_0() { return cRecShift_expressionRParserRuleCall_0_2_0; }
		
		//'>>' Additive_expression=additive_expression rec+=shift_expressionR*
		public Group getGroup_1() { return cGroup_1; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_0() { return cGreaterThanSignGreaterThanSignKeyword_1_0; }
		
		//Additive_expression=additive_expression
		public Assignment getAdditive_expressionAssignment_1_1() { return cAdditive_expressionAssignment_1_1; }
		
		//additive_expression
		public RuleCall getAdditive_expressionAdditive_expressionParserRuleCall_1_1_0() { return cAdditive_expressionAdditive_expressionParserRuleCall_1_1_0; }
		
		//rec+=shift_expressionR*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//shift_expressionR
		public RuleCall getRecShift_expressionRParserRuleCall_1_2_0() { return cRecShift_expressionRParserRuleCall_1_2_0; }
	}
	public class Additive_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.additive_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicative_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0 = (RuleCall)cMultiplicative_expressionAssignment_0.eContents().get(0);
		private final Assignment cAdditive_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdditive_expressionRAdditive_expressionRParserRuleCall_1_0 = (RuleCall)cAdditive_expressionRAssignment_1.eContents().get(0);
		
		////L-11
		//additive_expression:
		//	Multiplicative_expression=multiplicative_expression Additive_expressionR=additive_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplicative_expression=multiplicative_expression Additive_expressionR=additive_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Multiplicative_expression=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_0() { return cMultiplicative_expressionAssignment_0; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0; }
		
		//Additive_expressionR=additive_expressionR?
		public Assignment getAdditive_expressionRAssignment_1() { return cAdditive_expressionRAssignment_1; }
		
		//additive_expressionR
		public RuleCall getAdditive_expressionRAdditive_expressionRParserRuleCall_1_0() { return cAdditive_expressionRAdditive_expressionRParserRuleCall_1_0; }
	}
	public class Additive_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.additive_expressionR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cMultiplicative_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_1_0 = (RuleCall)cMultiplicative_expressionAssignment_0_1.eContents().get(0);
		private final Assignment cRecAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecAdditive_expressionRParserRuleCall_0_2_0 = (RuleCall)cRecAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cMINUSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cMultiplicative_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0 = (RuleCall)cMultiplicative_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecAdditive_expressionRParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		
		//additive_expressionR:
		//	PLUS Multiplicative_expression=multiplicative_expression rec+=additive_expressionR*
		//	| MINUS Multiplicative_expression=multiplicative_expression rec+=additive_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//PLUS Multiplicative_expression=multiplicative_expression rec+=additive_expressionR* | MINUS
		//Multiplicative_expression=multiplicative_expression rec+=additive_expressionR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS Multiplicative_expression=multiplicative_expression rec+=additive_expressionR*
		public Group getGroup_0() { return cGroup_0; }
		
		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0_0() { return cPLUSTerminalRuleCall_0_0; }
		
		//Multiplicative_expression=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_0_1() { return cMultiplicative_expressionAssignment_0_1; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_1_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_1_0; }
		
		//rec+=additive_expressionR*
		public Assignment getRecAssignment_0_2() { return cRecAssignment_0_2; }
		
		//additive_expressionR
		public RuleCall getRecAdditive_expressionRParserRuleCall_0_2_0() { return cRecAdditive_expressionRParserRuleCall_0_2_0; }
		
		//MINUS Multiplicative_expression=multiplicative_expression rec+=additive_expressionR*
		public Group getGroup_1() { return cGroup_1; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0() { return cMINUSTerminalRuleCall_1_0; }
		
		//Multiplicative_expression=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_1_1() { return cMultiplicative_expressionAssignment_1_1; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0; }
		
		//rec+=additive_expressionR*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//additive_expressionR
		public RuleCall getRecAdditive_expressionRParserRuleCall_1_2_0() { return cRecAdditive_expressionRParserRuleCall_1_2_0; }
	}
	public class Multiplicative_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.multiplicative_expressionR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCast_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_0_1_0 = (RuleCall)cCast_expressionAssignment_0_1.eContents().get(0);
		private final Assignment cRecAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecMultiplicative_expressionRParserRuleCall_0_2_0 = (RuleCall)cRecAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCast_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_1_1_0 = (RuleCall)cCast_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecMultiplicative_expressionRParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCast_expressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_2_1_0 = (RuleCall)cCast_expressionAssignment_2_1.eContents().get(0);
		private final Assignment cRecAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRecMultiplicative_expressionRParserRuleCall_2_2_0 = (RuleCall)cRecAssignment_2_2.eContents().get(0);
		
		//multiplicative_expressionR:
		//	'*' Cast_expression=cast_expression rec+=multiplicative_expressionR*
		//	| '/' Cast_expression=cast_expression rec+=multiplicative_expressionR*
		//	| '%' Cast_expression=cast_expression rec+=multiplicative_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' Cast_expression=cast_expression rec+=multiplicative_expressionR* | '/' Cast_expression=cast_expression
		//rec+=multiplicative_expressionR* | '%' Cast_expression=cast_expression rec+=multiplicative_expressionR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*' Cast_expression=cast_expression rec+=multiplicative_expressionR*
		public Group getGroup_0() { return cGroup_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }
		
		//Cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_0_1() { return cCast_expressionAssignment_0_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_0_1_0() { return cCast_expressionCast_expressionParserRuleCall_0_1_0; }
		
		//rec+=multiplicative_expressionR*
		public Assignment getRecAssignment_0_2() { return cRecAssignment_0_2; }
		
		//multiplicative_expressionR
		public RuleCall getRecMultiplicative_expressionRParserRuleCall_0_2_0() { return cRecMultiplicative_expressionRParserRuleCall_0_2_0; }
		
		//'/' Cast_expression=cast_expression rec+=multiplicative_expressionR*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//Cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_1_1() { return cCast_expressionAssignment_1_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_1_1_0() { return cCast_expressionCast_expressionParserRuleCall_1_1_0; }
		
		//rec+=multiplicative_expressionR*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//multiplicative_expressionR
		public RuleCall getRecMultiplicative_expressionRParserRuleCall_1_2_0() { return cRecMultiplicative_expressionRParserRuleCall_1_2_0; }
		
		//'%' Cast_expression=cast_expression rec+=multiplicative_expressionR*
		public Group getGroup_2() { return cGroup_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_2_0() { return cPercentSignKeyword_2_0; }
		
		//Cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_2_1() { return cCast_expressionAssignment_2_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_2_1_0() { return cCast_expressionCast_expressionParserRuleCall_2_1_0; }
		
		//rec+=multiplicative_expressionR*
		public Assignment getRecAssignment_2_2() { return cRecAssignment_2_2; }
		
		//multiplicative_expressionR
		public RuleCall getRecMultiplicative_expressionRParserRuleCall_2_2_0() { return cRecMultiplicative_expressionRParserRuleCall_2_2_0; }
	}
	public class Multiplicative_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.multiplicative_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCast_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_0_0 = (RuleCall)cCast_expressionAssignment_0.eContents().get(0);
		private final Assignment cMultiplicative_expressionRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicative_expressionRMultiplicative_expressionRParserRuleCall_1_0 = (RuleCall)cMultiplicative_expressionRAssignment_1.eContents().get(0);
		
		////L-12
		//multiplicative_expression:
		//	Cast_expression=cast_expression Multiplicative_expressionR=multiplicative_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Cast_expression=cast_expression Multiplicative_expressionR=multiplicative_expressionR?
		public Group getGroup() { return cGroup; }
		
		//Cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_0() { return cCast_expressionAssignment_0; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_0_0() { return cCast_expressionCast_expressionParserRuleCall_0_0; }
		
		//Multiplicative_expressionR=multiplicative_expressionR?
		public Assignment getMultiplicative_expressionRAssignment_1() { return cMultiplicative_expressionRAssignment_1; }
		
		//multiplicative_expressionR
		public RuleCall getMultiplicative_expressionRMultiplicative_expressionRParserRuleCall_1_0() { return cMultiplicative_expressionRMultiplicative_expressionRParserRuleCall_1_0; }
	}
	public class Assignment_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assignment_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditional_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnary_expressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_1_0_0 = (RuleCall)cUnary_expressionAssignment_1_0.eContents().get(0);
		private final Assignment cAssignment_operatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignment_operatorAssignment_operatorParserRuleCall_1_1_0 = (RuleCall)cAssignment_operatorAssignment_1_1.eContents().get(0);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecAssignment_expressionParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		
		//assignment_expression:
		//	conditional_expression
		//	| Unary_expression=unary_expression Assignment_operator=assignment_operator rec+=assignment_expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression | Unary_expression=unary_expression Assignment_operator=assignment_operator
		//rec+=assignment_expression*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//conditional_expression
		public RuleCall getConditional_expressionParserRuleCall_0() { return cConditional_expressionParserRuleCall_0; }
		
		//Unary_expression=unary_expression Assignment_operator=assignment_operator rec+=assignment_expression*
		public Group getGroup_1() { return cGroup_1; }
		
		//Unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_1_0() { return cUnary_expressionAssignment_1_0; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_1_0_0() { return cUnary_expressionUnary_expressionParserRuleCall_1_0_0; }
		
		//Assignment_operator=assignment_operator
		public Assignment getAssignment_operatorAssignment_1_1() { return cAssignment_operatorAssignment_1_1; }
		
		//assignment_operator
		public RuleCall getAssignment_operatorAssignment_operatorParserRuleCall_1_1_0() { return cAssignment_operatorAssignment_operatorParserRuleCall_1_1_0; }
		
		//rec+=assignment_expression*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//assignment_expression
		public RuleCall getRecAssignment_expressionParserRuleCall_1_2_0() { return cRecAssignment_expressionParserRuleCall_1_2_0; }
	}
	public class Cast_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.cast_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnary_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cType_nameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_nameType_nameParserRuleCall_1_1_0 = (RuleCall)cType_nameAssignment_1_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cRecAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRecCast_expressionParserRuleCall_1_3_0 = (RuleCall)cRecAssignment_1_3.eContents().get(0);
		
		//cast_expression:
		//	unary_expression
		//	| LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE rec+=cast_expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//unary_expression | LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE rec+=cast_expression*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unary_expression
		public RuleCall getUnary_expressionParserRuleCall_0() { return cUnary_expressionParserRuleCall_0; }
		
		//LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE rec+=cast_expression*
		public Group getGroup_1() { return cGroup_1; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1_0() { return cLEFT_PARENTESETerminalRuleCall_1_0; }
		
		//Type_name=type_name
		public Assignment getType_nameAssignment_1_1() { return cType_nameAssignment_1_1; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_1_1_0() { return cType_nameType_nameParserRuleCall_1_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_1_2() { return cRIGHT_PARENTESETerminalRuleCall_1_2; }
		
		//rec+=cast_expression*
		public Assignment getRecAssignment_1_3() { return cRecAssignment_1_3; }
		
		//cast_expression
		public RuleCall getRecCast_expressionParserRuleCall_1_3_0() { return cRecCast_expressionParserRuleCall_1_3_0; }
	}
	public class Unary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfix_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINC_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRecAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRecUnary_expressionParserRuleCall_1_1_0 = (RuleCall)cRecAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cDEC_OPTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cRecAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRecUnary_expressionParserRuleCall_2_1_0 = (RuleCall)cRecAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cUnary_operatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cUnary_operatorUnary_operatorParserRuleCall_3_0_0 = (RuleCall)cUnary_operatorAssignment_3_0.eContents().get(0);
		private final Assignment cCeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCeCast_expressionParserRuleCall_3_1_0 = (RuleCall)cCeAssignment_3_1.eContents().get(0);
		
		//unary_expression:
		//	postfix_expression
		//	| INC_OP rec+=unary_expression*
		//	| DEC_OP rec+=unary_expression*
		//	| Unary_operator=unary_operator ce=cast_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//postfix_expression | INC_OP rec+=unary_expression* | DEC_OP rec+=unary_expression* | Unary_operator=unary_operator
		//ce=cast_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//postfix_expression
		public RuleCall getPostfix_expressionParserRuleCall_0() { return cPostfix_expressionParserRuleCall_0; }
		
		//INC_OP rec+=unary_expression*
		public Group getGroup_1() { return cGroup_1; }
		
		//INC_OP
		public RuleCall getINC_OPTerminalRuleCall_1_0() { return cINC_OPTerminalRuleCall_1_0; }
		
		//rec+=unary_expression*
		public Assignment getRecAssignment_1_1() { return cRecAssignment_1_1; }
		
		//unary_expression
		public RuleCall getRecUnary_expressionParserRuleCall_1_1_0() { return cRecUnary_expressionParserRuleCall_1_1_0; }
		
		//DEC_OP rec+=unary_expression*
		public Group getGroup_2() { return cGroup_2; }
		
		//DEC_OP
		public RuleCall getDEC_OPTerminalRuleCall_2_0() { return cDEC_OPTerminalRuleCall_2_0; }
		
		//rec+=unary_expression*
		public Assignment getRecAssignment_2_1() { return cRecAssignment_2_1; }
		
		//unary_expression
		public RuleCall getRecUnary_expressionParserRuleCall_2_1_0() { return cRecUnary_expressionParserRuleCall_2_1_0; }
		
		//Unary_operator=unary_operator ce=cast_expression
		public Group getGroup_3() { return cGroup_3; }
		
		//Unary_operator=unary_operator
		public Assignment getUnary_operatorAssignment_3_0() { return cUnary_operatorAssignment_3_0; }
		
		//unary_operator
		public RuleCall getUnary_operatorUnary_operatorParserRuleCall_3_0_0() { return cUnary_operatorUnary_operatorParserRuleCall_3_0_0; }
		
		//ce=cast_expression
		public Assignment getCeAssignment_3_1() { return cCeAssignment_3_1; }
		
		//cast_expression
		public RuleCall getCeCast_expressionParserRuleCall_3_1_0() { return cCeCast_expressionParserRuleCall_3_1_0; }
	}
	public class Postfix_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postfix_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrimary_expressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrimary_expressionPrimary_expressionParserRuleCall_0_0_0 = (RuleCall)cPrimary_expressionAssignment_0_0.eContents().get(0);
		private final Assignment cPostfix_expressionRAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPostfix_expressionRPostfix_expressionRParserRuleCall_0_1_0 = (RuleCall)cPostfix_expressionRAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cType_nameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_nameType_nameParserRuleCall_1_1_0 = (RuleCall)cType_nameAssignment_1_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cInitializer_listAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_1_4_0 = (RuleCall)cInitializer_listAssignment_1_4.eContents().get(0);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Assignment cPostfix_expressionRAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cPostfix_expressionRPostfix_expressionRParserRuleCall_1_6_0 = (RuleCall)cPostfix_expressionRAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cType_nameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cType_nameType_nameParserRuleCall_2_1_0 = (RuleCall)cType_nameAssignment_2_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Assignment cInitializer_listAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_2_4_0 = (RuleCall)cInitializer_listAssignment_2_4.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		private final Assignment cPostfix_expressionRAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cPostfix_expressionRPostfix_expressionRParserRuleCall_2_7_0 = (RuleCall)cPostfix_expressionRAssignment_2_7.eContents().get(0);
		
		//postfix_expression:
		//	Primary_expression=primary_expression Postfix_expressionR=postfix_expressionR?
		//	| LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list RIGHT_CHAVES
		//	Postfix_expressionR=postfix_expressionR?
		//	| LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list COMMA RIGHT_CHAVES
		//	Postfix_expressionR=postfix_expressionR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary_expression=primary_expression Postfix_expressionR=postfix_expressionR? | LEFT_PARENTESE Type_name=type_name
		//RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list RIGHT_CHAVES Postfix_expressionR=postfix_expressionR? |
		//LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list COMMA RIGHT_CHAVES
		//Postfix_expressionR=postfix_expressionR?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary_expression=primary_expression Postfix_expressionR=postfix_expressionR?
		public Group getGroup_0() { return cGroup_0; }
		
		//Primary_expression=primary_expression
		public Assignment getPrimary_expressionAssignment_0_0() { return cPrimary_expressionAssignment_0_0; }
		
		//primary_expression
		public RuleCall getPrimary_expressionPrimary_expressionParserRuleCall_0_0_0() { return cPrimary_expressionPrimary_expressionParserRuleCall_0_0_0; }
		
		//Postfix_expressionR=postfix_expressionR?
		public Assignment getPostfix_expressionRAssignment_0_1() { return cPostfix_expressionRAssignment_0_1; }
		
		//postfix_expressionR
		public RuleCall getPostfix_expressionRPostfix_expressionRParserRuleCall_0_1_0() { return cPostfix_expressionRPostfix_expressionRParserRuleCall_0_1_0; }
		
		//LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list RIGHT_CHAVES
		//Postfix_expressionR=postfix_expressionR?
		public Group getGroup_1() { return cGroup_1; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1_0() { return cLEFT_PARENTESETerminalRuleCall_1_0; }
		
		//Type_name=type_name
		public Assignment getType_nameAssignment_1_1() { return cType_nameAssignment_1_1; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_1_1_0() { return cType_nameType_nameParserRuleCall_1_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_1_2() { return cRIGHT_PARENTESETerminalRuleCall_1_2; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_1_3() { return cLEFT_CHAVESTerminalRuleCall_1_3; }
		
		//Initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_1_4() { return cInitializer_listAssignment_1_4; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_1_4_0() { return cInitializer_listInitializer_listParserRuleCall_1_4_0; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_1_5() { return cRIGHT_CHAVESTerminalRuleCall_1_5; }
		
		//Postfix_expressionR=postfix_expressionR?
		public Assignment getPostfix_expressionRAssignment_1_6() { return cPostfix_expressionRAssignment_1_6; }
		
		//postfix_expressionR
		public RuleCall getPostfix_expressionRPostfix_expressionRParserRuleCall_1_6_0() { return cPostfix_expressionRPostfix_expressionRParserRuleCall_1_6_0; }
		
		//LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list COMMA RIGHT_CHAVES
		//Postfix_expressionR=postfix_expressionR?
		public Group getGroup_2() { return cGroup_2; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_2_0() { return cLEFT_PARENTESETerminalRuleCall_2_0; }
		
		//Type_name=type_name
		public Assignment getType_nameAssignment_2_1() { return cType_nameAssignment_2_1; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_2_1_0() { return cType_nameType_nameParserRuleCall_2_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_2_2() { return cRIGHT_PARENTESETerminalRuleCall_2_2; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_2_3() { return cLEFT_CHAVESTerminalRuleCall_2_3; }
		
		//Initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_2_4() { return cInitializer_listAssignment_2_4; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_2_4_0() { return cInitializer_listInitializer_listParserRuleCall_2_4_0; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_5() { return cCOMMATerminalRuleCall_2_5; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_2_6() { return cRIGHT_CHAVESTerminalRuleCall_2_6; }
		
		//Postfix_expressionR=postfix_expressionR?
		public Assignment getPostfix_expressionRAssignment_2_7() { return cPostfix_expressionRAssignment_2_7; }
		
		//postfix_expressionR
		public RuleCall getPostfix_expressionRPostfix_expressionRParserRuleCall_2_7_0() { return cPostfix_expressionRPostfix_expressionRParserRuleCall_2_7_0; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cInitializer_listParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cInitializer_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final RuleCall cAssignment_expressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//initializer:
		//	LEFT_CHAVES initializer_list RIGHT_CHAVES
		//	| LEFT_CHAVES initializer_list COMMA RIGHT_CHAVES
		//	| assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_CHAVES initializer_list RIGHT_CHAVES | LEFT_CHAVES initializer_list COMMA RIGHT_CHAVES | assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_CHAVES initializer_list RIGHT_CHAVES
		public Group getGroup_0() { return cGroup_0; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_0_0() { return cLEFT_CHAVESTerminalRuleCall_0_0; }
		
		//initializer_list
		public RuleCall getInitializer_listParserRuleCall_0_1() { return cInitializer_listParserRuleCall_0_1; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_0_2() { return cRIGHT_CHAVESTerminalRuleCall_0_2; }
		
		//LEFT_CHAVES initializer_list COMMA RIGHT_CHAVES
		public Group getGroup_1() { return cGroup_1; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_1_0() { return cLEFT_CHAVESTerminalRuleCall_1_0; }
		
		//initializer_list
		public RuleCall getInitializer_listParserRuleCall_1_1() { return cInitializer_listParserRuleCall_1_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_2() { return cCOMMATerminalRuleCall_1_2; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_1_3() { return cRIGHT_CHAVESTerminalRuleCall_1_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_2() { return cAssignment_expressionParserRuleCall_2; }
	}
	public class Initializer_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDesignationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDesignationDesignationParserRuleCall_0_0_0 = (RuleCall)cDesignationAssignment_0_0.eContents().get(0);
		private final Assignment cInitializerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_0_1_0 = (RuleCall)cInitializerAssignment_0_1.eContents().get(0);
		private final Assignment cIlAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIlInitializer_listRParserRuleCall_0_2_0 = (RuleCall)cIlAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInitializerAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInitializerInitializerParserRuleCall_1_0_0 = (RuleCall)cInitializerAssignment_1_0.eContents().get(0);
		private final Assignment cIlrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIlrInitializer_listRParserRuleCall_1_1_0 = (RuleCall)cIlrAssignment_1_1.eContents().get(0);
		
		//initializer_list:
		//	Designation=designation Initializer=initializer il=initializer_listR?
		//	| Initializer=initializer ilr=initializer_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Designation=designation Initializer=initializer il=initializer_listR? | Initializer=initializer ilr=initializer_listR?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Designation=designation Initializer=initializer il=initializer_listR?
		public Group getGroup_0() { return cGroup_0; }
		
		//Designation=designation
		public Assignment getDesignationAssignment_0_0() { return cDesignationAssignment_0_0; }
		
		//designation
		public RuleCall getDesignationDesignationParserRuleCall_0_0_0() { return cDesignationDesignationParserRuleCall_0_0_0; }
		
		//Initializer=initializer
		public Assignment getInitializerAssignment_0_1() { return cInitializerAssignment_0_1; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_0_1_0() { return cInitializerInitializerParserRuleCall_0_1_0; }
		
		//il=initializer_listR?
		public Assignment getIlAssignment_0_2() { return cIlAssignment_0_2; }
		
		//initializer_listR
		public RuleCall getIlInitializer_listRParserRuleCall_0_2_0() { return cIlInitializer_listRParserRuleCall_0_2_0; }
		
		//Initializer=initializer ilr=initializer_listR?
		public Group getGroup_1() { return cGroup_1; }
		
		//Initializer=initializer
		public Assignment getInitializerAssignment_1_0() { return cInitializerAssignment_1_0; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_0_0() { return cInitializerInitializerParserRuleCall_1_0_0; }
		
		//ilr=initializer_listR?
		public Assignment getIlrAssignment_1_1() { return cIlrAssignment_1_1; }
		
		//initializer_listR
		public RuleCall getIlrInitializer_listRParserRuleCall_1_1_0() { return cIlrInitializer_listRParserRuleCall_1_1_0; }
	}
	public class Initializer_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer_listR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDesignationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDesignationDesignationParserRuleCall_0_1_0 = (RuleCall)cDesignationAssignment_0_1.eContents().get(0);
		private final Assignment cInitializerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInitializerInitializerParserRuleCall_0_2_0 = (RuleCall)cInitializerAssignment_0_2.eContents().get(0);
		private final Assignment cRecAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRecInitializer_listRParserRuleCall_0_3_0 = (RuleCall)cRecAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cInitializerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_1_1_0 = (RuleCall)cInitializerAssignment_1_1.eContents().get(0);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecInitializer_listRParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		
		//initializer_listR:
		//	COMMA Designation=designation Initializer=initializer rec+=initializer_listR*
		//	| COMMA Initializer=initializer rec+=initializer_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA Designation=designation Initializer=initializer rec+=initializer_listR* | COMMA Initializer=initializer
		//rec+=initializer_listR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//COMMA Designation=designation Initializer=initializer rec+=initializer_listR*
		public Group getGroup_0() { return cGroup_0; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0_0() { return cCOMMATerminalRuleCall_0_0; }
		
		//Designation=designation
		public Assignment getDesignationAssignment_0_1() { return cDesignationAssignment_0_1; }
		
		//designation
		public RuleCall getDesignationDesignationParserRuleCall_0_1_0() { return cDesignationDesignationParserRuleCall_0_1_0; }
		
		//Initializer=initializer
		public Assignment getInitializerAssignment_0_2() { return cInitializerAssignment_0_2; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_0_2_0() { return cInitializerInitializerParserRuleCall_0_2_0; }
		
		//rec+=initializer_listR*
		public Assignment getRecAssignment_0_3() { return cRecAssignment_0_3; }
		
		//initializer_listR
		public RuleCall getRecInitializer_listRParserRuleCall_0_3_0() { return cRecInitializer_listRParserRuleCall_0_3_0; }
		
		//COMMA Initializer=initializer rec+=initializer_listR*
		public Group getGroup_1() { return cGroup_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_0() { return cCOMMATerminalRuleCall_1_0; }
		
		//Initializer=initializer
		public Assignment getInitializerAssignment_1_1() { return cInitializerAssignment_1_1; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_1_0() { return cInitializerInitializerParserRuleCall_1_1_0; }
		
		//rec+=initializer_listR*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//initializer_listR
		public RuleCall getRecInitializer_listRParserRuleCall_1_2_0() { return cRecInitializer_listRParserRuleCall_1_2_0; }
	}
	public class DesignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDesignator_listParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//designation:
		//	designator_list '=';
		@Override public ParserRule getRule() { return rule; }
		
		//designator_list '='
		public Group getGroup() { return cGroup; }
		
		//designator_list
		public RuleCall getDesignator_listParserRuleCall_0() { return cDesignator_listParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class Designator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_0_0 = (RuleCall)cDesignatorAssignment_0.eContents().get(0);
		private final Assignment cDesignatorRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDesignatorRDesignator_listRParserRuleCall_1_0 = (RuleCall)cDesignatorRAssignment_1.eContents().get(0);
		
		//designator_list:
		//	Designator=designator DesignatorR=designator_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Designator=designator DesignatorR=designator_listR?
		public Group getGroup() { return cGroup; }
		
		//Designator=designator
		public Assignment getDesignatorAssignment_0() { return cDesignatorAssignment_0; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_0_0() { return cDesignatorDesignatorParserRuleCall_0_0; }
		
		//DesignatorR=designator_listR?
		public Assignment getDesignatorRAssignment_1() { return cDesignatorRAssignment_1; }
		
		//designator_listR
		public RuleCall getDesignatorRDesignator_listRParserRuleCall_1_0() { return cDesignatorRDesignator_listRParserRuleCall_1_0; }
	}
	public class Designator_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_0_0 = (RuleCall)cDesignatorAssignment_0.eContents().get(0);
		private final Assignment cRecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecDesignator_listRParserRuleCall_1_0 = (RuleCall)cRecAssignment_1.eContents().get(0);
		
		//designator_listR:
		//	Designator=designator rec+=designator_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//Designator=designator rec+=designator_listR*
		public Group getGroup() { return cGroup; }
		
		//Designator=designator
		public Assignment getDesignatorAssignment_0() { return cDesignatorAssignment_0; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_0_0() { return cDesignatorDesignatorParserRuleCall_0_0; }
		
		//rec+=designator_listR*
		public Assignment getRecAssignment_1() { return cRecAssignment_1; }
		
		//designator_listR
		public RuleCall getRecDesignator_listRParserRuleCall_1_0() { return cRecDesignator_listRParserRuleCall_1_0; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//designator:
		//	LEFT_COCHETE constant_expression RIGHT_COCHETE
		//	| '.' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_COCHETE constant_expression RIGHT_COCHETE | '.' IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_COCHETE constant_expression RIGHT_COCHETE
		public Group getGroup_0() { return cGroup_0; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_0_0() { return cLEFT_COCHETETerminalRuleCall_0_0; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_0_1() { return cConstant_expressionParserRuleCall_0_1; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_0_2() { return cRIGHT_COCHETETerminalRuleCall_0_2; }
		
		//'.' IDENTIFIER
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1_1() { return cIDENTIFIERParserRuleCall_1_1; }
	}
	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constant_expression");
		private final RuleCall cConditional_expressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//constant_expression:
		//	conditional_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression
		public RuleCall getConditional_expressionParserRuleCall() { return cConditional_expressionParserRuleCall; }
	}
	public class Type_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0 = (RuleCall)cSpecifier_qualifier_listAssignment_0_0.eContents().get(0);
		private final Assignment cAdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAdAbstract_declaratorParserRuleCall_0_1_0 = (RuleCall)cAdAssignment_0_1.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//type_name:
		//	Specifier_qualifier_list=specifier_qualifier_list ad=abstract_declarator
		//	| specifier_qualifier_list;
		@Override public ParserRule getRule() { return rule; }
		
		//Specifier_qualifier_list=specifier_qualifier_list ad=abstract_declarator | specifier_qualifier_list
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Specifier_qualifier_list=specifier_qualifier_list ad=abstract_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//Specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_0_0() { return cSpecifier_qualifier_listAssignment_0_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0; }
		
		//ad=abstract_declarator
		public Assignment getAdAssignment_0_1() { return cAdAssignment_0_1; }
		
		//abstract_declarator
		public RuleCall getAdAbstract_declaratorParserRuleCall_0_1_0() { return cAdAbstract_declaratorParserRuleCall_0_1_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listParserRuleCall_1() { return cSpecifier_qualifier_listParserRuleCall_1; }
	}
	public class Specifier_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.specifier_qualifier_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cType_specifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cType_specifierType_specifierParserRuleCall_0_0_0 = (RuleCall)cType_specifierAssignment_0_0.eContents().get(0);
		private final Assignment cRecAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRecSpecifier_qualifier_listParserRuleCall_0_1_0 = (RuleCall)cRecAssignment_0_1.eContents().get(0);
		private final RuleCall cType_qualifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//specifier_qualifier_list:
		//	Type_specifier=type_specifier rec+=specifier_qualifier_list*
		//	| type_qualifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Type_specifier=type_specifier rec+=specifier_qualifier_list* | type_qualifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type_specifier=type_specifier rec+=specifier_qualifier_list*
		public Group getGroup_0() { return cGroup_0; }
		
		//Type_specifier=type_specifier
		public Assignment getType_specifierAssignment_0_0() { return cType_specifierAssignment_0_0; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_0_0_0() { return cType_specifierType_specifierParserRuleCall_0_0_0; }
		
		//rec+=specifier_qualifier_list*
		public Assignment getRecAssignment_0_1() { return cRecAssignment_0_1; }
		
		//specifier_qualifier_list
		public RuleCall getRecSpecifier_qualifier_listParserRuleCall_0_1_0() { return cRecSpecifier_qualifier_listParserRuleCall_0_1_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierParserRuleCall_1() { return cType_qualifierParserRuleCall_1; }
	}
	public class Struct_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declaratorStruct_declaratorParserRuleCall_0_0 = (RuleCall)cStruct_declaratorAssignment_0.eContents().get(0);
		private final Assignment cStruct_declarator_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declarator_listRStruct_declarator_listRParserRuleCall_1_0 = (RuleCall)cStruct_declarator_listRAssignment_1.eContents().get(0);
		
		//struct_declarator_list:
		//	Struct_declarator=struct_declarator Struct_declarator_listR=struct_declarator_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Struct_declarator=struct_declarator Struct_declarator_listR=struct_declarator_listR?
		public Group getGroup() { return cGroup; }
		
		//Struct_declarator=struct_declarator
		public Assignment getStruct_declaratorAssignment_0() { return cStruct_declaratorAssignment_0; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorStruct_declaratorParserRuleCall_0_0() { return cStruct_declaratorStruct_declaratorParserRuleCall_0_0; }
		
		//Struct_declarator_listR=struct_declarator_listR?
		public Assignment getStruct_declarator_listRAssignment_1() { return cStruct_declarator_listRAssignment_1; }
		
		//struct_declarator_listR
		public RuleCall getStruct_declarator_listRStruct_declarator_listRParserRuleCall_1_0() { return cStruct_declarator_listRStruct_declarator_listRParserRuleCall_1_0; }
	}
	public class Struct_declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declarationStruct_declarationParserRuleCall_0_0 = (RuleCall)cStruct_declarationAssignment_0.eContents().get(0);
		private final Assignment cStruct_declaration_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declaration_listRStruct_declaration_listRParserRuleCall_1_0 = (RuleCall)cStruct_declaration_listRAssignment_1.eContents().get(0);
		
		//struct_declaration_list:
		//	Struct_declaration=struct_declaration Struct_declaration_listR=struct_declaration_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Struct_declaration=struct_declaration Struct_declaration_listR=struct_declaration_listR?
		public Group getGroup() { return cGroup; }
		
		//Struct_declaration=struct_declaration
		public Assignment getStruct_declarationAssignment_0() { return cStruct_declarationAssignment_0; }
		
		//struct_declaration
		public RuleCall getStruct_declarationStruct_declarationParserRuleCall_0_0() { return cStruct_declarationStruct_declarationParserRuleCall_0_0; }
		
		//Struct_declaration_listR=struct_declaration_listR?
		public Assignment getStruct_declaration_listRAssignment_1() { return cStruct_declaration_listRAssignment_1; }
		
		//struct_declaration_listR
		public RuleCall getStruct_declaration_listRStruct_declaration_listRParserRuleCall_1_0() { return cStruct_declaration_listRStruct_declaration_listRParserRuleCall_1_0; }
	}
	public class Struct_declaration_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declarationStruct_declarationParserRuleCall_0_0 = (RuleCall)cStruct_declarationAssignment_0.eContents().get(0);
		private final Assignment cRecAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecStruct_declaration_listRParserRuleCall_1_0 = (RuleCall)cRecAssignment_1.eContents().get(0);
		
		//struct_declaration_listR:
		//	Struct_declaration=struct_declaration rec+=struct_declaration_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//Struct_declaration=struct_declaration rec+=struct_declaration_listR*
		public Group getGroup() { return cGroup; }
		
		//Struct_declaration=struct_declaration
		public Assignment getStruct_declarationAssignment_0() { return cStruct_declarationAssignment_0; }
		
		//struct_declaration
		public RuleCall getStruct_declarationStruct_declarationParserRuleCall_0_0() { return cStruct_declarationStruct_declarationParserRuleCall_0_0; }
		
		//rec+=struct_declaration_listR*
		public Assignment getRecAssignment_1() { return cRecAssignment_1; }
		
		//struct_declaration_listR
		public RuleCall getRecStruct_declaration_listRParserRuleCall_1_0() { return cRecStruct_declaration_listRParserRuleCall_1_0; }
	}
	public class Struct_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDOT_COMMATerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSpecifier_qualifier_listxAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listxSpecifier_qualifier_listParserRuleCall_1_0_0 = (RuleCall)cSpecifier_qualifier_listxAssignment_1_0.eContents().get(0);
		private final Assignment cStruct_declarator_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0 = (RuleCall)cStruct_declarator_listAssignment_1_1.eContents().get(0);
		private final RuleCall cDOT_COMMATerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cStatic_assert_declarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//struct_declaration:
		//	specifier_qualifier_list DOT_COMMA
		//	| Specifier_qualifier_listx=specifier_qualifier_list Struct_declarator_list=struct_declarator_list DOT_COMMA
		//	| static_assert_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//specifier_qualifier_list DOT_COMMA | Specifier_qualifier_listx=specifier_qualifier_list
		//Struct_declarator_list=struct_declarator_list DOT_COMMA | static_assert_declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//specifier_qualifier_list DOT_COMMA
		public Group getGroup_0() { return cGroup_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listParserRuleCall_0_0() { return cSpecifier_qualifier_listParserRuleCall_0_0; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_0_1() { return cDOT_COMMATerminalRuleCall_0_1; }
		
		//Specifier_qualifier_listx=specifier_qualifier_list Struct_declarator_list=struct_declarator_list DOT_COMMA
		public Group getGroup_1() { return cGroup_1; }
		
		//Specifier_qualifier_listx=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listxAssignment_1_0() { return cSpecifier_qualifier_listxAssignment_1_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listxSpecifier_qualifier_listParserRuleCall_1_0_0() { return cSpecifier_qualifier_listxSpecifier_qualifier_listParserRuleCall_1_0_0; }
		
		//Struct_declarator_list=struct_declarator_list
		public Assignment getStruct_declarator_listAssignment_1_1() { return cStruct_declarator_listAssignment_1_1; }
		
		//struct_declarator_list
		public RuleCall getStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0() { return cStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_1_2() { return cDOT_COMMATerminalRuleCall_1_2; }
		
		//static_assert_declaration
		public RuleCall getStatic_assert_declarationParserRuleCall_2() { return cStatic_assert_declarationParserRuleCall_2; }
	}
	public class Struct_declarator_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStruct_declaratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declaratorStruct_declaratorParserRuleCall_1_0 = (RuleCall)cStruct_declaratorAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecStruct_declarator_listRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//struct_declarator_listR:
		//	COMMA Struct_declarator=struct_declarator rec+=struct_declarator_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA Struct_declarator=struct_declarator rec+=struct_declarator_listR*
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//Struct_declarator=struct_declarator
		public Assignment getStruct_declaratorAssignment_1() { return cStruct_declaratorAssignment_1; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorStruct_declaratorParserRuleCall_1_0() { return cStruct_declaratorStruct_declaratorParserRuleCall_1_0; }
		
		//rec+=struct_declarator_listR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//struct_declarator_listR
		public RuleCall getRecStruct_declarator_listRParserRuleCall_2_0() { return cRecStruct_declarator_listRParserRuleCall_2_0; }
	}
	public class Struct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaratorxAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaratorxDeclaratorParserRuleCall_1_0_0 = (RuleCall)cDeclaratorxAssignment_1_0.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cConstant_expression1Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstant_expression1Constant_expressionParserRuleCall_1_2_0 = (RuleCall)cConstant_expression1Assignment_1_2.eContents().get(0);
		private final RuleCall cDeclaratorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//struct_declarator:
		//	DOTS constant_expression
		//	| Declaratorx=declarator DOTS Constant_expression1=constant_expression
		//	| declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//DOTS constant_expression | Declaratorx=declarator DOTS Constant_expression1=constant_expression | declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOTS constant_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_0_0() { return cDOTSTerminalRuleCall_0_0; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_0_1() { return cConstant_expressionParserRuleCall_0_1; }
		
		//Declaratorx=declarator DOTS Constant_expression1=constant_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//Declaratorx=declarator
		public Assignment getDeclaratorxAssignment_1_0() { return cDeclaratorxAssignment_1_0; }
		
		//declarator
		public RuleCall getDeclaratorxDeclaratorParserRuleCall_1_0_0() { return cDeclaratorxDeclaratorParserRuleCall_1_0_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_1_1() { return cDOTSTerminalRuleCall_1_1; }
		
		//Constant_expression1=constant_expression
		public Assignment getConstant_expression1Assignment_1_2() { return cConstant_expression1Assignment_1_2; }
		
		//constant_expression
		public RuleCall getConstant_expression1Constant_expressionParserRuleCall_1_2_0() { return cConstant_expression1Constant_expressionParserRuleCall_1_2_0; }
		
		//declarator
		public RuleCall getDeclaratorParserRuleCall_2() { return cDeclaratorParserRuleCall_2; }
	}
	public class Static_assert_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.static_assert_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTATIC_ASSERTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cConstant_expressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSTRING_LITERALKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cDOT_COMMATerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//static_assert_declaration:
		//	'STATIC_ASSERT' LEFT_PARENTESE constant_expression COMMA 'STRING_LITERAL' RIGHT_PARENTESE DOT_COMMA;
		@Override public ParserRule getRule() { return rule; }
		
		//'STATIC_ASSERT' LEFT_PARENTESE constant_expression COMMA 'STRING_LITERAL' RIGHT_PARENTESE DOT_COMMA
		public Group getGroup() { return cGroup; }
		
		//'STATIC_ASSERT'
		public Keyword getSTATIC_ASSERTKeyword_0() { return cSTATIC_ASSERTKeyword_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1() { return cLEFT_PARENTESETerminalRuleCall_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_2() { return cConstant_expressionParserRuleCall_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3() { return cCOMMATerminalRuleCall_3; }
		
		//'STRING_LITERAL'
		public Keyword getSTRING_LITERALKeyword_4() { return cSTRING_LITERALKeyword_4; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_5() { return cRIGHT_PARENTESETerminalRuleCall_5; }
		
		//DOT_COMMA
		public RuleCall getDOT_COMMATerminalRuleCall_6() { return cDOT_COMMATerminalRuleCall_6; }
	}
	public class Struct_or_union_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_or_union_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStruct_or_unionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStruct_or_unionStruct_or_unionParserRuleCall_0_0_0 = (RuleCall)cStruct_or_unionAssignment_0_0.eContents().get(0);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cStruct_declaration_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0 = (RuleCall)cStruct_declaration_listAssignment_0_2.eContents().get(0);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStruct_or_unionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStruct_or_unionStruct_or_unionParserRuleCall_1_0_0 = (RuleCall)cStruct_or_unionAssignment_1_0.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIDENTIFIERParserRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		private final RuleCall cLEFT_CHAVESTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cStruct_declaration_listAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStruct_declaration_listStruct_declaration_listParserRuleCall_1_3_0 = (RuleCall)cStruct_declaration_listAssignment_1_3.eContents().get(0);
		private final RuleCall cRIGHT_CHAVESTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cStruct_or_unionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//struct_or_union_specifier:
		//	Struct_or_union=struct_or_union LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES
		//	| Struct_or_union=struct_or_union id=IDENTIFIER LEFT_CHAVES Struct_declaration_list=struct_declaration_list
		//	RIGHT_CHAVES
		//	| struct_or_union IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//Struct_or_union=struct_or_union LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES |
		//Struct_or_union=struct_or_union id=IDENTIFIER LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES
		//| struct_or_union IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Struct_or_union=struct_or_union LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES
		public Group getGroup_0() { return cGroup_0; }
		
		//Struct_or_union=struct_or_union
		public Assignment getStruct_or_unionAssignment_0_0() { return cStruct_or_unionAssignment_0_0; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionStruct_or_unionParserRuleCall_0_0_0() { return cStruct_or_unionStruct_or_unionParserRuleCall_0_0_0; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_0_1() { return cLEFT_CHAVESTerminalRuleCall_0_1; }
		
		//Struct_declaration_list=struct_declaration_list
		public Assignment getStruct_declaration_listAssignment_0_2() { return cStruct_declaration_listAssignment_0_2; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0() { return cStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_0_3() { return cRIGHT_CHAVESTerminalRuleCall_0_3; }
		
		//Struct_or_union=struct_or_union id=IDENTIFIER LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES
		public Group getGroup_1() { return cGroup_1; }
		
		//Struct_or_union=struct_or_union
		public Assignment getStruct_or_unionAssignment_1_0() { return cStruct_or_unionAssignment_1_0; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionStruct_or_unionParserRuleCall_1_0_0() { return cStruct_or_unionStruct_or_unionParserRuleCall_1_0_0; }
		
		//id=IDENTIFIER
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }
		
		//IDENTIFIER
		public RuleCall getIdIDENTIFIERParserRuleCall_1_1_0() { return cIdIDENTIFIERParserRuleCall_1_1_0; }
		
		//LEFT_CHAVES
		public RuleCall getLEFT_CHAVESTerminalRuleCall_1_2() { return cLEFT_CHAVESTerminalRuleCall_1_2; }
		
		//Struct_declaration_list=struct_declaration_list
		public Assignment getStruct_declaration_listAssignment_1_3() { return cStruct_declaration_listAssignment_1_3; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listStruct_declaration_listParserRuleCall_1_3_0() { return cStruct_declaration_listStruct_declaration_listParserRuleCall_1_3_0; }
		
		//RIGHT_CHAVES
		public RuleCall getRIGHT_CHAVESTerminalRuleCall_1_4() { return cRIGHT_CHAVESTerminalRuleCall_1_4; }
		
		//struct_or_union IDENTIFIER
		public Group getGroup_2() { return cGroup_2; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionParserRuleCall_2_0() { return cStruct_or_unionParserRuleCall_2_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_2_1() { return cIDENTIFIERParserRuleCall_2_1; }
	}
	public class Atomic_type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.atomic_type_specifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cATOMICKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cType_nameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//atomic_type_specifier:
		//	'ATOMIC' LEFT_PARENTESE type_name RIGHT_PARENTESE;
		@Override public ParserRule getRule() { return rule; }
		
		//'ATOMIC' LEFT_PARENTESE type_name RIGHT_PARENTESE
		public Group getGroup() { return cGroup; }
		
		//'ATOMIC'
		public Keyword getATOMICKeyword_0() { return cATOMICKeyword_0; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1() { return cLEFT_PARENTESETerminalRuleCall_1; }
		
		//type_name
		public RuleCall getType_nameParserRuleCall_2() { return cType_nameParserRuleCall_2; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_3() { return cRIGHT_PARENTESETerminalRuleCall_3; }
	}
	public class Postfix_expressionRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postfix_expressionR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLEFT_COCHETETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final RuleCall cRIGHT_COCHETETerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cRecAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRecPostfix_expressionRParserRuleCall_0_3_0 = (RuleCall)cRecAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRecAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRecPostfix_expressionRParserRuleCall_1_2_0 = (RuleCall)cRecAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cArgument_expression_listAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgument_expression_listArgument_expression_listParserRuleCall_2_1_0 = (RuleCall)cArgument_expression_listAssignment_2_1.eContents().get(0);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cRecAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRecPostfix_expressionRParserRuleCall_2_3_0 = (RuleCall)cRecAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cRecAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cRecPostfix_expressionRParserRuleCall_3_2_0 = (RuleCall)cRecAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cRecAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cRecPostfix_expressionRParserRuleCall_4_2_0 = (RuleCall)cRecAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cINC_OPTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cRecAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRecPostfix_expressionRParserRuleCall_5_1_0 = (RuleCall)cRecAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cDEC_OPTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Assignment cRecAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRecPostfix_expressionRParserRuleCall_6_1_0 = (RuleCall)cRecAssignment_6_1.eContents().get(0);
		
		//postfix_expressionR:
		//	LEFT_COCHETE Expression=expression RIGHT_COCHETE rec+=postfix_expressionR*
		//	| LEFT_PARENTESE RIGHT_PARENTESE rec+=postfix_expressionR*
		//	| LEFT_PARENTESE Argument_expression_list=argument_expression_list RIGHT_PARENTESE rec+=postfix_expressionR*
		//	| '.' IDENTIFIER rec+=postfix_expressionR*
		//	| '->' IDENTIFIER rec+=postfix_expressionR*
		//	| INC_OP rec+=postfix_expressionR*
		//	| DEC_OP rec+=postfix_expressionR*;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_COCHETE Expression=expression RIGHT_COCHETE rec+=postfix_expressionR* | LEFT_PARENTESE RIGHT_PARENTESE
		//rec+=postfix_expressionR* | LEFT_PARENTESE Argument_expression_list=argument_expression_list RIGHT_PARENTESE
		//rec+=postfix_expressionR* | '.' IDENTIFIER rec+=postfix_expressionR* | '->' IDENTIFIER rec+=postfix_expressionR* |
		//INC_OP rec+=postfix_expressionR* | DEC_OP rec+=postfix_expressionR*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_COCHETE Expression=expression RIGHT_COCHETE rec+=postfix_expressionR*
		public Group getGroup_0() { return cGroup_0; }
		
		//LEFT_COCHETE
		public RuleCall getLEFT_COCHETETerminalRuleCall_0_0() { return cLEFT_COCHETETerminalRuleCall_0_0; }
		
		//Expression=expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//RIGHT_COCHETE
		public RuleCall getRIGHT_COCHETETerminalRuleCall_0_2() { return cRIGHT_COCHETETerminalRuleCall_0_2; }
		
		//rec+=postfix_expressionR*
		public Assignment getRecAssignment_0_3() { return cRecAssignment_0_3; }
		
		//postfix_expressionR
		public RuleCall getRecPostfix_expressionRParserRuleCall_0_3_0() { return cRecPostfix_expressionRParserRuleCall_0_3_0; }
		
		//LEFT_PARENTESE RIGHT_PARENTESE rec+=postfix_expressionR*
		public Group getGroup_1() { return cGroup_1; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_1_0() { return cLEFT_PARENTESETerminalRuleCall_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_1_1() { return cRIGHT_PARENTESETerminalRuleCall_1_1; }
		
		//rec+=postfix_expressionR*
		public Assignment getRecAssignment_1_2() { return cRecAssignment_1_2; }
		
		//postfix_expressionR
		public RuleCall getRecPostfix_expressionRParserRuleCall_1_2_0() { return cRecPostfix_expressionRParserRuleCall_1_2_0; }
		
		//LEFT_PARENTESE Argument_expression_list=argument_expression_list RIGHT_PARENTESE rec+=postfix_expressionR*
		public Group getGroup_2() { return cGroup_2; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_2_0() { return cLEFT_PARENTESETerminalRuleCall_2_0; }
		
		//Argument_expression_list=argument_expression_list
		public Assignment getArgument_expression_listAssignment_2_1() { return cArgument_expression_listAssignment_2_1; }
		
		//argument_expression_list
		public RuleCall getArgument_expression_listArgument_expression_listParserRuleCall_2_1_0() { return cArgument_expression_listArgument_expression_listParserRuleCall_2_1_0; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_2_2() { return cRIGHT_PARENTESETerminalRuleCall_2_2; }
		
		//rec+=postfix_expressionR*
		public Assignment getRecAssignment_2_3() { return cRecAssignment_2_3; }
		
		//postfix_expressionR
		public RuleCall getRecPostfix_expressionRParserRuleCall_2_3_0() { return cRecPostfix_expressionRParserRuleCall_2_3_0; }
		
		//'.' IDENTIFIER rec+=postfix_expressionR*
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_3_1() { return cIDENTIFIERParserRuleCall_3_1; }
		
		//rec+=postfix_expressionR*
		public Assignment getRecAssignment_3_2() { return cRecAssignment_3_2; }
		
		//postfix_expressionR
		public RuleCall getRecPostfix_expressionRParserRuleCall_3_2_0() { return cRecPostfix_expressionRParserRuleCall_3_2_0; }
		
		//'->' IDENTIFIER rec+=postfix_expressionR*
		public Group getGroup_4() { return cGroup_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_4_1() { return cIDENTIFIERParserRuleCall_4_1; }
		
		//rec+=postfix_expressionR*
		public Assignment getRecAssignment_4_2() { return cRecAssignment_4_2; }
		
		//postfix_expressionR
		public RuleCall getRecPostfix_expressionRParserRuleCall_4_2_0() { return cRecPostfix_expressionRParserRuleCall_4_2_0; }
		
		//INC_OP rec+=postfix_expressionR*
		public Group getGroup_5() { return cGroup_5; }
		
		//INC_OP
		public RuleCall getINC_OPTerminalRuleCall_5_0() { return cINC_OPTerminalRuleCall_5_0; }
		
		//rec+=postfix_expressionR*
		public Assignment getRecAssignment_5_1() { return cRecAssignment_5_1; }
		
		//postfix_expressionR
		public RuleCall getRecPostfix_expressionRParserRuleCall_5_1_0() { return cRecPostfix_expressionRParserRuleCall_5_1_0; }
		
		//DEC_OP rec+=postfix_expressionR*
		public Group getGroup_6() { return cGroup_6; }
		
		//DEC_OP
		public RuleCall getDEC_OPTerminalRuleCall_6_0() { return cDEC_OPTerminalRuleCall_6_0; }
		
		//rec+=postfix_expressionR*
		public Assignment getRecAssignment_6_1() { return cRecAssignment_6_1; }
		
		//postfix_expressionR
		public RuleCall getRecPostfix_expressionRParserRuleCall_6_1_0() { return cRecPostfix_expressionRParserRuleCall_6_1_0; }
	}
	public class Argument_expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.argument_expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_0 = (RuleCall)cAssignment_expressionAssignment_0.eContents().get(0);
		private final Assignment cArgument_expression_listRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgument_expression_listRArgument_expression_listRParserRuleCall_1_0 = (RuleCall)cArgument_expression_listRAssignment_1.eContents().get(0);
		
		//argument_expression_list:
		//	Assignment_expression=assignment_expression Argument_expression_listR=argument_expression_listR?;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment_expression=assignment_expression Argument_expression_listR=argument_expression_listR?
		public Group getGroup() { return cGroup; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0() { return cAssignment_expressionAssignment_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_0; }
		
		//Argument_expression_listR=argument_expression_listR?
		public Assignment getArgument_expression_listRAssignment_1() { return cArgument_expression_listRAssignment_1; }
		
		//argument_expression_listR
		public RuleCall getArgument_expression_listRArgument_expression_listRParserRuleCall_1_0() { return cArgument_expression_listRArgument_expression_listRParserRuleCall_1_0; }
	}
	public class Argument_expression_listRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.argument_expression_listR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_0 = (RuleCall)cAssignment_expressionAssignment_1.eContents().get(0);
		private final Assignment cRecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRecArgument_expression_listRParserRuleCall_2_0 = (RuleCall)cRecAssignment_2.eContents().get(0);
		
		//argument_expression_listR:
		//	COMMA Assignment_expression=assignment_expression rec+=argument_expression_listR*;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA Assignment_expression=assignment_expression rec+=argument_expression_listR*
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//Assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1() { return cAssignment_expressionAssignment_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_0; }
		
		//rec+=argument_expression_listR*
		public Assignment getRecAssignment_2() { return cRecAssignment_2; }
		
		//argument_expression_listR
		public RuleCall getRecArgument_expression_listRParserRuleCall_2_0() { return cRecArgument_expression_listRParserRuleCall_2_0; }
	}
	public class Primary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cLEFT_PARENTESETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cRIGHT_PARENTESETerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringCAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStringSTRING_CTerminalRuleCall_3_1_0 = (RuleCall)cStringAssignment_3_1.eContents().get(0);
		
		//primary_expression:
		//	IDENTIFIER
		//	| constant
		//	| LEFT_PARENTESE expression RIGHT_PARENTESE
		//	| {StringC} string=STRING_C;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | constant | LEFT_PARENTESE expression RIGHT_PARENTESE | {StringC} string=STRING_C
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }
		
		//LEFT_PARENTESE expression RIGHT_PARENTESE
		public Group getGroup_2() { return cGroup_2; }
		
		//LEFT_PARENTESE
		public RuleCall getLEFT_PARENTESETerminalRuleCall_2_0() { return cLEFT_PARENTESETerminalRuleCall_2_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }
		
		//RIGHT_PARENTESE
		public RuleCall getRIGHT_PARENTESETerminalRuleCall_2_2() { return cRIGHT_PARENTESETerminalRuleCall_2_2; }
		
		//{StringC} string=STRING_C
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringC}
		public Action getStringCAction_3_0() { return cStringCAction_3_0; }
		
		//string=STRING_C
		public Assignment getStringAssignment_3_1() { return cStringAssignment_3_1; }
		
		//STRING_C
		public RuleCall getStringSTRING_CTerminalRuleCall_3_1_0() { return cStringSTRING_CTerminalRuleCall_3_1_0; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.pointer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_0_1_0 = (RuleCall)cType_qualifier_listAssignment_0_1.eContents().get(0);
		private final Assignment cRecAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRecPointerParserRuleCall_0_2_0 = (RuleCall)cRecAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cType_qualifier_listParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRecAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRecPointerParserRuleCall_2_1_0 = (RuleCall)cRecAssignment_2_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//pointer:
		//	'*' Type_qualifier_list=type_qualifier_list rec+=pointer*
		//	| '*' type_qualifier_list
		//	| '*' rec+=pointer*
		//	| '*';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' Type_qualifier_list=type_qualifier_list rec+=pointer* | '*' type_qualifier_list | '*' rec+=pointer* | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*' Type_qualifier_list=type_qualifier_list rec+=pointer*
		public Group getGroup_0() { return cGroup_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }
		
		//Type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_0_1() { return cType_qualifier_listAssignment_0_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_0_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_0_1_0; }
		
		//rec+=pointer*
		public Assignment getRecAssignment_0_2() { return cRecAssignment_0_2; }
		
		//pointer
		public RuleCall getRecPointerParserRuleCall_0_2_0() { return cRecPointerParserRuleCall_0_2_0; }
		
		//'*' type_qualifier_list
		public Group getGroup_1() { return cGroup_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listParserRuleCall_1_1() { return cType_qualifier_listParserRuleCall_1_1; }
		
		//'*' rec+=pointer*
		public Group getGroup_2() { return cGroup_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//rec+=pointer*
		public Assignment getRecAssignment_2_1() { return cRecAssignment_2_1; }
		
		//pointer
		public RuleCall getRecPointerParserRuleCall_2_1_0() { return cRecPointerParserRuleCall_2_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGER_NUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLE_NUMBERParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//constant:
		//	INTEGER_NUMBER
		//	| DOUBLE_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER_NUMBER | DOUBLE_NUMBER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGER_NUMBER
		public RuleCall getINTEGER_NUMBERTerminalRuleCall_0() { return cINTEGER_NUMBERTerminalRuleCall_0; }
		
		//DOUBLE_NUMBER
		public RuleCall getDOUBLE_NUMBERParserRuleCall_1() { return cDOUBLE_NUMBERParserRuleCall_1; }
	}
	public class DOUBLE_NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE_NUMBER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTEGER_NUMBERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTEGER_NUMBERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DOUBLE_NUMBER:
		//	INTEGER_NUMBER '.' INTEGER_NUMBER;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGER_NUMBER '.' INTEGER_NUMBER
		public Group getGroup() { return cGroup; }
		
		//INTEGER_NUMBER
		public RuleCall getINTEGER_NUMBERTerminalRuleCall_0() { return cINTEGER_NUMBERTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INTEGER_NUMBER
		public RuleCall getINTEGER_NUMBERTerminalRuleCall_2() { return cINTEGER_NUMBERTerminalRuleCall_2; }
	}
	public class IDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDENTIFIER");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////#------------------------TABLE SYMBOLS-----------------------------
		//IDENTIFIER:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class Struct_or_unionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_or_union");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSTRUCTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUNIONKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//struct_or_union:
		//	'STRUCT'
		//	| 'UNION';
		@Override public ParserRule getRule() { return rule; }
		
		//'STRUCT' | 'UNION'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'STRUCT'
		public Keyword getSTRUCTKeyword_0() { return cSTRUCTKeyword_0; }
		
		//'UNION'
		public Keyword getUNIONKeyword_1() { return cUNIONKeyword_1; }
	}
	public class Unary_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unary_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMINUSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cTildeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//unary_operator:
		//	'&'
		//	| '*'
		//	| PLUS
		//	| MINUS
		//	| '~'
		//	| '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'&' | '*' | PLUS | MINUS | '~' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//PLUS
		public RuleCall getPLUSTerminalRuleCall_2() { return cPLUSTerminalRuleCall_2; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_3() { return cMINUSTerminalRuleCall_3; }
		
		//'~'
		public Keyword getTildeKeyword_4() { return cTildeKeyword_4; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_5() { return cExclamationMarkKeyword_5; }
	}
	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCharKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cShortKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIntKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLongKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFloatKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDoubleKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSIGNEDKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cUNSIGNEDKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cBOOLKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cCOMPLEXKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cIMAGINARYKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final RuleCall cStruct_or_union_specifierParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAtomic_type_specifierParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final Keyword cTYPEDEF_NAMEKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		
		//type_specifier:
		//	'void'
		//	| 'char'
		//	| 'short'
		//	| 'int'
		//	| 'long'
		//	| 'float'
		//	| 'double'
		//	| 'SIGNED'
		//	| 'UNSIGNED'
		//	| 'BOOL'
		//	| 'COMPLEX'
		//	| 'IMAGINARY'
		//	| struct_or_union_specifier
		//	| atomic_type_specifier
		//	| 'TYPEDEF_NAME';
		@Override public ParserRule getRule() { return rule; }
		
		//'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'SIGNED' | 'UNSIGNED' | 'BOOL' | 'COMPLEX' |
		//'IMAGINARY' | struct_or_union_specifier | atomic_type_specifier | 'TYPEDEF_NAME'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'void'
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }
		
		//'char'
		public Keyword getCharKeyword_1() { return cCharKeyword_1; }
		
		//'short'
		public Keyword getShortKeyword_2() { return cShortKeyword_2; }
		
		//'int'
		public Keyword getIntKeyword_3() { return cIntKeyword_3; }
		
		//'long'
		public Keyword getLongKeyword_4() { return cLongKeyword_4; }
		
		//'float'
		public Keyword getFloatKeyword_5() { return cFloatKeyword_5; }
		
		//'double'
		public Keyword getDoubleKeyword_6() { return cDoubleKeyword_6; }
		
		//'SIGNED'
		public Keyword getSIGNEDKeyword_7() { return cSIGNEDKeyword_7; }
		
		//'UNSIGNED'
		public Keyword getUNSIGNEDKeyword_8() { return cUNSIGNEDKeyword_8; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_9() { return cBOOLKeyword_9; }
		
		//'COMPLEX'
		public Keyword getCOMPLEXKeyword_10() { return cCOMPLEXKeyword_10; }
		
		//'IMAGINARY'
		public Keyword getIMAGINARYKeyword_11() { return cIMAGINARYKeyword_11; }
		
		//struct_or_union_specifier
		public RuleCall getStruct_or_union_specifierParserRuleCall_12() { return cStruct_or_union_specifierParserRuleCall_12; }
		
		//atomic_type_specifier
		public RuleCall getAtomic_type_specifierParserRuleCall_13() { return cAtomic_type_specifierParserRuleCall_13; }
		
		//'TYPEDEF_NAME'
		public Keyword getTYPEDEF_NAMEKeyword_14() { return cTYPEDEF_NAMEKeyword_14; }
	}
	public class Storage_class_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.storage_class_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTYPEDEFKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEXTERNKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSTATICKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTHREAD_LOCALKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAUTOKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cREGISTERKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//storage_class_specifier:
		//	'TYPEDEF'
		//	| 'EXTERN'
		//	| 'STATIC'
		//	| 'THREAD_LOCAL'
		//	| 'AUTO'
		//	| 'REGISTER';
		@Override public ParserRule getRule() { return rule; }
		
		//'TYPEDEF' | 'EXTERN' | 'STATIC' | 'THREAD_LOCAL' | 'AUTO' | 'REGISTER'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'TYPEDEF'
		public Keyword getTYPEDEFKeyword_0() { return cTYPEDEFKeyword_0; }
		
		//'EXTERN'
		public Keyword getEXTERNKeyword_1() { return cEXTERNKeyword_1; }
		
		//'STATIC'
		public Keyword getSTATICKeyword_2() { return cSTATICKeyword_2; }
		
		//'THREAD_LOCAL'
		public Keyword getTHREAD_LOCALKeyword_3() { return cTHREAD_LOCALKeyword_3; }
		
		//'AUTO'
		public Keyword getAUTOKeyword_4() { return cAUTOKeyword_4; }
		
		//'REGISTER'
		public Keyword getREGISTERKeyword_5() { return cREGISTERKeyword_5; }
	}
	public class Assignment_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assignment_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAmpersandEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCircumflexAccentEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVerticalLineEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//assignment_operator:
		//	'='
		//	| '*='
		//	| '/='
		//	| '%='
		//	| '+='
		//	| '-='
		//	| '<<='
		//	| '>>='
		//	| '&='
		//	| '^='
		//	| '|=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_1() { return cAsteriskEqualsSignKeyword_1; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_2() { return cSolidusEqualsSignKeyword_2; }
		
		//'%='
		public Keyword getPercentSignEqualsSignKeyword_3() { return cPercentSignEqualsSignKeyword_3; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_4() { return cPlusSignEqualsSignKeyword_4; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_5() { return cHyphenMinusEqualsSignKeyword_5; }
		
		//'<<='
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_6() { return cLessThanSignLessThanSignEqualsSignKeyword_6; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_7() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_7; }
		
		//'&='
		public Keyword getAmpersandEqualsSignKeyword_8() { return cAmpersandEqualsSignKeyword_8; }
		
		//'^='
		public Keyword getCircumflexAccentEqualsSignKeyword_9() { return cCircumflexAccentEqualsSignKeyword_9; }
		
		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_10() { return cVerticalLineEqualsSignKeyword_10; }
	}
	
	
	private final ModelElements pModel;
	private final Translation_unitElements pTranslation_unit;
	private final Translation_unitRElements pTranslation_unitR;
	private final External_declarationElements pExternal_declaration;
	private final Function_definitionElements pFunction_definition;
	private final DeclaratorElements pDeclarator;
	private final Type_qualifier_listElements pType_qualifier_list;
	private final Type_qualifierElements pType_qualifier;
	private final Type_qualifier_listRElements pType_qualifier_listR;
	private final Direct_declaratorElements pDirect_declarator;
	private final Direct_declaratorRElements pDirect_declaratorR;
	private final Parameter_type_listElements pParameter_type_list;
	private final Identifier_listElements pIdentifier_list;
	private final Identifier_listRElements pIdentifier_listR;
	private final Parameter_listElements pParameter_list;
	private final Parameter_listRElements pParameter_listR;
	private final Parameter_declarationElements pParameter_declaration;
	private final Abstract_declaratorElements pAbstract_declarator;
	private final Declaration_listElements pDeclaration_list;
	private final Declaration_listRElements pDeclaration_listR;
	private final Compound_statementElements pCompound_statement;
	private final Block_item_listElements pBlock_item_list;
	private final Block_item_listRElements pBlock_item_listR;
	private final Block_itemElements pBlock_item;
	private final StatementElements pStatement;
	private final Jump_statementElements pJump_statement;
	private final Labeled_statementElements pLabeled_statement;
	private final Iteration_statementElements pIteration_statement;
	private final DeclarationElements pDeclaration;
	private final Init_declarator_listElements pInit_declarator_list;
	private final Init_declaratorElements pInit_declarator;
	private final Init_declarator_listRElements pInit_declarator_listR;
	private final Declaration_specifiersElements pDeclaration_specifiers;
	private final Selection_statementElements pSelection_statement;
	private final Expression_statementElements pExpression_statement;
	private final ExpressionElements pExpression;
	private final ExpressionRElements pExpressionR;
	private final Conditional_expressionElements pConditional_expression;
	private final Logical_or_expressionElements pLogical_or_expression;
	private final Logical_or_expressionRElements pLogical_or_expressionR;
	private final Logical_and_expressionElements pLogical_and_expression;
	private final Logical_and_expressionRElements pLogical_and_expressionR;
	private final Inclusive_or_expressionElements pInclusive_or_expression;
	private final Inclusive_or_expressionRElements pInclusive_or_expressionR;
	private final Exclusive_or_expressionElements pExclusive_or_expression;
	private final Exclusive_or_expressionRElements pExclusive_or_expressionR;
	private final And_expressionRElements pAnd_expressionR;
	private final And_expressionElements pAnd_expression;
	private final Equality_expressionElements pEquality_expression;
	private final Equality_expressionRElements pEquality_expressionR;
	private final Relational_expressionElements pRelational_expression;
	private final Relational_expressionRElements pRelational_expressionR;
	private final Shift_expressionElements pShift_expression;
	private final Shift_expressionRElements pShift_expressionR;
	private final Additive_expressionElements pAdditive_expression;
	private final Additive_expressionRElements pAdditive_expressionR;
	private final Multiplicative_expressionRElements pMultiplicative_expressionR;
	private final Multiplicative_expressionElements pMultiplicative_expression;
	private final Assignment_expressionElements pAssignment_expression;
	private final Cast_expressionElements pCast_expression;
	private final Unary_expressionElements pUnary_expression;
	private final Postfix_expressionElements pPostfix_expression;
	private final InitializerElements pInitializer;
	private final Initializer_listElements pInitializer_list;
	private final Initializer_listRElements pInitializer_listR;
	private final DesignationElements pDesignation;
	private final Designator_listElements pDesignator_list;
	private final Designator_listRElements pDesignator_listR;
	private final DesignatorElements pDesignator;
	private final Constant_expressionElements pConstant_expression;
	private final Type_nameElements pType_name;
	private final Specifier_qualifier_listElements pSpecifier_qualifier_list;
	private final Struct_declarator_listElements pStruct_declarator_list;
	private final Struct_declaration_listElements pStruct_declaration_list;
	private final Struct_declaration_listRElements pStruct_declaration_listR;
	private final Struct_declarationElements pStruct_declaration;
	private final Struct_declarator_listRElements pStruct_declarator_listR;
	private final Struct_declaratorElements pStruct_declarator;
	private final Static_assert_declarationElements pStatic_assert_declaration;
	private final Struct_or_union_specifierElements pStruct_or_union_specifier;
	private final Atomic_type_specifierElements pAtomic_type_specifier;
	private final Postfix_expressionRElements pPostfix_expressionR;
	private final Argument_expression_listElements pArgument_expression_list;
	private final Argument_expression_listRElements pArgument_expression_listR;
	private final Primary_expressionElements pPrimary_expression;
	private final PointerElements pPointer;
	private final ConstantElements pConstant;
	private final DOUBLE_NUMBERElements pDOUBLE_NUMBER;
	private final IDENTIFIERElements pIDENTIFIER;
	private final Struct_or_unionElements pStruct_or_union;
	private final Unary_operatorElements pUnary_operator;
	private final Type_specifierElements pType_specifier;
	private final Storage_class_specifierElements pStorage_class_specifier;
	private final Assignment_operatorElements pAssignment_operator;
	private final TerminalRule tDOTS;
	private final TerminalRule tMINUS;
	private final TerminalRule tPLUS;
	private final TerminalRule tCOMMA;
	private final TerminalRule tDOT_COMMA;
	private final TerminalRule tLEFT_CHAVES;
	private final TerminalRule tRIGHT_CHAVES;
	private final TerminalRule tLEFT_COCHETE;
	private final TerminalRule tRIGHT_COCHETE;
	private final TerminalRule tLEFT_PARENTESE;
	private final TerminalRule tRIGHT_PARENTESE;
	private final TerminalRule tINC_OP;
	private final TerminalRule tDEC_OP;
	private final TerminalRule tINTEGER_NUMBER;
	private final TerminalRule tSINGLE_QUOTES;
	private final TerminalRule tSTRING_C;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTranslation_unit = new Translation_unitElements();
		this.pTranslation_unitR = new Translation_unitRElements();
		this.pExternal_declaration = new External_declarationElements();
		this.pFunction_definition = new Function_definitionElements();
		this.pDeclarator = new DeclaratorElements();
		this.pType_qualifier_list = new Type_qualifier_listElements();
		this.pType_qualifier = new Type_qualifierElements();
		this.pType_qualifier_listR = new Type_qualifier_listRElements();
		this.pDirect_declarator = new Direct_declaratorElements();
		this.pDirect_declaratorR = new Direct_declaratorRElements();
		this.pParameter_type_list = new Parameter_type_listElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pIdentifier_listR = new Identifier_listRElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter_listR = new Parameter_listRElements();
		this.pParameter_declaration = new Parameter_declarationElements();
		this.pAbstract_declarator = new Abstract_declaratorElements();
		this.pDeclaration_list = new Declaration_listElements();
		this.pDeclaration_listR = new Declaration_listRElements();
		this.pCompound_statement = new Compound_statementElements();
		this.pBlock_item_list = new Block_item_listElements();
		this.pBlock_item_listR = new Block_item_listRElements();
		this.pBlock_item = new Block_itemElements();
		this.pStatement = new StatementElements();
		this.pJump_statement = new Jump_statementElements();
		this.pLabeled_statement = new Labeled_statementElements();
		this.pIteration_statement = new Iteration_statementElements();
		this.pDeclaration = new DeclarationElements();
		this.pInit_declarator_list = new Init_declarator_listElements();
		this.pInit_declarator = new Init_declaratorElements();
		this.pInit_declarator_listR = new Init_declarator_listRElements();
		this.pDeclaration_specifiers = new Declaration_specifiersElements();
		this.pSelection_statement = new Selection_statementElements();
		this.pExpression_statement = new Expression_statementElements();
		this.pExpression = new ExpressionElements();
		this.pExpressionR = new ExpressionRElements();
		this.pConditional_expression = new Conditional_expressionElements();
		this.pLogical_or_expression = new Logical_or_expressionElements();
		this.pLogical_or_expressionR = new Logical_or_expressionRElements();
		this.pLogical_and_expression = new Logical_and_expressionElements();
		this.pLogical_and_expressionR = new Logical_and_expressionRElements();
		this.pInclusive_or_expression = new Inclusive_or_expressionElements();
		this.pInclusive_or_expressionR = new Inclusive_or_expressionRElements();
		this.pExclusive_or_expression = new Exclusive_or_expressionElements();
		this.pExclusive_or_expressionR = new Exclusive_or_expressionRElements();
		this.pAnd_expressionR = new And_expressionRElements();
		this.pAnd_expression = new And_expressionElements();
		this.pEquality_expression = new Equality_expressionElements();
		this.pEquality_expressionR = new Equality_expressionRElements();
		this.pRelational_expression = new Relational_expressionElements();
		this.pRelational_expressionR = new Relational_expressionRElements();
		this.pShift_expression = new Shift_expressionElements();
		this.pShift_expressionR = new Shift_expressionRElements();
		this.pAdditive_expression = new Additive_expressionElements();
		this.pAdditive_expressionR = new Additive_expressionRElements();
		this.pMultiplicative_expressionR = new Multiplicative_expressionRElements();
		this.pMultiplicative_expression = new Multiplicative_expressionElements();
		this.pAssignment_expression = new Assignment_expressionElements();
		this.pCast_expression = new Cast_expressionElements();
		this.pUnary_expression = new Unary_expressionElements();
		this.pPostfix_expression = new Postfix_expressionElements();
		this.pInitializer = new InitializerElements();
		this.pInitializer_list = new Initializer_listElements();
		this.pInitializer_listR = new Initializer_listRElements();
		this.pDesignation = new DesignationElements();
		this.pDesignator_list = new Designator_listElements();
		this.pDesignator_listR = new Designator_listRElements();
		this.pDesignator = new DesignatorElements();
		this.pConstant_expression = new Constant_expressionElements();
		this.pType_name = new Type_nameElements();
		this.pSpecifier_qualifier_list = new Specifier_qualifier_listElements();
		this.pStruct_declarator_list = new Struct_declarator_listElements();
		this.pStruct_declaration_list = new Struct_declaration_listElements();
		this.pStruct_declaration_listR = new Struct_declaration_listRElements();
		this.pStruct_declaration = new Struct_declarationElements();
		this.pStruct_declarator_listR = new Struct_declarator_listRElements();
		this.pStruct_declarator = new Struct_declaratorElements();
		this.pStatic_assert_declaration = new Static_assert_declarationElements();
		this.pStruct_or_union_specifier = new Struct_or_union_specifierElements();
		this.pAtomic_type_specifier = new Atomic_type_specifierElements();
		this.pPostfix_expressionR = new Postfix_expressionRElements();
		this.pArgument_expression_list = new Argument_expression_listElements();
		this.pArgument_expression_listR = new Argument_expression_listRElements();
		this.pPrimary_expression = new Primary_expressionElements();
		this.pPointer = new PointerElements();
		this.pConstant = new ConstantElements();
		this.pDOUBLE_NUMBER = new DOUBLE_NUMBERElements();
		this.pIDENTIFIER = new IDENTIFIERElements();
		this.pStruct_or_union = new Struct_or_unionElements();
		this.pUnary_operator = new Unary_operatorElements();
		this.pType_specifier = new Type_specifierElements();
		this.pStorage_class_specifier = new Storage_class_specifierElements();
		this.pAssignment_operator = new Assignment_operatorElements();
		this.tDOTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOTS");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MINUS");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PLUS");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.COMMA");
		this.tDOT_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOT_COMMA");
		this.tLEFT_CHAVES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT_CHAVES");
		this.tRIGHT_CHAVES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT_CHAVES");
		this.tLEFT_COCHETE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT_COCHETE");
		this.tRIGHT_COCHETE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT_COCHETE");
		this.tLEFT_PARENTESE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT_PARENTESE");
		this.tRIGHT_PARENTESE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT_PARENTESE");
		this.tINC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INC_OP");
		this.tDEC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DEC_OP");
		this.tINTEGER_NUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTEGER_NUMBER");
		this.tSINGLE_QUOTES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SINGLE_QUOTES");
		this.tSTRING_C = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING_C");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=translation_unit*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//translation_unit:
	//	External_declaration=external_declaration Translation_unitR=translation_unitR?;
	public Translation_unitElements getTranslation_unitAccess() {
		return pTranslation_unit;
	}
	
	public ParserRule getTranslation_unitRule() {
		return getTranslation_unitAccess().getRule();
	}
	
	//translation_unitR:
	//	External_declaration=external_declaration rec+=translation_unitR*;
	public Translation_unitRElements getTranslation_unitRAccess() {
		return pTranslation_unitR;
	}
	
	public ParserRule getTranslation_unitRRule() {
		return getTranslation_unitRAccess().getRule();
	}
	
	//external_declaration:
	//	function_definition
	//	| declaration;
	public External_declarationElements getExternal_declarationAccess() {
		return pExternal_declaration;
	}
	
	public ParserRule getExternal_declarationRule() {
		return getExternal_declarationAccess().getRule();
	}
	
	//function_definition:
	//	Declaration_specifiers=declaration_specifiers Declarator=declarator Declaration_list=declaration_list
	//	Compound_statement=compound_statement
	//	| Declaration_specifiers=declaration_specifiers Declarator=declarator Compound_statement=compound_statement;
	public Function_definitionElements getFunction_definitionAccess() {
		return pFunction_definition;
	}
	
	public ParserRule getFunction_definitionRule() {
		return getFunction_definitionAccess().getRule();
	}
	
	//declarator:
	//	Pointer=pointer dd=direct_declarator
	//	| direct_declarator;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//type_qualifier_list:
	//	Type_qualifier=type_qualifier Type_qualifier_listR=type_qualifier_listR?;
	public Type_qualifier_listElements getType_qualifier_listAccess() {
		return pType_qualifier_list;
	}
	
	public ParserRule getType_qualifier_listRule() {
		return getType_qualifier_listAccess().getRule();
	}
	
	//type_qualifier:
	//	'CONST'
	//	| 'RESTRICT'
	//	| 'VOLATILE'
	//	| 'ATOMIC';
	public Type_qualifierElements getType_qualifierAccess() {
		return pType_qualifier;
	}
	
	public ParserRule getType_qualifierRule() {
		return getType_qualifierAccess().getRule();
	}
	
	//type_qualifier_listR:
	//	Type_qualifier=type_qualifier rec+=type_qualifier_listR*;
	public Type_qualifier_listRElements getType_qualifier_listRAccess() {
		return pType_qualifier_listR;
	}
	
	public ParserRule getType_qualifier_listRRule() {
		return getType_qualifier_listRAccess().getRule();
	}
	
	//direct_declarator:
	//	IDENTIFIER dr=direct_declaratorR?
	//	| LEFT_PARENTESE Declarator=declarator RIGHT_PARENTESE Direct_declaratorR=direct_declaratorR?;
	public Direct_declaratorElements getDirect_declaratorAccess() {
		return pDirect_declarator;
	}
	
	public ParserRule getDirect_declaratorRule() {
		return getDirect_declaratorAccess().getRule();
	}
	
	//direct_declaratorR:
	//	LEFT_COCHETE RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_COCHETE '*' RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_COCHETE '_Static_assert' Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression
	//	RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_COCHETE '_Static_assert' Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list '*' RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list '_Static_assert' Assignment_expression=assignment_expression
	//	RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list Assignment_expression=assignment_expression RIGHT_COCHETE
	//	rec+=direct_declaratorR*
	//	| LEFT_COCHETE Type_qualifier_list=type_qualifier_list RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_COCHETE Assignment_expression=assignment_expression RIGHT_COCHETE rec+=direct_declaratorR*
	//	| LEFT_PARENTESE Parameter_type_list=parameter_type_list RIGHT_PARENTESE rec+=direct_declaratorR*
	//	| LEFT_PARENTESE RIGHT_PARENTESE rec+=direct_declaratorR*
	//	| LEFT_PARENTESE Identifier_list=identifier_list RIGHT_PARENTESE rec+=direct_declaratorR*;
	public Direct_declaratorRElements getDirect_declaratorRAccess() {
		return pDirect_declaratorR;
	}
	
	public ParserRule getDirect_declaratorRRule() {
		return getDirect_declaratorRAccess().getRule();
	}
	
	//parameter_type_list:
	//	parameter_list COMMA '...'
	//	| parameter_list;
	public Parameter_type_listElements getParameter_type_listAccess() {
		return pParameter_type_list;
	}
	
	public ParserRule getParameter_type_listRule() {
		return getParameter_type_listAccess().getRule();
	}
	
	//identifier_list:
	//	IDENTIFIER il=identifier_listR?;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}
	
	//identifier_listR:
	//	COMMA IDENTIFIER rec+=identifier_listR*;
	public Identifier_listRElements getIdentifier_listRAccess() {
		return pIdentifier_listR;
	}
	
	public ParserRule getIdentifier_listRRule() {
		return getIdentifier_listRAccess().getRule();
	}
	
	//parameter_list:
	//	Parameter_declaration=parameter_declaration Parameter_listR=parameter_listR?;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}
	
	//parameter_listR:
	//	COMMA Parameter_declaration=parameter_declaration rec+=parameter_listR*;
	public Parameter_listRElements getParameter_listRAccess() {
		return pParameter_listR;
	}
	
	public ParserRule getParameter_listRRule() {
		return getParameter_listRAccess().getRule();
	}
	
	//parameter_declaration:
	//	Declaration_specifiers2=declaration_specifiers Declarator1=declarator
	//	| Declaration_specifiers1=declaration_specifiers Abstract_declarator=abstract_declarator
	//	| declaration_specifiers;
	public Parameter_declarationElements getParameter_declarationAccess() {
		return pParameter_declaration;
	}
	
	public ParserRule getParameter_declarationRule() {
		return getParameter_declarationAccess().getRule();
	}
	
	//abstract_declarator //:Pointer=pointer Direct_abstract_declarator=direct_abstract_declarator 
	//:
	//	pointer
	//	//|direct_abstract_declarator 
	//;
	public Abstract_declaratorElements getAbstract_declaratorAccess() {
		return pAbstract_declarator;
	}
	
	public ParserRule getAbstract_declaratorRule() {
		return getAbstract_declaratorAccess().getRule();
	}
	
	//declaration_list:
	//	Declaration=declaration Declaration_listR=declaration_listR?;
	public Declaration_listElements getDeclaration_listAccess() {
		return pDeclaration_list;
	}
	
	public ParserRule getDeclaration_listRule() {
		return getDeclaration_listAccess().getRule();
	}
	
	//declaration_listR:
	//	Declaration=declaration rec+=declaration_listR*;
	public Declaration_listRElements getDeclaration_listRAccess() {
		return pDeclaration_listR;
	}
	
	public ParserRule getDeclaration_listRRule() {
		return getDeclaration_listRAccess().getRule();
	}
	
	//compound_statement:
	//	LEFT_CHAVES RIGHT_CHAVES
	//	| LEFT_CHAVES block_item_list RIGHT_CHAVES;
	public Compound_statementElements getCompound_statementAccess() {
		return pCompound_statement;
	}
	
	public ParserRule getCompound_statementRule() {
		return getCompound_statementAccess().getRule();
	}
	
	//block_item_list:
	//	Block_item=block_item Block_item_listR=block_item_listR?;
	public Block_item_listElements getBlock_item_listAccess() {
		return pBlock_item_list;
	}
	
	public ParserRule getBlock_item_listRule() {
		return getBlock_item_listAccess().getRule();
	}
	
	//block_item_listR:
	//	Block_item=block_item rec+=block_item_listR*;
	public Block_item_listRElements getBlock_item_listRAccess() {
		return pBlock_item_listR;
	}
	
	public ParserRule getBlock_item_listRRule() {
		return getBlock_item_listRAccess().getRule();
	}
	
	//block_item:
	//	declaration
	//	| statement;
	public Block_itemElements getBlock_itemAccess() {
		return pBlock_item;
	}
	
	public ParserRule getBlock_itemRule() {
		return getBlock_itemAccess().getRule();
	}
	
	//statement:
	//	labeled_statement
	//	| compound_statement
	//	| expression_statement
	//	| selection_statement
	//	| iteration_statement
	//	| jump_statement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//jump_statement:
	//	'GOTO' IDENTIFIER DOT_COMMA
	//	| 'CONTINUE' DOT_COMMA
	//	| 'BREAK' DOT_COMMA
	//	| 'return' DOT_COMMA
	//	| 'return' expression DOT_COMMA;
	public Jump_statementElements getJump_statementAccess() {
		return pJump_statement;
	}
	
	public ParserRule getJump_statementRule() {
		return getJump_statementAccess().getRule();
	}
	
	//labeled_statement:
	//	IDENTIFIER DOTS a=statement
	//	| 'CASE' Constant_expression=constant_expression DOTS Statement=statement
	//	| 'DEFAULT' DOTS b=statement;
	public Labeled_statementElements getLabeled_statementAccess() {
		return pLabeled_statement;
	}
	
	public ParserRule getLabeled_statementRule() {
		return getLabeled_statementAccess().getRule();
	}
	
	//iteration_statement:
	//	'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement
	//	| 'do' Statement=statement 'while' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE DOT_COMMA
	//	| 'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement
	//	RIGHT_PARENTESE Statement=statement
	//	| 'for' LEFT_PARENTESE Expression_statement=expression_statement Expression_statement=expression_statement
	//	Expression=expression RIGHT_PARENTESE Statement=statement
	//	| 'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement RIGHT_PARENTESE
	//	Statement=statement
	//	| 'for' LEFT_PARENTESE Declaration=declaration Expression_statement=expression_statement Expression=expression
	//	RIGHT_PARENTESE Statement=statement;
	public Iteration_statementElements getIteration_statementAccess() {
		return pIteration_statement;
	}
	
	public ParserRule getIteration_statementRule() {
		return getIteration_statementAccess().getRule();
	}
	
	//declaration:
	//	Declaration_specifiers=declaration_specifiers Init_declarator_list=init_declarator_list DOT_COMMA
	//	| static_assert_declaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//init_declarator_list:
	//	Init_declarator=init_declarator Init_declarator_listR=init_declarator_listR?;
	public Init_declarator_listElements getInit_declarator_listAccess() {
		return pInit_declarator_list;
	}
	
	public ParserRule getInit_declarator_listRule() {
		return getInit_declarator_listAccess().getRule();
	}
	
	//init_declarator:
	//	Declarator=declarator '=' Initializer=initializer
	//	| declarator;
	public Init_declaratorElements getInit_declaratorAccess() {
		return pInit_declarator;
	}
	
	public ParserRule getInit_declaratorRule() {
		return getInit_declaratorAccess().getRule();
	}
	
	//init_declarator_listR:
	//	COMMA Init_declarator=init_declarator rec+=init_declarator_listR*;
	public Init_declarator_listRElements getInit_declarator_listRAccess() {
		return pInit_declarator_listR;
	}
	
	public ParserRule getInit_declarator_listRRule() {
		return getInit_declarator_listRAccess().getRule();
	}
	
	//declaration_specifiers:
	//	Storage_class_specifier=storage_class_specifier r1+=declaration_specifiers*
	//	| storage_class_specifier
	//	| type_specifier ds=declaration_specifiers
	//	| type_specifier
	//	| Type_qualifier=type_qualifier r2+=declaration_specifiers*
	//	| type_qualifier;
	public Declaration_specifiersElements getDeclaration_specifiersAccess() {
		return pDeclaration_specifiers;
	}
	
	public ParserRule getDeclaration_specifiersRule() {
		return getDeclaration_specifiersAccess().getRule();
	}
	
	//selection_statement:
	//	'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement 'else' Statement=statement
	//	| 'if' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement
	//	| 'SWITCH' LEFT_PARENTESE Expression=expression RIGHT_PARENTESE Statement=statement;
	public Selection_statementElements getSelection_statementAccess() {
		return pSelection_statement;
	}
	
	public ParserRule getSelection_statementRule() {
		return getSelection_statementAccess().getRule();
	}
	
	//expression_statement:
	//	DOT_COMMA
	//	| expression DOT_COMMA;
	public Expression_statementElements getExpression_statementAccess() {
		return pExpression_statement;
	}
	
	public ParserRule getExpression_statementRule() {
		return getExpression_statementAccess().getRule();
	}
	
	//expression:
	//	Assignment_expression=assignment_expression ExpressionR=expressionR?;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//expressionR:
	//	COMMA Assignment_expression=assignment_expression rec+=expressionR*;
	public ExpressionRElements getExpressionRAccess() {
		return pExpressionR;
	}
	
	public ParserRule getExpressionRRule() {
		return getExpressionRAccess().getRule();
	}
	
	////L-01
	//conditional_expression:
	//	logical_or_expression
	//	| Logical_or_expression=logical_or_expression '?' Expression=expression DOTS rec+=conditional_expression*;
	public Conditional_expressionElements getConditional_expressionAccess() {
		return pConditional_expression;
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}
	
	////L-02
	//logical_or_expression:
	//	Logical_and_expression=logical_and_expression Logical_or_expressionR=logical_or_expressionR?;
	public Logical_or_expressionElements getLogical_or_expressionAccess() {
		return pLogical_or_expression;
	}
	
	public ParserRule getLogical_or_expressionRule() {
		return getLogical_or_expressionAccess().getRule();
	}
	
	//logical_or_expressionR:
	//	'||' Logical_and_expression=logical_and_expression rec+=logical_or_expressionR*;
	public Logical_or_expressionRElements getLogical_or_expressionRAccess() {
		return pLogical_or_expressionR;
	}
	
	public ParserRule getLogical_or_expressionRRule() {
		return getLogical_or_expressionRAccess().getRule();
	}
	
	////L-03
	//logical_and_expression:
	//	Inclusive_or_expression=inclusive_or_expression Logical_and_expressionR=logical_and_expressionR?;
	public Logical_and_expressionElements getLogical_and_expressionAccess() {
		return pLogical_and_expression;
	}
	
	public ParserRule getLogical_and_expressionRule() {
		return getLogical_and_expressionAccess().getRule();
	}
	
	//logical_and_expressionR:
	//	'&&' Inclusive_or_expression=inclusive_or_expression rec+=logical_and_expressionR*;
	public Logical_and_expressionRElements getLogical_and_expressionRAccess() {
		return pLogical_and_expressionR;
	}
	
	public ParserRule getLogical_and_expressionRRule() {
		return getLogical_and_expressionRAccess().getRule();
	}
	
	////L-04
	//inclusive_or_expression:
	//	Exclusive_or_expression=exclusive_or_expression Inclusive_or_expressionR=inclusive_or_expressionR?;
	public Inclusive_or_expressionElements getInclusive_or_expressionAccess() {
		return pInclusive_or_expression;
	}
	
	public ParserRule getInclusive_or_expressionRule() {
		return getInclusive_or_expressionAccess().getRule();
	}
	
	//inclusive_or_expressionR:
	//	'|' Exclusive_or_expression=exclusive_or_expression rec+=inclusive_or_expressionR*;
	public Inclusive_or_expressionRElements getInclusive_or_expressionRAccess() {
		return pInclusive_or_expressionR;
	}
	
	public ParserRule getInclusive_or_expressionRRule() {
		return getInclusive_or_expressionRAccess().getRule();
	}
	
	////L-05
	//exclusive_or_expression:
	//	And_expression=and_expression Exclusive_or_expressionR=exclusive_or_expressionR?;
	public Exclusive_or_expressionElements getExclusive_or_expressionAccess() {
		return pExclusive_or_expression;
	}
	
	public ParserRule getExclusive_or_expressionRule() {
		return getExclusive_or_expressionAccess().getRule();
	}
	
	//exclusive_or_expressionR:
	//	'^' And_expression=and_expression rec+=exclusive_or_expressionR*;
	public Exclusive_or_expressionRElements getExclusive_or_expressionRAccess() {
		return pExclusive_or_expressionR;
	}
	
	public ParserRule getExclusive_or_expressionRRule() {
		return getExclusive_or_expressionRAccess().getRule();
	}
	
	//and_expressionR:
	//	'&' Equality_expression=equality_expression rec+=and_expressionR*;
	public And_expressionRElements getAnd_expressionRAccess() {
		return pAnd_expressionR;
	}
	
	public ParserRule getAnd_expressionRRule() {
		return getAnd_expressionRAccess().getRule();
	}
	
	////L-07
	//and_expression:
	//	Equality_expression=equality_expression And_expressionR=and_expressionR?;
	public And_expressionElements getAnd_expressionAccess() {
		return pAnd_expression;
	}
	
	public ParserRule getAnd_expressionRule() {
		return getAnd_expressionAccess().getRule();
	}
	
	////L-08
	//equality_expression:
	//	Relational_expression=relational_expression Equality_expressionR=equality_expressionR?;
	public Equality_expressionElements getEquality_expressionAccess() {
		return pEquality_expression;
	}
	
	public ParserRule getEquality_expressionRule() {
		return getEquality_expressionAccess().getRule();
	}
	
	//equality_expressionR:
	//	'==' Relational_expression=relational_expression rec+=equality_expressionR*
	//	| '!=' Relational_expression=relational_expression rec+=equality_expressionR*;
	public Equality_expressionRElements getEquality_expressionRAccess() {
		return pEquality_expressionR;
	}
	
	public ParserRule getEquality_expressionRRule() {
		return getEquality_expressionRAccess().getRule();
	}
	
	////L-09
	//relational_expression:
	//	Shift_expression=shift_expression re=relational_expressionR?;
	public Relational_expressionElements getRelational_expressionAccess() {
		return pRelational_expression;
	}
	
	public ParserRule getRelational_expressionRule() {
		return getRelational_expressionAccess().getRule();
	}
	
	//relational_expressionR:
	//	'<' Shift_expression=shift_expression rec+=relational_expressionR*
	//	| '>' Shift_expression=shift_expression rec+=relational_expressionR*
	//	| '<=' Shift_expression=shift_expression rec+=relational_expressionR*
	//	| '>=' Shift_expression=shift_expression rec+=relational_expressionR*;
	public Relational_expressionRElements getRelational_expressionRAccess() {
		return pRelational_expressionR;
	}
	
	public ParserRule getRelational_expressionRRule() {
		return getRelational_expressionRAccess().getRule();
	}
	
	////L-10
	//shift_expression:
	//	additive_expression Shift_expressionR=shift_expressionR?;
	public Shift_expressionElements getShift_expressionAccess() {
		return pShift_expression;
	}
	
	public ParserRule getShift_expressionRule() {
		return getShift_expressionAccess().getRule();
	}
	
	//shift_expressionR:
	//	'<<' Additive_expression=additive_expression rec+=shift_expressionR*
	//	| '>>' Additive_expression=additive_expression rec+=shift_expressionR*;
	public Shift_expressionRElements getShift_expressionRAccess() {
		return pShift_expressionR;
	}
	
	public ParserRule getShift_expressionRRule() {
		return getShift_expressionRAccess().getRule();
	}
	
	////L-11
	//additive_expression:
	//	Multiplicative_expression=multiplicative_expression Additive_expressionR=additive_expressionR?;
	public Additive_expressionElements getAdditive_expressionAccess() {
		return pAdditive_expression;
	}
	
	public ParserRule getAdditive_expressionRule() {
		return getAdditive_expressionAccess().getRule();
	}
	
	//additive_expressionR:
	//	PLUS Multiplicative_expression=multiplicative_expression rec+=additive_expressionR*
	//	| MINUS Multiplicative_expression=multiplicative_expression rec+=additive_expressionR*;
	public Additive_expressionRElements getAdditive_expressionRAccess() {
		return pAdditive_expressionR;
	}
	
	public ParserRule getAdditive_expressionRRule() {
		return getAdditive_expressionRAccess().getRule();
	}
	
	//multiplicative_expressionR:
	//	'*' Cast_expression=cast_expression rec+=multiplicative_expressionR*
	//	| '/' Cast_expression=cast_expression rec+=multiplicative_expressionR*
	//	| '%' Cast_expression=cast_expression rec+=multiplicative_expressionR*;
	public Multiplicative_expressionRElements getMultiplicative_expressionRAccess() {
		return pMultiplicative_expressionR;
	}
	
	public ParserRule getMultiplicative_expressionRRule() {
		return getMultiplicative_expressionRAccess().getRule();
	}
	
	////L-12
	//multiplicative_expression:
	//	Cast_expression=cast_expression Multiplicative_expressionR=multiplicative_expressionR?;
	public Multiplicative_expressionElements getMultiplicative_expressionAccess() {
		return pMultiplicative_expression;
	}
	
	public ParserRule getMultiplicative_expressionRule() {
		return getMultiplicative_expressionAccess().getRule();
	}
	
	//assignment_expression:
	//	conditional_expression
	//	| Unary_expression=unary_expression Assignment_operator=assignment_operator rec+=assignment_expression*;
	public Assignment_expressionElements getAssignment_expressionAccess() {
		return pAssignment_expression;
	}
	
	public ParserRule getAssignment_expressionRule() {
		return getAssignment_expressionAccess().getRule();
	}
	
	//cast_expression:
	//	unary_expression
	//	| LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE rec+=cast_expression*;
	public Cast_expressionElements getCast_expressionAccess() {
		return pCast_expression;
	}
	
	public ParserRule getCast_expressionRule() {
		return getCast_expressionAccess().getRule();
	}
	
	//unary_expression:
	//	postfix_expression
	//	| INC_OP rec+=unary_expression*
	//	| DEC_OP rec+=unary_expression*
	//	| Unary_operator=unary_operator ce=cast_expression;
	public Unary_expressionElements getUnary_expressionAccess() {
		return pUnary_expression;
	}
	
	public ParserRule getUnary_expressionRule() {
		return getUnary_expressionAccess().getRule();
	}
	
	//postfix_expression:
	//	Primary_expression=primary_expression Postfix_expressionR=postfix_expressionR?
	//	| LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list RIGHT_CHAVES
	//	Postfix_expressionR=postfix_expressionR?
	//	| LEFT_PARENTESE Type_name=type_name RIGHT_PARENTESE LEFT_CHAVES Initializer_list=initializer_list COMMA RIGHT_CHAVES
	//	Postfix_expressionR=postfix_expressionR?;
	public Postfix_expressionElements getPostfix_expressionAccess() {
		return pPostfix_expression;
	}
	
	public ParserRule getPostfix_expressionRule() {
		return getPostfix_expressionAccess().getRule();
	}
	
	//initializer:
	//	LEFT_CHAVES initializer_list RIGHT_CHAVES
	//	| LEFT_CHAVES initializer_list COMMA RIGHT_CHAVES
	//	| assignment_expression;
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//initializer_list:
	//	Designation=designation Initializer=initializer il=initializer_listR?
	//	| Initializer=initializer ilr=initializer_listR?;
	public Initializer_listElements getInitializer_listAccess() {
		return pInitializer_list;
	}
	
	public ParserRule getInitializer_listRule() {
		return getInitializer_listAccess().getRule();
	}
	
	//initializer_listR:
	//	COMMA Designation=designation Initializer=initializer rec+=initializer_listR*
	//	| COMMA Initializer=initializer rec+=initializer_listR*;
	public Initializer_listRElements getInitializer_listRAccess() {
		return pInitializer_listR;
	}
	
	public ParserRule getInitializer_listRRule() {
		return getInitializer_listRAccess().getRule();
	}
	
	//designation:
	//	designator_list '=';
	public DesignationElements getDesignationAccess() {
		return pDesignation;
	}
	
	public ParserRule getDesignationRule() {
		return getDesignationAccess().getRule();
	}
	
	//designator_list:
	//	Designator=designator DesignatorR=designator_listR?;
	public Designator_listElements getDesignator_listAccess() {
		return pDesignator_list;
	}
	
	public ParserRule getDesignator_listRule() {
		return getDesignator_listAccess().getRule();
	}
	
	//designator_listR:
	//	Designator=designator rec+=designator_listR*;
	public Designator_listRElements getDesignator_listRAccess() {
		return pDesignator_listR;
	}
	
	public ParserRule getDesignator_listRRule() {
		return getDesignator_listRAccess().getRule();
	}
	
	//designator:
	//	LEFT_COCHETE constant_expression RIGHT_COCHETE
	//	| '.' IDENTIFIER;
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	//constant_expression:
	//	conditional_expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}
	
	//type_name:
	//	Specifier_qualifier_list=specifier_qualifier_list ad=abstract_declarator
	//	| specifier_qualifier_list;
	public Type_nameElements getType_nameAccess() {
		return pType_name;
	}
	
	public ParserRule getType_nameRule() {
		return getType_nameAccess().getRule();
	}
	
	//specifier_qualifier_list:
	//	Type_specifier=type_specifier rec+=specifier_qualifier_list*
	//	| type_qualifier;
	public Specifier_qualifier_listElements getSpecifier_qualifier_listAccess() {
		return pSpecifier_qualifier_list;
	}
	
	public ParserRule getSpecifier_qualifier_listRule() {
		return getSpecifier_qualifier_listAccess().getRule();
	}
	
	//struct_declarator_list:
	//	Struct_declarator=struct_declarator Struct_declarator_listR=struct_declarator_listR?;
	public Struct_declarator_listElements getStruct_declarator_listAccess() {
		return pStruct_declarator_list;
	}
	
	public ParserRule getStruct_declarator_listRule() {
		return getStruct_declarator_listAccess().getRule();
	}
	
	//struct_declaration_list:
	//	Struct_declaration=struct_declaration Struct_declaration_listR=struct_declaration_listR?;
	public Struct_declaration_listElements getStruct_declaration_listAccess() {
		return pStruct_declaration_list;
	}
	
	public ParserRule getStruct_declaration_listRule() {
		return getStruct_declaration_listAccess().getRule();
	}
	
	//struct_declaration_listR:
	//	Struct_declaration=struct_declaration rec+=struct_declaration_listR*;
	public Struct_declaration_listRElements getStruct_declaration_listRAccess() {
		return pStruct_declaration_listR;
	}
	
	public ParserRule getStruct_declaration_listRRule() {
		return getStruct_declaration_listRAccess().getRule();
	}
	
	//struct_declaration:
	//	specifier_qualifier_list DOT_COMMA
	//	| Specifier_qualifier_listx=specifier_qualifier_list Struct_declarator_list=struct_declarator_list DOT_COMMA
	//	| static_assert_declaration;
	public Struct_declarationElements getStruct_declarationAccess() {
		return pStruct_declaration;
	}
	
	public ParserRule getStruct_declarationRule() {
		return getStruct_declarationAccess().getRule();
	}
	
	//struct_declarator_listR:
	//	COMMA Struct_declarator=struct_declarator rec+=struct_declarator_listR*;
	public Struct_declarator_listRElements getStruct_declarator_listRAccess() {
		return pStruct_declarator_listR;
	}
	
	public ParserRule getStruct_declarator_listRRule() {
		return getStruct_declarator_listRAccess().getRule();
	}
	
	//struct_declarator:
	//	DOTS constant_expression
	//	| Declaratorx=declarator DOTS Constant_expression1=constant_expression
	//	| declarator;
	public Struct_declaratorElements getStruct_declaratorAccess() {
		return pStruct_declarator;
	}
	
	public ParserRule getStruct_declaratorRule() {
		return getStruct_declaratorAccess().getRule();
	}
	
	//static_assert_declaration:
	//	'STATIC_ASSERT' LEFT_PARENTESE constant_expression COMMA 'STRING_LITERAL' RIGHT_PARENTESE DOT_COMMA;
	public Static_assert_declarationElements getStatic_assert_declarationAccess() {
		return pStatic_assert_declaration;
	}
	
	public ParserRule getStatic_assert_declarationRule() {
		return getStatic_assert_declarationAccess().getRule();
	}
	
	//struct_or_union_specifier:
	//	Struct_or_union=struct_or_union LEFT_CHAVES Struct_declaration_list=struct_declaration_list RIGHT_CHAVES
	//	| Struct_or_union=struct_or_union id=IDENTIFIER LEFT_CHAVES Struct_declaration_list=struct_declaration_list
	//	RIGHT_CHAVES
	//	| struct_or_union IDENTIFIER;
	public Struct_or_union_specifierElements getStruct_or_union_specifierAccess() {
		return pStruct_or_union_specifier;
	}
	
	public ParserRule getStruct_or_union_specifierRule() {
		return getStruct_or_union_specifierAccess().getRule();
	}
	
	//atomic_type_specifier:
	//	'ATOMIC' LEFT_PARENTESE type_name RIGHT_PARENTESE;
	public Atomic_type_specifierElements getAtomic_type_specifierAccess() {
		return pAtomic_type_specifier;
	}
	
	public ParserRule getAtomic_type_specifierRule() {
		return getAtomic_type_specifierAccess().getRule();
	}
	
	//postfix_expressionR:
	//	LEFT_COCHETE Expression=expression RIGHT_COCHETE rec+=postfix_expressionR*
	//	| LEFT_PARENTESE RIGHT_PARENTESE rec+=postfix_expressionR*
	//	| LEFT_PARENTESE Argument_expression_list=argument_expression_list RIGHT_PARENTESE rec+=postfix_expressionR*
	//	| '.' IDENTIFIER rec+=postfix_expressionR*
	//	| '->' IDENTIFIER rec+=postfix_expressionR*
	//	| INC_OP rec+=postfix_expressionR*
	//	| DEC_OP rec+=postfix_expressionR*;
	public Postfix_expressionRElements getPostfix_expressionRAccess() {
		return pPostfix_expressionR;
	}
	
	public ParserRule getPostfix_expressionRRule() {
		return getPostfix_expressionRAccess().getRule();
	}
	
	//argument_expression_list:
	//	Assignment_expression=assignment_expression Argument_expression_listR=argument_expression_listR?;
	public Argument_expression_listElements getArgument_expression_listAccess() {
		return pArgument_expression_list;
	}
	
	public ParserRule getArgument_expression_listRule() {
		return getArgument_expression_listAccess().getRule();
	}
	
	//argument_expression_listR:
	//	COMMA Assignment_expression=assignment_expression rec+=argument_expression_listR*;
	public Argument_expression_listRElements getArgument_expression_listRAccess() {
		return pArgument_expression_listR;
	}
	
	public ParserRule getArgument_expression_listRRule() {
		return getArgument_expression_listRAccess().getRule();
	}
	
	//primary_expression:
	//	IDENTIFIER
	//	| constant
	//	| LEFT_PARENTESE expression RIGHT_PARENTESE
	//	| {StringC} string=STRING_C;
	public Primary_expressionElements getPrimary_expressionAccess() {
		return pPrimary_expression;
	}
	
	public ParserRule getPrimary_expressionRule() {
		return getPrimary_expressionAccess().getRule();
	}
	
	//pointer:
	//	'*' Type_qualifier_list=type_qualifier_list rec+=pointer*
	//	| '*' type_qualifier_list
	//	| '*' rec+=pointer*
	//	| '*';
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//constant:
	//	INTEGER_NUMBER
	//	| DOUBLE_NUMBER;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//DOUBLE_NUMBER:
	//	INTEGER_NUMBER '.' INTEGER_NUMBER;
	public DOUBLE_NUMBERElements getDOUBLE_NUMBERAccess() {
		return pDOUBLE_NUMBER;
	}
	
	public ParserRule getDOUBLE_NUMBERRule() {
		return getDOUBLE_NUMBERAccess().getRule();
	}
	
	////#------------------------TABLE SYMBOLS-----------------------------
	//IDENTIFIER:
	//	name=ID;
	public IDENTIFIERElements getIDENTIFIERAccess() {
		return pIDENTIFIER;
	}
	
	public ParserRule getIDENTIFIERRule() {
		return getIDENTIFIERAccess().getRule();
	}
	
	//struct_or_union:
	//	'STRUCT'
	//	| 'UNION';
	public Struct_or_unionElements getStruct_or_unionAccess() {
		return pStruct_or_union;
	}
	
	public ParserRule getStruct_or_unionRule() {
		return getStruct_or_unionAccess().getRule();
	}
	
	//unary_operator:
	//	'&'
	//	| '*'
	//	| PLUS
	//	| MINUS
	//	| '~'
	//	| '!';
	public Unary_operatorElements getUnary_operatorAccess() {
		return pUnary_operator;
	}
	
	public ParserRule getUnary_operatorRule() {
		return getUnary_operatorAccess().getRule();
	}
	
	//type_specifier:
	//	'void'
	//	| 'char'
	//	| 'short'
	//	| 'int'
	//	| 'long'
	//	| 'float'
	//	| 'double'
	//	| 'SIGNED'
	//	| 'UNSIGNED'
	//	| 'BOOL'
	//	| 'COMPLEX'
	//	| 'IMAGINARY'
	//	| struct_or_union_specifier
	//	| atomic_type_specifier
	//	| 'TYPEDEF_NAME';
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}
	
	//storage_class_specifier:
	//	'TYPEDEF'
	//	| 'EXTERN'
	//	| 'STATIC'
	//	| 'THREAD_LOCAL'
	//	| 'AUTO'
	//	| 'REGISTER';
	public Storage_class_specifierElements getStorage_class_specifierAccess() {
		return pStorage_class_specifier;
	}
	
	public ParserRule getStorage_class_specifierRule() {
		return getStorage_class_specifierAccess().getRule();
	}
	
	//assignment_operator:
	//	'='
	//	| '*='
	//	| '/='
	//	| '%='
	//	| '+='
	//	| '-='
	//	| '<<='
	//	| '>>='
	//	| '&='
	//	| '^='
	//	| '|=';
	public Assignment_operatorElements getAssignment_operatorAccess() {
		return pAssignment_operator;
	}
	
	public ParserRule getAssignment_operatorRule() {
		return getAssignment_operatorAccess().getRule();
	}
	
	//terminal DOTS:
	//	':';
	public TerminalRule getDOTSRule() {
		return tDOTS;
	}
	
	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	}
	
	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal DOT_COMMA:
	//	';';
	public TerminalRule getDOT_COMMARule() {
		return tDOT_COMMA;
	}
	
	//terminal LEFT_CHAVES:
	//	'{';
	public TerminalRule getLEFT_CHAVESRule() {
		return tLEFT_CHAVES;
	}
	
	//terminal RIGHT_CHAVES:
	//	'}';
	public TerminalRule getRIGHT_CHAVESRule() {
		return tRIGHT_CHAVES;
	}
	
	//terminal LEFT_COCHETE:
	//	'[';
	public TerminalRule getLEFT_COCHETERule() {
		return tLEFT_COCHETE;
	}
	
	//terminal RIGHT_COCHETE:
	//	']';
	public TerminalRule getRIGHT_COCHETERule() {
		return tRIGHT_COCHETE;
	}
	
	//terminal LEFT_PARENTESE:
	//	'(';
	public TerminalRule getLEFT_PARENTESERule() {
		return tLEFT_PARENTESE;
	}
	
	//terminal RIGHT_PARENTESE:
	//	')';
	public TerminalRule getRIGHT_PARENTESERule() {
		return tRIGHT_PARENTESE;
	}
	
	//terminal INC_OP:
	//	'++';
	public TerminalRule getINC_OPRule() {
		return tINC_OP;
	}
	
	//terminal DEC_OP:
	//	'--';
	public TerminalRule getDEC_OPRule() {
		return tDEC_OP;
	}
	
	//terminal INTEGER_NUMBER:
	//	'0'..'9'*;
	public TerminalRule getINTEGER_NUMBERRule() {
		return tINTEGER_NUMBER;
	}
	
	//terminal fragment SINGLE_QUOTES:
	//	"'";
	public TerminalRule getSINGLE_QUOTESRule() {
		return tSINGLE_QUOTES;
	}
	
	//terminal STRING_C:
	//	SINGLE_QUOTES (!"'" | "''")* SINGLE_QUOTES;
	public TerminalRule getSTRING_CRule() {
		return tSTRING_C;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
