/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_declaration_specifiers_Storage_class_specifierParserRuleCall_1_or_Type_qualifierParserRuleCall_5;
	protected AbstractElementAlias match_direct_declaratorR___LEFT_COCHETETerminalRuleCall_0_0_RIGHT_COCHETETerminalRuleCall_0_1___or___LEFT_COCHETETerminalRuleCall_1_0_AsteriskKeyword_1_1_RIGHT_COCHETETerminalRuleCall_1_2___or___LEFT_PARENTESETerminalRuleCall_10_0_RIGHT_PARENTESETerminalRuleCall_10_1__;
	protected AbstractElementAlias match_initializer_LEFT_CHAVESTerminalRuleCall_0_0_or_LEFT_CHAVESTerminalRuleCall_1_0;
	protected AbstractElementAlias match_jump_statement_GOTOKeyword_0_0_q;
	protected AbstractElementAlias match_jump_statement_ReturnKeyword_4_0_q;
	protected AbstractElementAlias match_jump_statement___BREAKKeyword_2_0_DOT_COMMATerminalRuleCall_2_1___or___CONTINUEKeyword_1_0_DOT_COMMATerminalRuleCall_1_1___or___ReturnKeyword_3_0_DOT_COMMATerminalRuleCall_3_1__;
	protected AbstractElementAlias match_pointer_AsteriskKeyword_2_0_or_AsteriskKeyword_3;
	protected AbstractElementAlias match_postfix_expressionR_DEC_OPTerminalRuleCall_6_0_or_INC_OPTerminalRuleCall_5_0_or___LEFT_PARENTESETerminalRuleCall_1_0_RIGHT_PARENTESETerminalRuleCall_1_1__;
	protected AbstractElementAlias match_postfix_expressionR_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_4_0;
	protected AbstractElementAlias match_type_specifier_BOOLKeyword_9_or_COMPLEXKeyword_10_or_CharKeyword_1_or_DoubleKeyword_6_or_FloatKeyword_5_or_IMAGINARYKeyword_11_or_IntKeyword_3_or_LongKeyword_4_or_SIGNEDKeyword_7_or_ShortKeyword_2_or_TYPEDEF_NAMEKeyword_14_or_UNSIGNEDKeyword_8_or_VoidKeyword_0;
	protected AbstractElementAlias match_unary_expression_DEC_OPTerminalRuleCall_2_0_or_INC_OPTerminalRuleCall_1_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_declaration_specifiers_Storage_class_specifierParserRuleCall_1_or_Type_qualifierParserRuleCall_5 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclaration_specifiersAccess().getStorage_class_specifierParserRuleCall_1()), new TokenAlias(false, false, grammarAccess.getDeclaration_specifiersAccess().getType_qualifierParserRuleCall_5()));
		match_direct_declaratorR___LEFT_COCHETETerminalRuleCall_0_0_RIGHT_COCHETETerminalRuleCall_0_1___or___LEFT_COCHETETerminalRuleCall_1_0_AsteriskKeyword_1_1_RIGHT_COCHETETerminalRuleCall_1_2___or___LEFT_PARENTESETerminalRuleCall_10_0_RIGHT_PARENTESETerminalRuleCall_10_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDirect_declaratorRAccess().getLEFT_COCHETETerminalRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getDirect_declaratorRAccess().getRIGHT_COCHETETerminalRuleCall_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDirect_declaratorRAccess().getLEFT_COCHETETerminalRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getDirect_declaratorRAccess().getAsteriskKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getDirect_declaratorRAccess().getRIGHT_COCHETETerminalRuleCall_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getDirect_declaratorRAccess().getLEFT_PARENTESETerminalRuleCall_10_0()), new TokenAlias(false, false, grammarAccess.getDirect_declaratorRAccess().getRIGHT_PARENTESETerminalRuleCall_10_1())));
		match_initializer_LEFT_CHAVESTerminalRuleCall_0_0_or_LEFT_CHAVESTerminalRuleCall_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getInitializerAccess().getLEFT_CHAVESTerminalRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getInitializerAccess().getLEFT_CHAVESTerminalRuleCall_1_0()));
		match_jump_statement_GOTOKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getJump_statementAccess().getGOTOKeyword_0_0());
		match_jump_statement_ReturnKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getJump_statementAccess().getReturnKeyword_4_0());
		match_jump_statement___BREAKKeyword_2_0_DOT_COMMATerminalRuleCall_2_1___or___CONTINUEKeyword_1_0_DOT_COMMATerminalRuleCall_1_1___or___ReturnKeyword_3_0_DOT_COMMATerminalRuleCall_3_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getJump_statementAccess().getBREAKKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getJump_statementAccess().getDOT_COMMATerminalRuleCall_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getJump_statementAccess().getCONTINUEKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getJump_statementAccess().getDOT_COMMATerminalRuleCall_1_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getJump_statementAccess().getReturnKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getJump_statementAccess().getDOT_COMMATerminalRuleCall_3_1())));
		match_pointer_AsteriskKeyword_2_0_or_AsteriskKeyword_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPointerAccess().getAsteriskKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getPointerAccess().getAsteriskKeyword_3()));
		match_postfix_expressionR_DEC_OPTerminalRuleCall_6_0_or_INC_OPTerminalRuleCall_5_0_or___LEFT_PARENTESETerminalRuleCall_1_0_RIGHT_PARENTESETerminalRuleCall_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfix_expressionRAccess().getLEFT_PARENTESETerminalRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getPostfix_expressionRAccess().getRIGHT_PARENTESETerminalRuleCall_1_1())), new TokenAlias(false, false, grammarAccess.getPostfix_expressionRAccess().getDEC_OPTerminalRuleCall_6_0()), new TokenAlias(false, false, grammarAccess.getPostfix_expressionRAccess().getINC_OPTerminalRuleCall_5_0()));
		match_postfix_expressionR_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_4_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfix_expressionRAccess().getFullStopKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getPostfix_expressionRAccess().getHyphenMinusGreaterThanSignKeyword_4_0()));
		match_type_specifier_BOOLKeyword_9_or_COMPLEXKeyword_10_or_CharKeyword_1_or_DoubleKeyword_6_or_FloatKeyword_5_or_IMAGINARYKeyword_11_or_IntKeyword_3_or_LongKeyword_4_or_SIGNEDKeyword_7_or_ShortKeyword_2_or_TYPEDEF_NAMEKeyword_14_or_UNSIGNEDKeyword_8_or_VoidKeyword_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getBOOLKeyword_9()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getCOMPLEXKeyword_10()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getCharKeyword_1()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getDoubleKeyword_6()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getFloatKeyword_5()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getIMAGINARYKeyword_11()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getIntKeyword_3()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getLongKeyword_4()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getSIGNEDKeyword_7()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getShortKeyword_2()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getTYPEDEF_NAMEKeyword_14()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getUNSIGNEDKeyword_8()), new TokenAlias(false, false, grammarAccess.getType_specifierAccess().getVoidKeyword_0()));
		match_unary_expression_DEC_OPTerminalRuleCall_2_0_or_INC_OPTerminalRuleCall_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUnary_expressionAccess().getDEC_OPTerminalRuleCall_2_0()), new TokenAlias(false, false, grammarAccess.getUnary_expressionAccess().getINC_OPTerminalRuleCall_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDEC_OPRule())
			return getDEC_OPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOTSRule())
			return getDOTSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOT_COMMARule())
			return getDOT_COMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINC_OPRule())
			return getINC_OPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLEFT_CHAVESRule())
			return getLEFT_CHAVESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLEFT_COCHETERule())
			return getLEFT_COCHETEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLEFT_PARENTESERule())
			return getLEFT_PARENTESEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMINUSRule())
			return getMINUSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPLUSRule())
			return getPLUSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRIGHT_CHAVESRule())
			return getRIGHT_CHAVESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRIGHT_COCHETERule())
			return getRIGHT_COCHETEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRIGHT_PARENTESERule())
			return getRIGHT_PARENTESEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConstantRule())
			return getconstantToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStorage_class_specifierRule())
			return getstorage_class_specifierToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStruct_or_unionRule())
			return getstruct_or_unionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getType_qualifierRule())
			return gettype_qualifierToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMMA:	',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal DEC_OP: '--';
	 */
	protected String getDEC_OPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "--";
	}
	
	/**
	 * terminal DOTS: ':';
	 */
	protected String getDOTSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal DOT_COMMA:	';';
	 */
	protected String getDOT_COMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal INC_OP: '++';
	 */
	protected String getINC_OPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "++";
	}
	
	/**
	 * terminal LEFT_CHAVES:	'{';
	 */
	protected String getLEFT_CHAVESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "{";
	}
	
	/**
	 * terminal LEFT_COCHETE: '[';
	 */
	protected String getLEFT_COCHETEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * terminal LEFT_PARENTESE: '(';
	 */
	protected String getLEFT_PARENTESEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal MINUS:	'-';
	 */
	protected String getMINUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * terminal PLUS:	'+';
	 */
	protected String getPLUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * terminal RIGHT_CHAVES:	'}';
	 */
	protected String getRIGHT_CHAVESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "}";
	}
	
	/**
	 * terminal RIGHT_COCHETE:	']';
	 */
	protected String getRIGHT_COCHETEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	/**
	 * terminal RIGHT_PARENTESE: ')';
	 */
	protected String getRIGHT_PARENTESEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * constant
	 * 	:INTEGER_NUMBER 
	 * 	|DOUBLE_NUMBER 
	 * ;
	 */
	protected String getconstantToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * storage_class_specifier
	 * 	:'TYPEDEF' 
	 * 	|'EXTERN' 
	 * 	|'STATIC' 
	 * 	|'THREAD_LOCAL' 
	 * 	|'AUTO' 
	 * 	|'REGISTER' 
	 * ;
	 */
	protected String getstorage_class_specifierToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "TYPEDEF";
	}
	
	/**
	 * struct_or_union
	 * 	:'STRUCT' 
	 * 	|'UNION' 
	 * ;
	 */
	protected String getstruct_or_unionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "STRUCT";
	}
	
	/**
	 * type_qualifier
	 * 	:'CONST' 
	 * 	|'RESTRICT' 
	 * 	|'VOLATILE' 
	 * 	|'ATOMIC' 
	 * ;
	 */
	protected String gettype_qualifierToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CONST";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_declaration_specifiers_Storage_class_specifierParserRuleCall_1_or_Type_qualifierParserRuleCall_5.equals(syntax))
				emit_declaration_specifiers_Storage_class_specifierParserRuleCall_1_or_Type_qualifierParserRuleCall_5(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_direct_declaratorR___LEFT_COCHETETerminalRuleCall_0_0_RIGHT_COCHETETerminalRuleCall_0_1___or___LEFT_COCHETETerminalRuleCall_1_0_AsteriskKeyword_1_1_RIGHT_COCHETETerminalRuleCall_1_2___or___LEFT_PARENTESETerminalRuleCall_10_0_RIGHT_PARENTESETerminalRuleCall_10_1__.equals(syntax))
				emit_direct_declaratorR___LEFT_COCHETETerminalRuleCall_0_0_RIGHT_COCHETETerminalRuleCall_0_1___or___LEFT_COCHETETerminalRuleCall_1_0_AsteriskKeyword_1_1_RIGHT_COCHETETerminalRuleCall_1_2___or___LEFT_PARENTESETerminalRuleCall_10_0_RIGHT_PARENTESETerminalRuleCall_10_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_initializer_LEFT_CHAVESTerminalRuleCall_0_0_or_LEFT_CHAVESTerminalRuleCall_1_0.equals(syntax))
				emit_initializer_LEFT_CHAVESTerminalRuleCall_0_0_or_LEFT_CHAVESTerminalRuleCall_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_jump_statement_GOTOKeyword_0_0_q.equals(syntax))
				emit_jump_statement_GOTOKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_jump_statement_ReturnKeyword_4_0_q.equals(syntax))
				emit_jump_statement_ReturnKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_jump_statement___BREAKKeyword_2_0_DOT_COMMATerminalRuleCall_2_1___or___CONTINUEKeyword_1_0_DOT_COMMATerminalRuleCall_1_1___or___ReturnKeyword_3_0_DOT_COMMATerminalRuleCall_3_1__.equals(syntax))
				emit_jump_statement___BREAKKeyword_2_0_DOT_COMMATerminalRuleCall_2_1___or___CONTINUEKeyword_1_0_DOT_COMMATerminalRuleCall_1_1___or___ReturnKeyword_3_0_DOT_COMMATerminalRuleCall_3_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_pointer_AsteriskKeyword_2_0_or_AsteriskKeyword_3.equals(syntax))
				emit_pointer_AsteriskKeyword_2_0_or_AsteriskKeyword_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_postfix_expressionR_DEC_OPTerminalRuleCall_6_0_or_INC_OPTerminalRuleCall_5_0_or___LEFT_PARENTESETerminalRuleCall_1_0_RIGHT_PARENTESETerminalRuleCall_1_1__.equals(syntax))
				emit_postfix_expressionR_DEC_OPTerminalRuleCall_6_0_or_INC_OPTerminalRuleCall_5_0_or___LEFT_PARENTESETerminalRuleCall_1_0_RIGHT_PARENTESETerminalRuleCall_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_postfix_expressionR_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_4_0.equals(syntax))
				emit_postfix_expressionR_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_4_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_type_specifier_BOOLKeyword_9_or_COMPLEXKeyword_10_or_CharKeyword_1_or_DoubleKeyword_6_or_FloatKeyword_5_or_IMAGINARYKeyword_11_or_IntKeyword_3_or_LongKeyword_4_or_SIGNEDKeyword_7_or_ShortKeyword_2_or_TYPEDEF_NAMEKeyword_14_or_UNSIGNEDKeyword_8_or_VoidKeyword_0.equals(syntax))
				emit_type_specifier_BOOLKeyword_9_or_COMPLEXKeyword_10_or_CharKeyword_1_or_DoubleKeyword_6_or_FloatKeyword_5_or_IMAGINARYKeyword_11_or_IntKeyword_3_or_LongKeyword_4_or_SIGNEDKeyword_7_or_ShortKeyword_2_or_TYPEDEF_NAMEKeyword_14_or_UNSIGNEDKeyword_8_or_VoidKeyword_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_unary_expression_DEC_OPTerminalRuleCall_2_0_or_INC_OPTerminalRuleCall_1_0.equals(syntax))
				emit_unary_expression_DEC_OPTerminalRuleCall_2_0_or_INC_OPTerminalRuleCall_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     storage_class_specifier | type_qualifier
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_declaration_specifiers_Storage_class_specifierParserRuleCall_1_or_Type_qualifierParserRuleCall_5(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (LEFT_COCHETE '*' RIGHT_COCHETE) | (LEFT_COCHETE RIGHT_COCHETE) | (LEFT_PARENTESE RIGHT_PARENTESE)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_direct_declaratorR___LEFT_COCHETETerminalRuleCall_0_0_RIGHT_COCHETETerminalRuleCall_0_1___or___LEFT_COCHETETerminalRuleCall_1_0_AsteriskKeyword_1_1_RIGHT_COCHETETerminalRuleCall_1_2___or___LEFT_PARENTESETerminalRuleCall_10_0_RIGHT_PARENTESETerminalRuleCall_10_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     LEFT_CHAVES | LEFT_CHAVES
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) Designation=designation
	 *     (rule start) (ambiguity) Initializer=initializer
	 */
	protected void emit_initializer_LEFT_CHAVESTerminalRuleCall_0_0_or_LEFT_CHAVESTerminalRuleCall_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'GOTO'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_jump_statement_GOTOKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) Assignment_expression=assignment_expression
	 */
	protected void emit_jump_statement_ReturnKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('CONTINUE' DOT_COMMA) | ('BREAK' DOT_COMMA) | ('return' DOT_COMMA)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_jump_statement___BREAKKeyword_2_0_DOT_COMMATerminalRuleCall_2_1___or___CONTINUEKeyword_1_0_DOT_COMMATerminalRuleCall_1_1___or___ReturnKeyword_3_0_DOT_COMMATerminalRuleCall_3_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*' | '*'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_pointer_AsteriskKeyword_2_0_or_AsteriskKeyword_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (LEFT_PARENTESE RIGHT_PARENTESE) | INC_OP | DEC_OP
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_postfix_expressionR_DEC_OPTerminalRuleCall_6_0_or_INC_OPTerminalRuleCall_5_0_or___LEFT_PARENTESETerminalRuleCall_1_0_RIGHT_PARENTESETerminalRuleCall_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '.' | '->'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_postfix_expressionR_FullStopKeyword_3_0_or_HyphenMinusGreaterThanSignKeyword_4_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'void' | 
	  *         'char' | 
	  *         'short' | 
	  *         'int' | 
	  *         'long' | 
	  *         'float' | 
	  *         'double' | 
	  *         'SIGNED' | 
	  *         'UNSIGNED' | 
	  *         'BOOL' | 
	  *         'COMPLEX' | 
	  *         'IMAGINARY' | 
	  *         'TYPEDEF_NAME'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) ds=declaration_specifiers
	 */
	protected void emit_type_specifier_BOOLKeyword_9_or_COMPLEXKeyword_10_or_CharKeyword_1_or_DoubleKeyword_6_or_FloatKeyword_5_or_IMAGINARYKeyword_11_or_IntKeyword_3_or_LongKeyword_4_or_SIGNEDKeyword_7_or_ShortKeyword_2_or_TYPEDEF_NAMEKeyword_14_or_UNSIGNEDKeyword_8_or_VoidKeyword_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INC_OP | DEC_OP
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_unary_expression_DEC_OPTerminalRuleCall_2_0_or_INC_OPTerminalRuleCall_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
