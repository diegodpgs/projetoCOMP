/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @parameter ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRANSLATION_UNIT:
      {
        translation_unit translation_unit = (translation_unit)theEObject;
        T result = casetranslation_unit(translation_unit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRANSLATION_UNIT_R:
      {
        translation_unitR translation_unitR = (translation_unitR)theEObject;
        T result = casetranslation_unitR(translation_unitR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXTERNAL_DECLARATION:
      {
        external_declaration external_declaration = (external_declaration)theEObject;
        T result = caseexternal_declaration(external_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FUNCTION_DEFINITION:
      {
        function_definition function_definition = (function_definition)theEObject;
        T result = casefunction_definition(function_definition);
        if (result == null) result = caseexternal_declaration(function_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATOR:
      {
        declarator declarator = (declarator)theEObject;
        T result = casedeclarator(declarator);
        if (result == null) result = caseinit_declarator(declarator);
        if (result == null) result = casestruct_declarator(declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_QUALIFIER_LIST:
      {
        type_qualifier_list type_qualifier_list = (type_qualifier_list)theEObject;
        T result = casetype_qualifier_list(type_qualifier_list);
        if (result == null) result = casepointer(type_qualifier_list);
        if (result == null) result = caseabstract_declarator(type_qualifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_QUALIFIER_LIST_R:
      {
        type_qualifier_listR type_qualifier_listR = (type_qualifier_listR)theEObject;
        T result = casetype_qualifier_listR(type_qualifier_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIRECT_DECLARATOR:
      {
        direct_declarator direct_declarator = (direct_declarator)theEObject;
        T result = casedirect_declarator(direct_declarator);
        if (result == null) result = casedeclarator(direct_declarator);
        if (result == null) result = caseinit_declarator(direct_declarator);
        if (result == null) result = casestruct_declarator(direct_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIRECT_DECLARATOR_R:
      {
        direct_declaratorR direct_declaratorR = (direct_declaratorR)theEObject;
        T result = casedirect_declaratorR(direct_declaratorR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_TYPE_LIST:
      {
        parameter_type_list parameter_type_list = (parameter_type_list)theEObject;
        T result = caseparameter_type_list(parameter_type_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IDENTIFIER_LIST:
      {
        identifier_list identifier_list = (identifier_list)theEObject;
        T result = caseidentifier_list(identifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IDENTIFIER_LIST_R:
      {
        identifier_listR identifier_listR = (identifier_listR)theEObject;
        T result = caseidentifier_listR(identifier_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_LIST:
      {
        parameter_list parameter_list = (parameter_list)theEObject;
        T result = caseparameter_list(parameter_list);
        if (result == null) result = caseparameter_type_list(parameter_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_LIST_R:
      {
        parameter_listR parameter_listR = (parameter_listR)theEObject;
        T result = caseparameter_listR(parameter_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_DECLARATION:
      {
        parameter_declaration parameter_declaration = (parameter_declaration)theEObject;
        T result = caseparameter_declaration(parameter_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ABSTRACT_DECLARATOR:
      {
        abstract_declarator abstract_declarator = (abstract_declarator)theEObject;
        T result = caseabstract_declarator(abstract_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION_LIST:
      {
        declaration_list declaration_list = (declaration_list)theEObject;
        T result = casedeclaration_list(declaration_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION_LIST_R:
      {
        declaration_listR declaration_listR = (declaration_listR)theEObject;
        T result = casedeclaration_listR(declaration_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPOUND_STATEMENT:
      {
        compound_statement compound_statement = (compound_statement)theEObject;
        T result = casecompound_statement(compound_statement);
        if (result == null) result = casestatement(compound_statement);
        if (result == null) result = caseblock_item(compound_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BLOCK_ITEM_LIST:
      {
        block_item_list block_item_list = (block_item_list)theEObject;
        T result = caseblock_item_list(block_item_list);
        if (result == null) result = casecompound_statement(block_item_list);
        if (result == null) result = casestatement(block_item_list);
        if (result == null) result = caseblock_item(block_item_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BLOCK_ITEM_LIST_R:
      {
        block_item_listR block_item_listR = (block_item_listR)theEObject;
        T result = caseblock_item_listR(block_item_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BLOCK_ITEM:
      {
        block_item block_item = (block_item)theEObject;
        T result = caseblock_item(block_item);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATEMENT:
      {
        statement statement = (statement)theEObject;
        T result = casestatement(statement);
        if (result == null) result = caseblock_item(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JUMP_STATEMENT:
      {
        jump_statement jump_statement = (jump_statement)theEObject;
        T result = casejump_statement(jump_statement);
        if (result == null) result = casestatement(jump_statement);
        if (result == null) result = caseblock_item(jump_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LABELED_STATEMENT:
      {
        labeled_statement labeled_statement = (labeled_statement)theEObject;
        T result = caselabeled_statement(labeled_statement);
        if (result == null) result = casestatement(labeled_statement);
        if (result == null) result = caseblock_item(labeled_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ITERATION_STATEMENT:
      {
        iteration_statement iteration_statement = (iteration_statement)theEObject;
        T result = caseiteration_statement(iteration_statement);
        if (result == null) result = casestatement(iteration_statement);
        if (result == null) result = caseblock_item(iteration_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION:
      {
        declaration declaration = (declaration)theEObject;
        T result = casedeclaration(declaration);
        if (result == null) result = caseexternal_declaration(declaration);
        if (result == null) result = caseblock_item(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INIT_DECLARATOR_LIST:
      {
        init_declarator_list init_declarator_list = (init_declarator_list)theEObject;
        T result = caseinit_declarator_list(init_declarator_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INIT_DECLARATOR:
      {
        init_declarator init_declarator = (init_declarator)theEObject;
        T result = caseinit_declarator(init_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INIT_DECLARATOR_LIST_R:
      {
        init_declarator_listR init_declarator_listR = (init_declarator_listR)theEObject;
        T result = caseinit_declarator_listR(init_declarator_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION_SPECIFIERS:
      {
        declaration_specifiers declaration_specifiers = (declaration_specifiers)theEObject;
        T result = casedeclaration_specifiers(declaration_specifiers);
        if (result == null) result = caseparameter_declaration(declaration_specifiers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SELECTION_STATEMENT:
      {
        selection_statement selection_statement = (selection_statement)theEObject;
        T result = caseselection_statement(selection_statement);
        if (result == null) result = casestatement(selection_statement);
        if (result == null) result = caseblock_item(selection_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION_STATEMENT:
      {
        expression_statement expression_statement = (expression_statement)theEObject;
        T result = caseexpression_statement(expression_statement);
        if (result == null) result = casestatement(expression_statement);
        if (result == null) result = caseblock_item(expression_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION:
      {
        expression expression = (expression)theEObject;
        T result = caseexpression(expression);
        if (result == null) result = casejump_statement(expression);
        if (result == null) result = caseexpression_statement(expression);
        if (result == null) result = caseprimary_expression(expression);
        if (result == null) result = casestatement(expression);
        if (result == null) result = caseblock_item(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION_R:
      {
        expressionR expressionR = (expressionR)theEObject;
        T result = caseexpressionR(expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONDITIONAL_EXPRESSION:
      {
        conditional_expression conditional_expression = (conditional_expression)theEObject;
        T result = caseconditional_expression(conditional_expression);
        if (result == null) result = caseassignment_expression(conditional_expression);
        if (result == null) result = caseconstant_expression(conditional_expression);
        if (result == null) result = caseinitializer(conditional_expression);
        if (result == null) result = casedesignator(conditional_expression);
        if (result == null) result = casestruct_declarator(conditional_expression);
        if (result == null) result = casestatic_assert_declaration(conditional_expression);
        if (result == null) result = casedeclaration(conditional_expression);
        if (result == null) result = casestruct_declaration(conditional_expression);
        if (result == null) result = caseexternal_declaration(conditional_expression);
        if (result == null) result = caseblock_item(conditional_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_OR_EXPRESSION:
      {
        logical_or_expression logical_or_expression = (logical_or_expression)theEObject;
        T result = caselogical_or_expression(logical_or_expression);
        if (result == null) result = caseconditional_expression(logical_or_expression);
        if (result == null) result = caseassignment_expression(logical_or_expression);
        if (result == null) result = caseconstant_expression(logical_or_expression);
        if (result == null) result = caseinitializer(logical_or_expression);
        if (result == null) result = casedesignator(logical_or_expression);
        if (result == null) result = casestruct_declarator(logical_or_expression);
        if (result == null) result = casestatic_assert_declaration(logical_or_expression);
        if (result == null) result = casedeclaration(logical_or_expression);
        if (result == null) result = casestruct_declaration(logical_or_expression);
        if (result == null) result = caseexternal_declaration(logical_or_expression);
        if (result == null) result = caseblock_item(logical_or_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_OR_EXPRESSION_R:
      {
        logical_or_expressionR logical_or_expressionR = (logical_or_expressionR)theEObject;
        T result = caselogical_or_expressionR(logical_or_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_AND_EXPRESSION:
      {
        logical_and_expression logical_and_expression = (logical_and_expression)theEObject;
        T result = caselogical_and_expression(logical_and_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_AND_EXPRESSION_R:
      {
        logical_and_expressionR logical_and_expressionR = (logical_and_expressionR)theEObject;
        T result = caselogical_and_expressionR(logical_and_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INCLUSIVE_OR_EXPRESSION:
      {
        inclusive_or_expression inclusive_or_expression = (inclusive_or_expression)theEObject;
        T result = caseinclusive_or_expression(inclusive_or_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INCLUSIVE_OR_EXPRESSION_R:
      {
        inclusive_or_expressionR inclusive_or_expressionR = (inclusive_or_expressionR)theEObject;
        T result = caseinclusive_or_expressionR(inclusive_or_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCLUSIVE_OR_EXPRESSION:
      {
        exclusive_or_expression exclusive_or_expression = (exclusive_or_expression)theEObject;
        T result = caseexclusive_or_expression(exclusive_or_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCLUSIVE_OR_EXPRESSION_R:
      {
        exclusive_or_expressionR exclusive_or_expressionR = (exclusive_or_expressionR)theEObject;
        T result = caseexclusive_or_expressionR(exclusive_or_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AND_EXPRESSION_R:
      {
        and_expressionR and_expressionR = (and_expressionR)theEObject;
        T result = caseand_expressionR(and_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AND_EXPRESSION:
      {
        and_expression and_expression = (and_expression)theEObject;
        T result = caseand_expression(and_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EQUALITY_EXPRESSION:
      {
        equality_expression equality_expression = (equality_expression)theEObject;
        T result = caseequality_expression(equality_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EQUALITY_EXPRESSION_R:
      {
        equality_expressionR equality_expressionR = (equality_expressionR)theEObject;
        T result = caseequality_expressionR(equality_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATIONAL_EXPRESSION:
      {
        relational_expression relational_expression = (relational_expression)theEObject;
        T result = caserelational_expression(relational_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATIONAL_EXPRESSION_R:
      {
        relational_expressionR relational_expressionR = (relational_expressionR)theEObject;
        T result = caserelational_expressionR(relational_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SHIFT_EXPRESSION:
      {
        shift_expression shift_expression = (shift_expression)theEObject;
        T result = caseshift_expression(shift_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SHIFT_EXPRESSION_R:
      {
        shift_expressionR shift_expressionR = (shift_expressionR)theEObject;
        T result = caseshift_expressionR(shift_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ADDITIVE_EXPRESSION:
      {
        additive_expression additive_expression = (additive_expression)theEObject;
        T result = caseadditive_expression(additive_expression);
        if (result == null) result = caseshift_expression(additive_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ADDITIVE_EXPRESSION_R:
      {
        additive_expressionR additive_expressionR = (additive_expressionR)theEObject;
        T result = caseadditive_expressionR(additive_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_R:
      {
        multiplicative_expressionR multiplicative_expressionR = (multiplicative_expressionR)theEObject;
        T result = casemultiplicative_expressionR(multiplicative_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION:
      {
        multiplicative_expression multiplicative_expression = (multiplicative_expression)theEObject;
        T result = casemultiplicative_expression(multiplicative_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ASSIGNMENT_EXPRESSION:
      {
        assignment_expression assignment_expression = (assignment_expression)theEObject;
        T result = caseassignment_expression(assignment_expression);
        if (result == null) result = caseinitializer(assignment_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CAST_EXPRESSION:
      {
        cast_expression cast_expression = (cast_expression)theEObject;
        T result = casecast_expression(cast_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.UNARY_EXPRESSION:
      {
        unary_expression unary_expression = (unary_expression)theEObject;
        T result = caseunary_expression(unary_expression);
        if (result == null) result = casecast_expression(unary_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POSTFIX_EXPRESSION:
      {
        postfix_expression postfix_expression = (postfix_expression)theEObject;
        T result = casepostfix_expression(postfix_expression);
        if (result == null) result = caseunary_expression(postfix_expression);
        if (result == null) result = casecast_expression(postfix_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INITIALIZER:
      {
        initializer initializer = (initializer)theEObject;
        T result = caseinitializer(initializer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INITIALIZER_LIST:
      {
        initializer_list initializer_list = (initializer_list)theEObject;
        T result = caseinitializer_list(initializer_list);
        if (result == null) result = caseinitializer(initializer_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INITIALIZER_LIST_R:
      {
        initializer_listR initializer_listR = (initializer_listR)theEObject;
        T result = caseinitializer_listR(initializer_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATION:
      {
        designation designation = (designation)theEObject;
        T result = casedesignation(designation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATOR_LIST:
      {
        designator_list designator_list = (designator_list)theEObject;
        T result = casedesignator_list(designator_list);
        if (result == null) result = casedesignation(designator_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATOR_LIST_R:
      {
        designator_listR designator_listR = (designator_listR)theEObject;
        T result = casedesignator_listR(designator_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATOR:
      {
        designator designator = (designator)theEObject;
        T result = casedesignator(designator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONSTANT_EXPRESSION:
      {
        constant_expression constant_expression = (constant_expression)theEObject;
        T result = caseconstant_expression(constant_expression);
        if (result == null) result = casedesignator(constant_expression);
        if (result == null) result = casestruct_declarator(constant_expression);
        if (result == null) result = casestatic_assert_declaration(constant_expression);
        if (result == null) result = casedeclaration(constant_expression);
        if (result == null) result = casestruct_declaration(constant_expression);
        if (result == null) result = caseexternal_declaration(constant_expression);
        if (result == null) result = caseblock_item(constant_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_NAME:
      {
        type_name type_name = (type_name)theEObject;
        T result = casetype_name(type_name);
        if (result == null) result = caseatomic_type_specifier(type_name);
        if (result == null) result = casetype_specifier(type_name);
        if (result == null) result = casedeclaration_specifiers(type_name);
        if (result == null) result = caseparameter_declaration(type_name);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SPECIFIER_QUALIFIER_LIST:
      {
        specifier_qualifier_list specifier_qualifier_list = (specifier_qualifier_list)theEObject;
        T result = casespecifier_qualifier_list(specifier_qualifier_list);
        if (result == null) result = casetype_name(specifier_qualifier_list);
        if (result == null) result = casestruct_declaration(specifier_qualifier_list);
        if (result == null) result = caseatomic_type_specifier(specifier_qualifier_list);
        if (result == null) result = casetype_specifier(specifier_qualifier_list);
        if (result == null) result = casedeclaration_specifiers(specifier_qualifier_list);
        if (result == null) result = caseparameter_declaration(specifier_qualifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATOR_LIST:
      {
        struct_declarator_list struct_declarator_list = (struct_declarator_list)theEObject;
        T result = casestruct_declarator_list(struct_declarator_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATION_LIST:
      {
        struct_declaration_list struct_declaration_list = (struct_declaration_list)theEObject;
        T result = casestruct_declaration_list(struct_declaration_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATION_LIST_R:
      {
        struct_declaration_listR struct_declaration_listR = (struct_declaration_listR)theEObject;
        T result = casestruct_declaration_listR(struct_declaration_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATION:
      {
        struct_declaration struct_declaration = (struct_declaration)theEObject;
        T result = casestruct_declaration(struct_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATOR_LIST_R:
      {
        struct_declarator_listR struct_declarator_listR = (struct_declarator_listR)theEObject;
        T result = casestruct_declarator_listR(struct_declarator_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATOR:
      {
        struct_declarator struct_declarator = (struct_declarator)theEObject;
        T result = casestruct_declarator(struct_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATIC_ASSERT_DECLARATION:
      {
        static_assert_declaration static_assert_declaration = (static_assert_declaration)theEObject;
        T result = casestatic_assert_declaration(static_assert_declaration);
        if (result == null) result = casedeclaration(static_assert_declaration);
        if (result == null) result = casestruct_declaration(static_assert_declaration);
        if (result == null) result = caseexternal_declaration(static_assert_declaration);
        if (result == null) result = caseblock_item(static_assert_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_OR_UNION_SPECIFIER:
      {
        struct_or_union_specifier struct_or_union_specifier = (struct_or_union_specifier)theEObject;
        T result = casestruct_or_union_specifier(struct_or_union_specifier);
        if (result == null) result = casetype_specifier(struct_or_union_specifier);
        if (result == null) result = casedeclaration_specifiers(struct_or_union_specifier);
        if (result == null) result = caseparameter_declaration(struct_or_union_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_TYPE_SPECIFIER:
      {
        atomic_type_specifier atomic_type_specifier = (atomic_type_specifier)theEObject;
        T result = caseatomic_type_specifier(atomic_type_specifier);
        if (result == null) result = casetype_specifier(atomic_type_specifier);
        if (result == null) result = casedeclaration_specifiers(atomic_type_specifier);
        if (result == null) result = caseparameter_declaration(atomic_type_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POSTFIX_EXPRESSION_R:
      {
        postfix_expressionR postfix_expressionR = (postfix_expressionR)theEObject;
        T result = casepostfix_expressionR(postfix_expressionR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARGUMENT_EXPRESSION_LIST:
      {
        argument_expression_list argument_expression_list = (argument_expression_list)theEObject;
        T result = caseargument_expression_list(argument_expression_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARGUMENT_EXPRESSION_LIST_R:
      {
        argument_expression_listR argument_expression_listR = (argument_expression_listR)theEObject;
        T result = caseargument_expression_listR(argument_expression_listR);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PRIMARY_EXPRESSION:
      {
        primary_expression primary_expression = (primary_expression)theEObject;
        T result = caseprimary_expression(primary_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINTER:
      {
        pointer pointer = (pointer)theEObject;
        T result = casepointer(pointer);
        if (result == null) result = caseabstract_declarator(pointer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IDENTIFIER:
      {
        IDENTIFIER identifier = (IDENTIFIER)theEObject;
        T result = caseIDENTIFIER(identifier);
        if (result == null) result = casedirect_declarator(identifier);
        if (result == null) result = caseidentifier_list(identifier);
        if (result == null) result = caseidentifier_listR(identifier);
        if (result == null) result = casejump_statement(identifier);
        if (result == null) result = caselabeled_statement(identifier);
        if (result == null) result = casedesignator(identifier);
        if (result == null) result = casestruct_or_union_specifier(identifier);
        if (result == null) result = casepostfix_expressionR(identifier);
        if (result == null) result = caseprimary_expression(identifier);
        if (result == null) result = casedeclarator(identifier);
        if (result == null) result = casestatement(identifier);
        if (result == null) result = casetype_specifier(identifier);
        if (result == null) result = caseinit_declarator(identifier);
        if (result == null) result = casestruct_declarator(identifier);
        if (result == null) result = caseblock_item(identifier);
        if (result == null) result = casedeclaration_specifiers(identifier);
        if (result == null) result = caseparameter_declaration(identifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_SPECIFIER:
      {
        type_specifier type_specifier = (type_specifier)theEObject;
        T result = casetype_specifier(type_specifier);
        if (result == null) result = casedeclaration_specifiers(type_specifier);
        if (result == null) result = caseparameter_declaration(type_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRING_C:
      {
        StringC stringC = (StringC)theEObject;
        T result = caseStringC(stringC);
        if (result == null) result = caseprimary_expression(stringC);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>translation unit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>translation unit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetranslation_unit(translation_unit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>translation unit R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>translation unit R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetranslation_unitR(translation_unitR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>external declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>external declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexternal_declaration(external_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunction_definition(function_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclarator(declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type qualifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type qualifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_qualifier_list(type_qualifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type qualifier list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type qualifier list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_qualifier_listR(type_qualifier_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>direct declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>direct declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedirect_declarator(direct_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>direct declarator R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>direct declarator R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedirect_declaratorR(direct_declaratorR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter type list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter type list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_type_list(parameter_type_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifier_list(identifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifier_listR(identifier_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_list(parameter_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_listR(parameter_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_declaration(parameter_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>abstract declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>abstract declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseabstract_declarator(abstract_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration_list(declaration_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration_listR(declaration_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compound statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compound statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompound_statement(compound_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>block item list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>block item list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblock_item_list(block_item_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>block item list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>block item list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblock_item_listR(block_item_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>block item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>block item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblock_item(block_item object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatement(statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>jump statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>jump statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casejump_statement(jump_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>labeled statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>labeled statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselabeled_statement(labeled_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>iteration statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>iteration statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseiteration_statement(iteration_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration(declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init declarator list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init declarator list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinit_declarator_list(init_declarator_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinit_declarator(init_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init declarator list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init declarator list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinit_declarator_listR(init_declarator_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration specifiers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration specifiers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration_specifiers(declaration_specifiers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>selection statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>selection statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseselection_statement(selection_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression_statement(expression_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression(expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpressionR(expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>conditional expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>conditional expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconditional_expression(conditional_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical or expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical or expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_or_expression(logical_or_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical or expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical or expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_or_expressionR(logical_or_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical and expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical and expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_and_expression(logical_and_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical and expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical and expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_and_expressionR(logical_and_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>inclusive or expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>inclusive or expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinclusive_or_expression(inclusive_or_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>inclusive or expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>inclusive or expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinclusive_or_expressionR(inclusive_or_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exclusive or expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exclusive or expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexclusive_or_expression(exclusive_or_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exclusive or expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exclusive or expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexclusive_or_expressionR(exclusive_or_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_expressionR(and_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_expression(and_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>equality expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>equality expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseequality_expression(equality_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>equality expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>equality expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseequality_expressionR(equality_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>relational expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>relational expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserelational_expression(relational_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>relational expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>relational expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserelational_expressionR(relational_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>shift expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>shift expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseshift_expression(shift_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>shift expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>shift expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseshift_expressionR(shift_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>additive expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>additive expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseadditive_expression(additive_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>additive expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>additive expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseadditive_expressionR(additive_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>multiplicative expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>multiplicative expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemultiplicative_expressionR(multiplicative_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>multiplicative expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>multiplicative expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemultiplicative_expression(multiplicative_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>assignment expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>assignment expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseassignment_expression(assignment_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cast expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cast expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecast_expression(cast_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unary expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unary expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunary_expression(unary_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>postfix expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>postfix expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepostfix_expression(postfix_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>initializer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>initializer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitializer(initializer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>initializer list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>initializer list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitializer_list(initializer_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>initializer list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>initializer list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitializer_listR(initializer_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignation(designation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designator list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designator list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignator_list(designator_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designator list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designator list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignator_listR(designator_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignator(designator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstant_expression(constant_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_name(type_name object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>specifier qualifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>specifier qualifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casespecifier_qualifier_list(specifier_qualifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declarator list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declarator list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declarator_list(struct_declarator_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declaration list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declaration list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declaration_list(struct_declaration_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declaration list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declaration list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declaration_listR(struct_declaration_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declaration(struct_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declarator list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declarator list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declarator_listR(struct_declarator_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declarator(struct_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>static assert declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>static assert declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatic_assert_declaration(static_assert_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct or union specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct or union specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_or_union_specifier(struct_or_union_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>atomic type specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>atomic type specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseatomic_type_specifier(atomic_type_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>postfix expression R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>postfix expression R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepostfix_expressionR(postfix_expressionR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>argument expression list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>argument expression list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseargument_expression_list(argument_expression_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>argument expression list R</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>argument expression list R</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseargument_expression_listR(argument_expression_listR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>primary expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>primary expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprimary_expression(primary_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>pointer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>pointer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepointer(pointer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IDENTIFIER</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IDENTIFIER</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIDENTIFIER(IDENTIFIER object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_specifier(type_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String C</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String C</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringC(StringC object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
