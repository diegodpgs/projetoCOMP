/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.pointer;
import org.xtext.example.mydsl.myDsl.type_qualifier_list;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>pointer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.pointerImpl#getType_qualifier_list <em>Type qualifier list</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.pointerImpl#getRec <em>Rec</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class pointerImpl extends abstract_declaratorImpl implements pointer
{
  /**
   * The cached value of the '{@link #getType_qualifier_list() <em>Type qualifier list</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType_qualifier_list()
   * @generated
   * @ordered
   */
  protected type_qualifier_list type_qualifier_list;

  /**
   * The cached value of the '{@link #getRec() <em>Rec</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRec()
   * @generated
   * @ordered
   */
  protected EList<pointer> rec;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected pointerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.POINTER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public type_qualifier_list getType_qualifier_list()
  {
    return type_qualifier_list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType_qualifier_list(type_qualifier_list newType_qualifier_list, NotificationChain msgs)
  {
    type_qualifier_list oldType_qualifier_list = type_qualifier_list;
    type_qualifier_list = newType_qualifier_list;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.POINTER__TYPE_QUALIFIER_LIST, oldType_qualifier_list, newType_qualifier_list);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType_qualifier_list(type_qualifier_list newType_qualifier_list)
  {
    if (newType_qualifier_list != type_qualifier_list)
    {
      NotificationChain msgs = null;
      if (type_qualifier_list != null)
        msgs = ((InternalEObject)type_qualifier_list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.POINTER__TYPE_QUALIFIER_LIST, null, msgs);
      if (newType_qualifier_list != null)
        msgs = ((InternalEObject)newType_qualifier_list).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.POINTER__TYPE_QUALIFIER_LIST, null, msgs);
      msgs = basicSetType_qualifier_list(newType_qualifier_list, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.POINTER__TYPE_QUALIFIER_LIST, newType_qualifier_list, newType_qualifier_list));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<pointer> getRec()
  {
    if (rec == null)
    {
      rec = new EObjectContainmentEList<pointer>(pointer.class, this, MyDslPackage.POINTER__REC);
    }
    return rec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.POINTER__TYPE_QUALIFIER_LIST:
        return basicSetType_qualifier_list(null, msgs);
      case MyDslPackage.POINTER__REC:
        return ((InternalEList<?>)getRec()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.POINTER__TYPE_QUALIFIER_LIST:
        return getType_qualifier_list();
      case MyDslPackage.POINTER__REC:
        return getRec();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.POINTER__TYPE_QUALIFIER_LIST:
        setType_qualifier_list((type_qualifier_list)newValue);
        return;
      case MyDslPackage.POINTER__REC:
        getRec().clear();
        getRec().addAll((Collection<? extends pointer>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.POINTER__TYPE_QUALIFIER_LIST:
        setType_qualifier_list((type_qualifier_list)null);
        return;
      case MyDslPackage.POINTER__REC:
        getRec().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.POINTER__TYPE_QUALIFIER_LIST:
        return type_qualifier_list != null;
      case MyDslPackage.POINTER__REC:
        return rec != null && !rec.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //pointerImpl
